{
  "address": "0xD70Afa272D0F3B9bA6E986EA09D6aeE87FAA6396",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSOracleRewardsV6_4_1.OpenLimitOrderType",
          "name": "value",
          "type": "uint8"
        }
      ],
      "name": "OpenLimitOrderTypeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclesCount",
          "type": "uint256"
        }
      ],
      "name": "OraclesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountGns",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "id",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardGns",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardGnsPerOracle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclesCount",
          "type": "uint256"
        }
      ],
      "name": "TriggerRewarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TriggerTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "id",
          "type": "tuple"
        }
      ],
      "name": "TriggerUnregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "id",
          "type": "tuple"
        }
      ],
      "name": "TriggeredFirst",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "distributeOracleReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracles",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_triggerTimeout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oraclesCount",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openLimitOrderTypes",
      "outputs": [
        {
          "internalType": "enum GNSOracleRewardsV6_4_1.OpenLimitOrderType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pendingRewardsGns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSOracleRewardsV6_4_1.OpenLimitOrderType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "setOpenLimitOrderType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stateCopied",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "_id",
          "type": "tuple"
        }
      ],
      "name": "storeTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "_id",
          "type": "tuple"
        }
      ],
      "name": "timedOut",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "_id",
          "type": "tuple"
        }
      ],
      "name": "triggered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "triggeredLimits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterfaceV5.LimitOrder",
              "name": "order",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSOracleRewardsV6_4_1.TriggeredLimitId",
          "name": "_id",
          "type": "tuple"
        }
      ],
      "name": "unregisterTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_oraclesCount",
          "type": "uint256"
        }
      ],
      "name": "updateOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_triggerTimeout",
          "type": "uint256"
        }
      ],
      "name": "updateTriggerTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4f319fb448887db37fe4318ee7c57acfc046574708d6c18e1cac3810b739eda",
  "receipt": {
    "to": null,
    "from": "0xE5f1Eb09e0d23c453FD787b21E6d082CDEE6b7B3",
    "contractAddress": "0xD70Afa272D0F3B9bA6E986EA09D6aeE87FAA6396",
    "transactionIndex": 9,
    "gasUsed": "1235251",
    "logsBloom": "0x
    "blockHash": "0x3a4556609900527acd603af82d31784e16a4d1f1c13ea591932080b1caf836ce",
    "transactionHash": "0xf4f319fb448887db37fe4318ee7c57acfc046574708d6c18e1cac3810b739eda",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 44937128,
        "transactionHash": "0xf4f319fb448887db37fe4318ee7c57acfc046574708d6c18e1cac3810b739eda",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5f1eb09e0d23c453fd787b21e6d082cdee6b7b3",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000007cdd6fbd62b28000000000000000000000000000000000000000000000000d988cafb9f1f987000000000000000000000000000000000000000000000056a357bdd7ea97271b3000000000000000000000000000000000000000000000000d980fd24a3496d4800000000000000000000000000000000000000000000056a3583ab55a5489cdb",
        "logIndex": 62,
        "blockHash": "0x3a4556609900527acd603af82d31784e16a4d1f1c13ea591932080b1caf836ce"
      }
    ],
    "blockNumber": 44937128,
    "cumulativeGasUsed": "3548013",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "62ead6fd019c01c7f32a188a2b283d94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSOracleRewardsV6_4_1.OpenLimitOrderType\",\"name\":\"value\",\"type\":\"uint8\"}],\"name\":\"OpenLimitOrderTypeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclesCount\",\"type\":\"uint256\"}],\"name\":\"OraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGns\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"id\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardGns\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardGnsPerOracle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclesCount\",\"type\":\"uint256\"}],\"name\":\"TriggerRewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TriggerTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"id\",\"type\":\"tuple\"}],\"name\":\"TriggerUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"id\",\"type\":\"tuple\"}],\"name\":\"TriggeredFirst\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"distributeOracleReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracles\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_triggerTimeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oraclesCount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openLimitOrderTypes\",\"outputs\":[{\"internalType\":\"enum GNSOracleRewardsV6_4_1.OpenLimitOrderType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingRewardsGns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSOracleRewardsV6_4_1.OpenLimitOrderType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"setOpenLimitOrderType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stateCopied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"_id\",\"type\":\"tuple\"}],\"name\":\"storeTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"_id\",\"type\":\"tuple\"}],\"name\":\"timedOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"_id\",\"type\":\"tuple\"}],\"name\":\"triggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"triggeredLimits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"order\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSOracleRewardsV6_4_1.TriggeredLimitId\",\"name\":\"_id\",\"type\":\"tuple\"}],\"name\":\"unregisterTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_oraclesCount\",\"type\":\"uint256\"}],\"name\":\"updateOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_triggerTimeout\",\"type\":\"uint256\"}],\"name\":\"updateTriggerTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSOracleRewardsV6_4_1.sol\":\"GNSOracleRewardsV6_4_1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/GNSOracleRewardsV6_4_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\nimport \\\"../libraries/ChainUtils.sol\\\";\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/IGNSOracle.sol\\\";\\n\\ncontract GNSOracleRewardsV6_4_1 is Initializable {\\n    // Constants\\n    // uint private constant CHAIN_ID_POLY = 137;\\n    // uint private constant CHAIN_ID_MUMBAI = 80001;\\n    // uint private constant CHAIN_ID_ARBI = 42161;\\n\\n    // address private constant NFT_REWARDS_OLD_POLY = 0x8103C0665A544201BBF606d90845d1B2D8005F1c;\\n    // address private constant NFT_REWARDS_OLD_MUMBAI = 0xf7Ac400b45Bdd2E098FaCA3642bE4d01071BC73B;\\n    // address private constant NFT_REWARDS_OLD_ARBI = 0xde5750071CacA8db173FC6543D23d0BCACACFEC3;\\n\\n    uint private constant MIN_TRIGGER_TIMEOUT = 1;\\n\\n    // Addresses (constant)\\n    StorageInterfaceV5 public storageT;\\n    // mapping(uint => address) public nftRewardsOldByChainId;\\n\\n    // Params (adjustable)\\n    uint public triggerTimeout; // blocks\\n    address[] public oracles; // oracles rewarded\\n\\n    // Custom data types\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    // State\\n    mapping(address => uint) public pendingRewardsGns;\\n    mapping(address => mapping(uint => mapping(uint => mapping(StorageInterfaceV5.LimitOrder => uint))))\\n        public triggeredLimits;\\n    mapping(address => mapping(uint => mapping(uint => OpenLimitOrderType))) public openLimitOrderTypes;\\n\\n    bool public stateCopied;\\n\\n    // Events\\n    // event OldLimitTypesCopied(address oldContract, uint start, uint end);\\n    // event StateCopyDone();\\n    event TriggerTimeoutUpdated(uint value);\\n    event OraclesUpdated(uint oraclesCount);\\n\\n    event TriggeredFirst(TriggeredLimitId id);\\n    event TriggerUnregistered(TriggeredLimitId id);\\n    event TriggerRewarded(TriggeredLimitId id, uint rewardGns, uint rewardGnsPerOracle, uint oraclesCount);\\n    event RewardsClaimed(address oracle, uint amountGns);\\n    event OpenLimitOrderTypeSet(address trader, uint pairIndex, uint index, OpenLimitOrderType value);\\n\\n    function initialize(StorageInterfaceV5 _storageT, uint _triggerTimeout, uint _oraclesCount) external initializer {\\n        require(\\n            address(_storageT) != address(0) && _triggerTimeout >= MIN_TRIGGER_TIMEOUT && _oraclesCount > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        // nftRewardsOldByChainId[CHAIN_ID_POLY] = NFT_REWARDS_OLD_POLY;\\n        // nftRewardsOldByChainId[CHAIN_ID_MUMBAI] = NFT_REWARDS_OLD_MUMBAI;\\n        // nftRewardsOldByChainId[CHAIN_ID_ARBI] = NFT_REWARDS_OLD_ARBI;\\n\\n        storageT = _storageT;\\n        triggerTimeout = _triggerTimeout;\\n\\n        _updateOracles(_oraclesCount);\\n    }\\n    \\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(msg.sender == storageT.trading(), \\\"TRADING_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyCallbacks() {\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Copy limit order types from old nft rewards contract\\n    // function copyOldLimitTypes(uint _start, uint _end) external onlyGov {\\n    //     require(!stateCopied, \\\"COPY_DONE\\\");\\n    //     require(_start <= _end, \\\"START_AFTER_END\\\");\\n\\n    //     address oldAddress = nftRewardsOldByChainId[block.chainid];\\n    //     require(oldAddress != address(0), \\\"UNKNOWN_CHAIN\\\");\\n\\n    //     StorageInterfaceV5.OpenLimitOrder[] memory openLimitOrders = IStateCopyUtils(address(storageT))\\n    //         .getOpenLimitOrders();\\n\\n    //     require(_start < openLimitOrders.length, \\\"START_TOO_BIG\\\");\\n\\n    //     if (_end >= openLimitOrders.length) {\\n    //         _end = openLimitOrders.length - 1;\\n    //     }\\n\\n    //     NftRewardsInterfaceV6_3_1 old = NftRewardsInterfaceV6_3_1(oldAddress);\\n\\n    //     for (uint i = _start; i <= _end; ) {\\n    //         StorageInterfaceV5.OpenLimitOrder memory o = openLimitOrders[i];\\n\\n    //         openLimitOrderTypes[o.trader][o.pairIndex][o.index] = OpenLimitOrderType(\\n    //             uint(old.openLimitOrderTypes(o.trader, o.pairIndex, o.index))\\n    //         );\\n\\n    //         unchecked {\\n    //             ++i;\\n    //         }\\n    //     }\\n\\n    //     emit OldLimitTypesCopied(oldAddress, _start, _end);\\n    // }\\n\\n    // function setStateCopyAsDone() external onlyGov {\\n    //     stateCopied = true;\\n\\n    //     emit StateCopyDone();\\n    // }\\n\\n    // Manage params\\n    function updateTriggerTimeout(uint _triggerTimeout) external onlyGov {\\n        require(_triggerTimeout >= MIN_TRIGGER_TIMEOUT, \\\"BELOW_MIN\\\");\\n\\n        triggerTimeout = _triggerTimeout;\\n\\n        emit TriggerTimeoutUpdated(_triggerTimeout);\\n    }\\n\\n    function _updateOracles(uint _oraclesCount) private {\\n        require(_oraclesCount > 0, \\\"VALUE_ZERO\\\");\\n\\n        delete oracles;\\n\\n        for (uint i; i < _oraclesCount; ) {\\n            require(address(storageT.priceAggregator()) != address(0), \\\"AGGREGATOR_MISSING\\\");\\n            \\n            oracles.push(storageT.priceAggregator().nodes(i));\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        emit OraclesUpdated(_oraclesCount);\\n    }\\n\\n    function updateOracles(uint _oraclesCount) external onlyGov {\\n        _updateOracles(_oraclesCount);\\n    }\\n\\n    // Triggers\\n    function storeTrigger(TriggeredLimitId calldata _id) external onlyTrading {\\n        triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order] = ChainUtils.getBlockNumber();\\n\\n        emit TriggeredFirst(_id);\\n    }\\n\\n    function unregisterTrigger(TriggeredLimitId calldata _id) external onlyCallbacks {\\n        delete triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\\n\\n        emit TriggerUnregistered(_id);\\n    }\\n\\n    // Distribute oracle rewards\\n    function distributeOracleReward(TriggeredLimitId calldata _id, uint _reward) external onlyCallbacks {\\n        require(triggered(_id), \\\"NOT_TRIGGERED\\\");\\n\\n        uint oraclesCount = oracles.length;\\n        uint rewardPerOracle = _reward / oraclesCount;\\n\\n        for (uint i; i < oraclesCount; ) {\\n            pendingRewardsGns[oracles[i]] += rewardPerOracle;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        storageT.handleTokens(address(this), _reward, true);\\n\\n        emit TriggerRewarded(_id, _reward, rewardPerOracle, oraclesCount);\\n    }\\n\\n    // Claim oracle rewards\\n    function claimRewards(address _oracle) external {\\n        IGNSOracle _o = IGNSOracle(_oracle);\\n\\n        // msg.sender must either be the oracle owner or an authorized fulfiller\\n        require(_o.owner() == msg.sender || _o.getAuthorizationStatus(msg.sender), \\\"NOT_AUTHORIZED\\\");\\n\\n        uint amountGns = pendingRewardsGns[_oracle];\\n\\n        pendingRewardsGns[_oracle] = 0;\\n        storageT.token().transfer(msg.sender, amountGns);\\n\\n        emit RewardsClaimed(_oracle, amountGns);\\n    }\\n\\n    // Manage open limit order types\\n    function setOpenLimitOrderType(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        OpenLimitOrderType _type\\n    ) external onlyTrading {\\n        openLimitOrderTypes[_trader][_pairIndex][_index] = _type;\\n\\n        emit OpenLimitOrderTypeSet(_trader, _pairIndex, _index, _type);\\n    }\\n\\n    // Getters\\n    function triggered(TriggeredLimitId calldata _id) public view returns (bool) {\\n        return triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order] > 0;\\n    }\\n\\n    function timedOut(TriggeredLimitId calldata _id) external view returns (bool) {\\n        uint triggerBlock = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\\n\\n        return triggerBlock > 0 && ChainUtils.getBlockNumber() - triggerBlock >= triggerTimeout;\\n    }\\n\\n    function getOracles() external view returns (address[] memory) {\\n        return oracles;\\n    }\\n}\",\"keccak256\":\"0x37851dd8fc8acf1fb53d04c5bd7d06350b1134638421150c8540b3a03a472914\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x1afaa4a2058e59dc5b36792e6429505f5f976edea9b272c7a7499fa7ce2fab6e\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGNSOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IGNSOracle {\\n    function getAuthorizationStatus(address) external view returns (bool);\\n    function owner() external view returns (address);\\n}\",\"keccak256\":\"0xeede5d2d0f187f74cc4d3c81f93858a2970bcb6e35ea8b57b88b03ed862d29da\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xcbb5e5a89f1dcf814417042d09e52a33b1a6c7a5cf47b7cccf41892a9a160f3b\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xe5b2bff53bc90f2756f874af8adca6188bd3769e79e2a7bd47c79f5d70fca267\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6{\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n}\\n\",\"keccak256\":\"0x877d59f2a896b6b0dbda7c5b0af6189a0ee7d680471d7329051fb9024d653c38\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0x8a861f3c25b615a0a0383bc02d915a0fa13224113e21f1b0b882c9bc9aedef04\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x02fdf7636ff92ec0c8f53dc5f78b9e9dfac96d562cfa3bef3310d40e5bfb6767\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0x81ddc0e4c756be38b5d099fb986c7049bae761d423b75da952bd350e9b9dd35c\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\",\"keccak256\":\"0xc23ea84d72c85d5f560262e25c99080829425c391f27f89f316aef527fcaebe8\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0c02ae89ff43376823598c6d69ed1b6745ee4e4f898452f77a9e3c1dbe78de3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611573908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c9182630a22faf414610f365750816316fff07414610f0d57816321187a9214610ee65781632bf4854414610e5e57816340884c5214610d995781635b69a7d814610d57578163613e666e14610c5d5781637a1ac61e14610a64578163ab5d5c2214610a40578163bf654d2b14610972578163d15ccfaa14610911578163d4de65ea146108bc578163df83935214610697578163e72353d5146105aa578163ec5706101461049a578163ef5cfb8c146101bb578163fc6dcafc1461010c575063fc8b2698146100eb57600080fd5b346101085781600319360112610108576020906001549051908152f35b5080fd5b838334610108576080366003190112610108576001600160a01b0361012f611396565b168252826020528082206024358352602052808220604435835260205280822060643590848210156101b7579061016591610fd2565b54801515928361017c575b60208484519015158152f35b909192506101886114a1565b9182039182116101a45750602092506001541115908380610170565b80601185634e487b7160e01b6024945252fd5b8380fd5b9050346103a8576020806003193601126101b7576101d7610f6a565b906001600160a01b0380831685517f8da5cb5b00000000000000000000000000000000000000000000000000000000815283818781855afa90811561046357889161046d575b508216331480156103ff575b156103bd5786526003825285858120948186549655808484845460101c168951938480927ffc0c546a0000000000000000000000000000000000000000000000000000000082525afa9081156103b35783889387959361036b575b506102d3958a518097819682957fa9059cbb00000000000000000000000000000000000000000000000000000000845233908401602090939291936001600160a01b0360408201951681520152565b0393165af1801561036157917ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe959161032d93610333575b50505192839283602090939291936001600160a01b0360408201951681520152565b0390a180f35b8161035292903d1061035a575b61034a818361100d565b810190611430565b50388061030b565b503d610340565b85513d88823e3d90fd5b9250939094925081813d83116103ac575b610386818361100d565b810103126103a857519080821682036103a8576102d393859388939295610284565b8280fd5b503d61037c565b88513d85823e3d90fd5b6064858488519162461bcd60e51b8352820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b5085517fd3e9c31400000000000000000000000000000000000000000000000000000000815233868201528381602481855afa908115610463578891610446575b50610229565b61045d9150843d861161035a5761034a818361100d565b38610440565b87513d8a823e3d90fd5b61048d9150843d8611610493575b610485818361100d565b810190611045565b3861021d565b503d61047b565b9050346103a85760803660031901126103a8576104b5610f6a565b602435604435906064359260038410156105a6576001600160a01b039081885460101c1695875196878092637622567960e11b82526020998a935afa9089821561059b579261053c8560809a99979461057a9997947f02f07f1e288a734d5a0a9a192d4b1ac263c35e822875c00ee8a9df42870e5a199d979161057e575b5016331461134b565b1695868a5260058152828a20828b528152828a20848b528152828a2060ff1981541660ff871617905582519687528601528401526060830190611000565ba180f35b61059591508b3d8d1161049357610485818361100d565b38610533565b8951903d90823e3d90fd5b8680fd5b9050346103a85760803660031901126103a8576001600160a01b039182845460101c1681518091637622567960e11b8252818560209485935afa90811561068d576106009186918891610676575016331461134b565b6106086114a1565b93610611611396565b16855282815281852060243586528152818520906044358652528084209260643592831015610672576106676080937f68ad7c7e25b3d9ce225c8f7f8e54268c16ad38a5b3f47e8a5aecc5876cc2289895610fd2565b555161057a816113ac565b8480fd5b6105959150843d861161049357610485818361100d565b83513d88823e3d90fd5b919050346103a857366003190160a081126101b7576080136103a8576084359183549180519162b1278360e01b8352602092838183816001600160a01b03809960101c165afa9081156107f3576106fa918691899161089f575b501633146113e5565b610702611448565b1561085e5760025493841561084b5790869185870494835b8781106107fd575050825460101c16803b156103a857829060648551809581937f5378143e00000000000000000000000000000000000000000000000000000000835230878401528b6024840152600160448401525af180156107f3576107c2575b867fa454cbe4fae943b78304768a76bb0f63c49a18d4654501cfbb0e13eb771b0eac60e08888888851926107af846113ac565b608084015260a083015260c0820152a180f35b67ffffffffffffffff82979397116107e057508552938160e061077c565b826041602492634e487b7160e01b835252fd5b83513d89823e3d90fd5b90918093945061080c82610f85565b919054600392831b1c168a5282528489208054908782018092116108385755889392919060010161071a565b60248b601188634e487b7160e01b835252fd5b602487601284634e487b7160e01b835252fd5b82606492519162461bcd60e51b8352820152600d60248201527f4e4f545f545249474745524544000000000000000000000000000000000000006044820152fd5b6108b69150863d881161049357610485818361100d565b386106f1565b5050346101085760603660031901126101085761090f60ff826020946001600160a01b036108e8610f6a565b16815260058652818120602435825286528181206044358252865220541691518092611000565bf35b9050346103a85760803660031901126103a85761092c610f6a565b9060643591818310156106725760209461096a93926001600160a01b0386931682528652818120602435825286528181206044358252865220610fd2565b549051908152f35b9050346103a85760803660031901126103a8576001600160a01b0380845460101c16908351809262b1278360e01b8252818560209586935afa908115610361576109c79183918891610a2957501633146113e5565b6109cf611396565b1684528181528284206024358552815282842090604435855252818320918360643592831015610a26576106676080937fbc446f372d672d41df09bf965eb61c029a34d21d04ebcd4c0ec9c7ee54f2cd8495610fd2565b80fd5b6108b69150853d871161049357610485818361100d565b50503461010857816003193601126101085760209060ff6006541690519015158152f35b9050346103a85760603660031901126103a8578035906001600160a01b0382169182810361067257602435906044359286549460ff8660081c161595868097610c50575b8015610c39575b15610bd05760ff198116600117895586610bbf575b50151580610bb4575b80610bab575b15610b68575085547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1660109190911b75ffffffffffffffffffffffffffffffffffffffff000016178555600155610b2a906110af565b610b32575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b606490602087519162461bcd60e51b8352820152600c60248201527f57524f4e475f504152414d5300000000000000000000000000000000000000006044820152fd5b50831515610ad3565b506001831015610acd565b61ffff191661010117885538610ac4565b60848360208a519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015610aaf5750600160ff821614610aaf565b50600160ff821610610aa8565b8391503461010857602090816003193601126103a8578035906001600160a01b03818482875460101c168851928380926312d43a5160e01b82525afa908115610d4d5790610cb692918791610d30575b50163314611064565b60018210610cee57507fdaab030e018e5ad3fedc57669f63d80212488b43901ba12e15b02a77c8fee4d192938160015551908152a180f35b6064908386519162461bcd60e51b8352820152600960248201527f42454c4f575f4d494e00000000000000000000000000000000000000000000006044820152fd5b610d479150863d881161049357610485818361100d565b88610cad565b87513d88823e3d90fd5b9050346103a85760203660031901126103a8573591600254831015610a2657506001600160a01b03610d8a602093610f85565b92905490519260031b1c168152f35b828434610a265780600319360112610a26579080519182906002549182855260208095018093600284527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90845b818110610e415750505081610dfd91038261100d565b83519485948186019282875251809352850193925b828110610e2157505050500390f35b83516001600160a01b031685528695509381019392810192600101610e12565b82546001600160a01b031684529288019260019283019201610de7565b9050346103a85760203660031901126103a8576001600160a01b039181602084865460101c168351928380926312d43a5160e01b82525afa918215610edd575092610eb691610ebc948691610ebf5750163314611064565b356110af565b80f35b610ed7915060203d811161049357610485818361100d565b38610cad565b513d86823e3d90fd5b50503461010857608036600319011261010857602090610f04611448565b90519015158152f35b5050346101085781600319360112610108576001600160a01b036020925460101c169051908152f35b849084346103a85760203660031901126103a8576020926001600160a01b03610f5d610f6a565b1681526003845220548152f35b600435906001600160a01b0382168203610f8057565b600080fd5b600254811015610fbc5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b906004811015610fea57600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b906003821015610fea5752565b90601f8019910116810190811067ffffffffffffffff82111761102f57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610f8057516001600160a01b0381168103610f805790565b1561106b57565b606460405162461bcd60e51b815260206004820152600860248201527f474f565f4f4e4c590000000000000000000000000000000000000000000000006044820152fd5b80156113075760028054600090818355806112c6575b50805b8381106110ff5750505060207fc9ab6bc878a64f4b5522b0e5e96ab7a0a6404e810b9dc05e7406f0d61a828d1691604051908152a1565b6001600160a01b039081835460101c169160408051937f3078fff50000000000000000000000000000000000000000000000000000000080865260209060049682818981875afa9081156112bc579086918a9161129f575b50161561125d5781908785518095819382525afa9182156107f35790849291889261123e575b5080845180937f1c53c280000000000000000000000000000000000000000000000000000000008252888a830152816024968792165afa93841561123557508793611216575b5050865494680100000000000000008610156112055750506111eb6001948581018855610f85565b90928084549260031b9316831b921b1916179055016110c8565b60418791634e487b7160e01b835252fd5b61122d929350803d1061049357610485818361100d565b9038806111c3565b513d89823e3d90fd5b816112569293503d841161049357610485818361100d565b903861117d565b6064878386519162461bcd60e51b8352820152601260248201527f41474752454741544f525f4d495353494e4700000000000000000000000000006044820152fd5b6112b69150843d861161049357610485818361100d565b38611157565b85513d8b823e3d90fd5b8282527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101905b8181106112fc57506110c5565b8281556001016112ef565b606460405162461bcd60e51b815260206004820152600a60248201527f56414c55455f5a45524f000000000000000000000000000000000000000000006044820152fd5b1561135257565b606460405162461bcd60e51b815260206004820152600c60248201527f54524144494e475f4f4e4c5900000000000000000000000000000000000000006044820152fd5b6004356001600160a01b0381168103610f805790565b6004356001600160a01b038116809103610f8057815260243560208201526044356040820152606435906004821015610f805760600152565b156113ec57565b606460405162461bcd60e51b815260206004820152600e60248201527f43414c4c4241434b535f4f4e4c590000000000000000000000000000000000006044820152fd5b90816020910312610f8057518015158103610f805790565b600435906001600160a01b038216809203610f805760009182526004602052604082206024358352602052604082206044358352602052604082206064359060048210156101b75761149b929350610fd2565b54151590565b61a4b146148015611531575b6114b5574390565b6040517fa3b1b31d00000000000000000000000000000000000000000000000000000000815260208160048160645afa908115611525576000916114f7575090565b906020823d821161151d575b816115106020938361100d565b81010312610a2657505190565b3d9150611503565b6040513d6000823e3d90fd5b5062066eed46146114ad56fea26469706673582212207ed6f6f84e3c88555a4cc12a22f908987d58ea9bdd607577c609b8a9fc36950864736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182630a22faf414610f365750816316fff07414610f0d57816321187a9214610ee65781632bf4854414610e5e57816340884c5214610d995781635b69a7d814610d57578163613e666e14610c5d5781637a1ac61e14610a64578163ab5d5c2214610a40578163bf654d2b14610972578163d15ccfaa14610911578163d4de65ea146108bc578163df83935214610697578163e72353d5146105aa578163ec5706101461049a578163ef5cfb8c146101bb578163fc6dcafc1461010c575063fc8b2698146100eb57600080fd5b346101085781600319360112610108576020906001549051908152f35b5080fd5b838334610108576080366003190112610108576001600160a01b0361012f611396565b168252826020528082206024358352602052808220604435835260205280822060643590848210156101b7579061016591610fd2565b54801515928361017c575b60208484519015158152f35b909192506101886114a1565b9182039182116101a45750602092506001541115908380610170565b80601185634e487b7160e01b6024945252fd5b8380fd5b9050346103a8576020806003193601126101b7576101d7610f6a565b906001600160a01b0380831685517f8da5cb5b00000000000000000000000000000000000000000000000000000000815283818781855afa90811561046357889161046d575b508216331480156103ff575b156103bd5786526003825285858120948186549655808484845460101c168951938480927ffc0c546a0000000000000000000000000000000000000000000000000000000082525afa9081156103b35783889387959361036b575b506102d3958a518097819682957fa9059cbb00000000000000000000000000000000000000000000000000000000845233908401602090939291936001600160a01b0360408201951681520152565b0393165af1801561036157917ffc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe959161032d93610333575b50505192839283602090939291936001600160a01b0360408201951681520152565b0390a180f35b8161035292903d1061035a575b61034a818361100d565b810190611430565b50388061030b565b503d610340565b85513d88823e3d90fd5b9250939094925081813d83116103ac575b610386818361100d565b810103126103a857519080821682036103a8576102d393859388939295610284565b8280fd5b503d61037c565b88513d85823e3d90fd5b6064858488519162461bcd60e51b8352820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b5085517fd3e9c31400000000000000000000000000000000000000000000000000000000815233868201528381602481855afa908115610463578891610446575b50610229565b61045d9150843d861161035a5761034a818361100d565b38610440565b87513d8a823e3d90fd5b61048d9150843d8611610493575b610485818361100d565b810190611045565b3861021d565b503d61047b565b9050346103a85760803660031901126103a8576104b5610f6a565b602435604435906064359260038410156105a6576001600160a01b039081885460101c1695875196878092637622567960e11b82526020998a935afa9089821561059b579261053c8560809a99979461057a9997947f02f07f1e288a734d5a0a9a192d4b1ac263c35e822875c00ee8a9df42870e5a199d979161057e575b5016331461134b565b1695868a5260058152828a20828b528152828a20848b528152828a2060ff1981541660ff871617905582519687528601528401526060830190611000565ba180f35b61059591508b3d8d1161049357610485818361100d565b38610533565b8951903d90823e3d90fd5b8680fd5b9050346103a85760803660031901126103a8576001600160a01b039182845460101c1681518091637622567960e11b8252818560209485935afa90811561068d576106009186918891610676575016331461134b565b6106086114a1565b93610611611396565b16855282815281852060243586528152818520906044358652528084209260643592831015610672576106676080937f68ad7c7e25b3d9ce225c8f7f8e54268c16ad38a5b3f47e8a5aecc5876cc2289895610fd2565b555161057a816113ac565b8480fd5b6105959150843d861161049357610485818361100d565b83513d88823e3d90fd5b919050346103a857366003190160a081126101b7576080136103a8576084359183549180519162b1278360e01b8352602092838183816001600160a01b03809960101c165afa9081156107f3576106fa918691899161089f575b501633146113e5565b610702611448565b1561085e5760025493841561084b5790869185870494835b8781106107fd575050825460101c16803b156103a857829060648551809581937f5378143e00000000000000000000000000000000000000000000000000000000835230878401528b6024840152600160448401525af180156107f3576107c2575b867fa454cbe4fae943b78304768a76bb0f63c49a18d4654501cfbb0e13eb771b0eac60e08888888851926107af846113ac565b608084015260a083015260c0820152a180f35b67ffffffffffffffff82979397116107e057508552938160e061077c565b826041602492634e487b7160e01b835252fd5b83513d89823e3d90fd5b90918093945061080c82610f85565b919054600392831b1c168a5282528489208054908782018092116108385755889392919060010161071a565b60248b601188634e487b7160e01b835252fd5b602487601284634e487b7160e01b835252fd5b82606492519162461bcd60e51b8352820152600d60248201527f4e4f545f545249474745524544000000000000000000000000000000000000006044820152fd5b6108b69150863d881161049357610485818361100d565b386106f1565b5050346101085760603660031901126101085761090f60ff826020946001600160a01b036108e8610f6a565b16815260058652818120602435825286528181206044358252865220541691518092611000565bf35b9050346103a85760803660031901126103a85761092c610f6a565b9060643591818310156106725760209461096a93926001600160a01b0386931682528652818120602435825286528181206044358252865220610fd2565b549051908152f35b9050346103a85760803660031901126103a8576001600160a01b0380845460101c16908351809262b1278360e01b8252818560209586935afa908115610361576109c79183918891610a2957501633146113e5565b6109cf611396565b1684528181528284206024358552815282842090604435855252818320918360643592831015610a26576106676080937fbc446f372d672d41df09bf965eb61c029a34d21d04ebcd4c0ec9c7ee54f2cd8495610fd2565b80fd5b6108b69150853d871161049357610485818361100d565b50503461010857816003193601126101085760209060ff6006541690519015158152f35b9050346103a85760603660031901126103a8578035906001600160a01b0382169182810361067257602435906044359286549460ff8660081c161595868097610c50575b8015610c39575b15610bd05760ff198116600117895586610bbf575b50151580610bb4575b80610bab575b15610b68575085547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1660109190911b75ffffffffffffffffffffffffffffffffffffffff000016178555600155610b2a906110af565b610b32575080f35b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989161ff001984541684555160018152a180f35b606490602087519162461bcd60e51b8352820152600c60248201527f57524f4e475f504152414d5300000000000000000000000000000000000000006044820152fd5b50831515610ad3565b506001831015610acd565b61ffff191661010117885538610ac4565b60848360208a519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015610aaf5750600160ff821614610aaf565b50600160ff821610610aa8565b8391503461010857602090816003193601126103a8578035906001600160a01b03818482875460101c168851928380926312d43a5160e01b82525afa908115610d4d5790610cb692918791610d30575b50163314611064565b60018210610cee57507fdaab030e018e5ad3fedc57669f63d80212488b43901ba12e15b02a77c8fee4d192938160015551908152a180f35b6064908386519162461bcd60e51b8352820152600960248201527f42454c4f575f4d494e00000000000000000000000000000000000000000000006044820152fd5b610d479150863d881161049357610485818361100d565b88610cad565b87513d88823e3d90fd5b9050346103a85760203660031901126103a8573591600254831015610a2657506001600160a01b03610d8a602093610f85565b92905490519260031b1c168152f35b828434610a265780600319360112610a26579080519182906002549182855260208095018093600284527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace90845b818110610e415750505081610dfd91038261100d565b83519485948186019282875251809352850193925b828110610e2157505050500390f35b83516001600160a01b031685528695509381019392810192600101610e12565b82546001600160a01b031684529288019260019283019201610de7565b9050346103a85760203660031901126103a8576001600160a01b039181602084865460101c168351928380926312d43a5160e01b82525afa918215610edd575092610eb691610ebc948691610ebf5750163314611064565b356110af565b80f35b610ed7915060203d811161049357610485818361100d565b38610cad565b513d86823e3d90fd5b50503461010857608036600319011261010857602090610f04611448565b90519015158152f35b5050346101085781600319360112610108576001600160a01b036020925460101c169051908152f35b849084346103a85760203660031901126103a8576020926001600160a01b03610f5d610f6a565b1681526003845220548152f35b600435906001600160a01b0382168203610f8057565b600080fd5b600254811015610fbc5760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b906004811015610fea57600052602052604060002090565b634e487b7160e01b600052602160045260246000fd5b906003821015610fea5752565b90601f8019910116810190811067ffffffffffffffff82111761102f57604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610f8057516001600160a01b0381168103610f805790565b1561106b57565b606460405162461bcd60e51b815260206004820152600860248201527f474f565f4f4e4c590000000000000000000000000000000000000000000000006044820152fd5b80156113075760028054600090818355806112c6575b50805b8381106110ff5750505060207fc9ab6bc878a64f4b5522b0e5e96ab7a0a6404e810b9dc05e7406f0d61a828d1691604051908152a1565b6001600160a01b039081835460101c169160408051937f3078fff50000000000000000000000000000000000000000000000000000000080865260209060049682818981875afa9081156112bc579086918a9161129f575b50161561125d5781908785518095819382525afa9182156107f35790849291889261123e575b5080845180937f1c53c280000000000000000000000000000000000000000000000000000000008252888a830152816024968792165afa93841561123557508793611216575b5050865494680100000000000000008610156112055750506111eb6001948581018855610f85565b90928084549260031b9316831b921b1916179055016110c8565b60418791634e487b7160e01b835252fd5b61122d929350803d1061049357610485818361100d565b9038806111c3565b513d89823e3d90fd5b816112569293503d841161049357610485818361100d565b903861117d565b6064878386519162461bcd60e51b8352820152601260248201527f41474752454741544f525f4d495353494e4700000000000000000000000000006044820152fd5b6112b69150843d861161049357610485818361100d565b38611157565b85513d8b823e3d90fd5b8282527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace908101905b8181106112fc57506110c5565b8281556001016112ef565b606460405162461bcd60e51b815260206004820152600a60248201527f56414c55455f5a45524f000000000000000000000000000000000000000000006044820152fd5b1561135257565b606460405162461bcd60e51b815260206004820152600c60248201527f54524144494e475f4f4e4c5900000000000000000000000000000000000000006044820152fd5b6004356001600160a01b0381168103610f805790565b6004356001600160a01b038116809103610f8057815260243560208201526044356040820152606435906004821015610f805760600152565b156113ec57565b606460405162461bcd60e51b815260206004820152600e60248201527f43414c4c4241434b535f4f4e4c590000000000000000000000000000000000006044820152fd5b90816020910312610f8057518015158103610f805790565b600435906001600160a01b038216809203610f805760009182526004602052604082206024358352602052604082206044358352602052604082206064359060048210156101b75761149b929350610fd2565b54151590565b61a4b146148015611531575b6114b5574390565b6040517fa3b1b31d00000000000000000000000000000000000000000000000000000000815260208160048160645afa908115611525576000916114f7575090565b906020823d821161151d575b816115106020938361100d565b81010312610a2657505190565b3d9150611503565b6040513d6000823e3d90fd5b5062066eed46146114ad56fea26469706673582212207ed6f6f84e3c88555a4cc12a22f908987d58ea9bdd607577c609b8a9fc36950864736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22504,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 22507,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 11428,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)21703"
      },
      {
        "astId": 11430,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "triggerTimeout",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11433,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "oracles",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11451,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "pendingRewardsGns",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11462,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "triggeredLimits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256))))"
      },
      {
        "astId": 11471,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "openLimitOrderTypes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447)))"
      },
      {
        "astId": 11473,
        "contract": "contracts/contracts/GNSOracleRewardsV6_4_1.sol:GNSOracleRewardsV6_4_1",
        "label": "stateCopied",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(StorageInterfaceV5)21703": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_enum(LimitOrder)21226": {
        "encoding": "inplace",
        "label": "enum StorageInterfaceV5.LimitOrder",
        "numberOfBytes": "1"
      },
      "t_enum(OpenLimitOrderType)11447": {
        "encoding": "inplace",
        "label": "enum GNSOracleRewardsV6_4_1.OpenLimitOrderType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => enum GNSOracleRewardsV6_4_1.OpenLimitOrderType)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum StorageInterfaceV5.LimitOrder => uint256))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256)))"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(LimitOrder)21226,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(LimitOrder)21226",
        "label": "mapping(enum StorageInterfaceV5.LimitOrder => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum GNSOracleRewardsV6_4_1.OpenLimitOrderType)",
        "numberOfBytes": "32",
        "value": "t_enum(OpenLimitOrderType)11447"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum StorageInterfaceV5.LimitOrder => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(LimitOrder)21226,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => enum GNSOracleRewardsV6_4_1.OpenLimitOrderType))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_enum(OpenLimitOrderType)11447)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum StorageInterfaceV5.LimitOrder => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(LimitOrder)21226,t_uint256))"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}