{
  "address": "0x423EA05aE2D2Ea33e7fcc6E1fF11e936A3b2df72",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "GroupAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "increase",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        }
      ],
      "name": "GroupOiUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "PairAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "prevGroupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newGroupIndex",
          "type": "uint16"
        }
      ],
      "name": "PairGroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "TradeActionHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialPairAccFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialGroupAccFee",
          "type": "uint64"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getGroupPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getGroupPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "groupAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        }
      ],
      "name": "getGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Group[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "_placeholder",
              "type": "uint64"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
          "name": "pairGroups",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupAccFeesDeltas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "deltaGroup",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deltaPair",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "beforeTradeOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairMaxOi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairOpenInterestDai",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getPairPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pairAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "oiLong",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oiShort",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "currentBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accLastUpdatedBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "newAccFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "newAccFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "delta",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
          "name": "borrowingFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rollover",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "funding",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "openedAfterUpdate",
              "type": "bool"
            }
          ],
          "internalType": "struct GNSPairInfosInterfaceV6.TradeInitialAccFees",
          "name": "otherFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupFeeExponents",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "maxOi",
          "type": "uint80"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "handleTradeAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accPairFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accGroupFee",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "block",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "_placeholder",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOis",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "long",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "short",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "max",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "_placeholder",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setGroupParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setGroupParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct GNSBorrowingFeesInterfaceV6_4.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "withinMaxGroupOi",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a52d4d9758cb3b4ae1329545bdfc763f30554e5e7de2251d2a5ded5e08bc7e0",
  "receipt": {
    "to": null,
    "from": "0xE5f1Eb09e0d23c453FD787b21E6d082CDEE6b7B3",
    "contractAddress": "0x423EA05aE2D2Ea33e7fcc6E1fF11e936A3b2df72",
    "transactionIndex": 17,
    "gasUsed": "3675399",
    "logsBloom": "0x
    "blockHash": "0x980b2882e6e981aa923356601524b808c96439733ca2f7e3fd3b9fa17dde5014",
    "transactionHash": "0x7a52d4d9758cb3b4ae1329545bdfc763f30554e5e7de2251d2a5ded5e08bc7e0",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 44937105,
        "transactionHash": "0x7a52d4d9758cb3b4ae1329545bdfc763f30554e5e7de2251d2a5ded5e08bc7e0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e5f1eb09e0d23c453fd787b21e6d082cdee6b7b3",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000186af4195dbc10000000000000000000000000000000000000000000000000da746fbda3c616550000000000000000000000000000000000000000000012c00a0d8bd770c1bcc7000000000000000000000000000000000000000000000000da5c04c98a685a450000000000000000000000000000000000000000000012c00a25f6cb8a1f78d7",
        "logIndex": 69,
        "blockHash": "0x980b2882e6e981aa923356601524b808c96439733ca2f7e3fd3b9fa17dde5014"
      }
    ],
    "blockNumber": 44937105,
    "cumulativeGasUsed": "5977437",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "62ead6fd019c01c7f32a188a2b283d94",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"GroupAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"}],\"name\":\"GroupOiUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"PairAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"prevGroupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newGroupIndex\",\"type\":\"uint16\"}],\"name\":\"PairGroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"TradeActionHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialPairAccFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialGroupAccFee\",\"type\":\"uint64\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getGroupPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getGroupPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"groupAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"}],\"name\":\"getGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Group[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.Pair\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairOi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]\",\"name\":\"pairGroups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairGroupAccFeesDeltas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"deltaGroup\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deltaPair\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"beforeTradeOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairGroupIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairMaxOi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairOpenInterestDai\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getPairPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oiLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oiShort\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PendingAccFeesInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees\",\"name\":\"borrowingFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"internalType\":\"struct GNSPairInfosInterfaceV6.TradeInitialAccFees\",\"name\":\"otherFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.LiqPriceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupFeeExponents\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"handleTradeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOis\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setGroupParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.GroupParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setGroupParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct GNSBorrowingFeesInterfaceV6_4.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"withinMaxGroupOi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":\"GNSBorrowingFeesV6_4\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/GNSBorrowingFeesV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../libraries/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\n\\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\\n    // Constants\\n    uint constant P_1 = 1e10;\\n    uint constant P_2 = 1e40;\\n\\n    // Addresses\\n    StorageInterfaceV5 public storageT;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n\\n    // State\\n    mapping(uint16 => Group) public groups;\\n    mapping(uint => Pair) public pairs;\\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees))) public initialAccFees;\\n    mapping(uint => PairOi) public pairOis;\\n    mapping(uint => uint48) public groupFeeExponents;\\n\\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external initializer {\\n        require(address(_storageT) != address(0) && address(_pairInfos) != address(0), \\\"WRONG_PARAMS\\\");\\n\\n        storageT = _storageT;\\n        pairInfos = _pairInfos;\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(msg.sender == pairInfos.manager(), \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n\\n    modifier onlyCallbacks() {\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Manage pair params\\n    function setPairParams(uint pairIndex, PairParams calldata value) external onlyManager {\\n        _setPairParams(pairIndex, value);\\n    }\\n\\n    function setPairParamsArray(uint[] calldata indices, PairParams[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setPairParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \\\"WRONG_EXPONENT\\\");\\n\\n        Pair storage p = pairs[pairIndex];\\n\\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        _setPairPendingAccFees(pairIndex, currentBlock);\\n\\n        if (value.groupIndex != prevGroupIndex) {\\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\\n\\n            (uint oiLong, uint oiShort) = getPairOpenInterestDai(pairIndex);\\n\\n            // Only remove OI from old group if old group is not 0\\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\\n\\n            // Add OI to new group if it's not group 0 (even if old group is 0)\\n            // So when we assign a pair to a group, it takes into account its OI\\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\\n            _setGroupOi(value.groupIndex, true, true, oiLong);\\n            _setGroupOi(value.groupIndex, false, true, oiShort);\\n\\n            Group memory newGroup = groups[value.groupIndex];\\n            Group memory prevGroup = groups[prevGroupIndex];\\n\\n            p.groups.push(\\n                PairGroup(\\n                    value.groupIndex,\\n                    ChainUtils.getUint48BlockNumber(currentBlock),\\n                    newGroup.accFeeLong,\\n                    newGroup.accFeeShort,\\n                    prevGroup.accFeeLong,\\n                    prevGroup.accFeeShort,\\n                    p.accFeeLong,\\n                    p.accFeeShort,\\n                    0 // placeholder\\n                )\\n            );\\n\\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\\n        }\\n\\n        p.feePerBlock = value.feePerBlock;\\n        p.feeExponent = value.feeExponent;\\n        pairOis[pairIndex].max = value.maxOi;\\n\\n        emit PairParamsUpdated(pairIndex, value.groupIndex, value.feePerBlock, value.feeExponent, value.maxOi);\\n    }\\n\\n    // Manage group params\\n    function setGroupParams(uint16 groupIndex, GroupParams calldata value) external onlyManager {\\n        _setGroupParams(groupIndex, value);\\n    }\\n\\n    function setGroupParamsArray(uint16[] calldata indices, GroupParams[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setGroupParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setGroupParams(uint16 groupIndex, GroupParams calldata value) private {\\n        require(groupIndex > 0, \\\"GROUP_0\\\");\\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \\\"WRONG_EXPONENT\\\");\\n\\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\\n\\n        Group storage g = groups[groupIndex];\\n        g.feePerBlock = value.feePerBlock;\\n        g.maxOi = uint80(value.maxOi);\\n        groupFeeExponents[groupIndex] = value.feeExponent;\\n\\n        emit GroupUpdated(groupIndex, value.feePerBlock, value.maxOi, value.feeExponent);\\n    }\\n\\n    // Group OI setter\\n    function _setGroupOi(\\n        uint16 groupIndex,\\n        bool long,\\n        bool increase,\\n        uint amount // 1e18\\n    ) private {\\n        Group storage group = groups[groupIndex];\\n        uint112 amountFinal;\\n\\n        if (groupIndex > 0) {\\n            amount = (amount * P_1) / 1e18; // 1e10\\n            require(amount <= type(uint112).max, \\\"OVERFLOW\\\");\\n\\n            amountFinal = uint112(amount);\\n\\n            if (long) {\\n                group.oiLong = increase\\n                    ? group.oiLong + amountFinal\\n                    : group.oiLong - (group.oiLong > amountFinal ? amountFinal : group.oiLong);\\n            } else {\\n                group.oiShort = increase\\n                    ? group.oiShort + amountFinal\\n                    : group.oiShort - (group.oiShort > amountFinal ? amountFinal : group.oiShort);\\n            }\\n        }\\n\\n        emit GroupOiUpdated(groupIndex, long, increase, amountFinal, group.oiLong, group.oiShort);\\n    }\\n\\n    // Acc fees getters for pairs and groups\\n    function getPendingAccFees(\\n        PendingAccFeesInput memory input\\n    ) public pure returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta) {\\n        require(input.currentBlock >= input.accLastUpdatedBlock, \\\"BLOCK_ORDER\\\");\\n\\n        bool moreShorts = input.oiLong < input.oiShort;\\n        uint netOi = moreShorts ? input.oiShort - input.oiLong : input.oiLong - input.oiShort;\\n\\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\\n                input.feePerBlock *\\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) / (1e18 ** input.feeExponent)\\n            : 0; // 1e10 (%)\\n\\n        require(_delta <= type(uint64).max, \\\"OVERFLOW\\\");\\n        delta = uint64(_delta);\\n\\n        newAccFeeLong = moreShorts ? input.accFeeLong : input.accFeeLong + delta;\\n        newAccFeeShort = moreShorts ? input.accFeeShort + delta : input.accFeeShort;\\n    }\\n\\n    function getPairGroupAccFeesDeltas(\\n        uint i,\\n        PairGroup[] memory pairGroups,\\n        InitialAccFees memory initialFees,\\n        uint pairIndex,\\n        bool long,\\n        uint currentBlock\\n    ) public view returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) {\\n        PairGroup memory group = pairGroups[i];\\n\\n        beforeTradeOpen = group.block < initialFees.block;\\n\\n        if (i == pairGroups.length - 1) {\\n            // Last active group\\n            deltaGroup = getGroupPendingAccFee(group.groupIndex, currentBlock, long);\\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\\n        } else {\\n            // Previous groups\\n            PairGroup memory nextGroup = pairGroups[i + 1];\\n\\n            // If it's not the first group to be before the trade was opened then fee is 0\\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\\n                return (0, 0, beforeTradeOpen);\\n            }\\n\\n            deltaGroup = long ? nextGroup.prevGroupAccFeeLong : nextGroup.prevGroupAccFeeShort;\\n            deltaPair = long ? nextGroup.pairAccFeeLong : nextGroup.pairAccFeeShort;\\n        }\\n\\n        if (beforeTradeOpen) {\\n            deltaGroup -= initialFees.accGroupFee;\\n            deltaPair -= initialFees.accPairFee;\\n        } else {\\n            deltaGroup -= (long ? group.initialAccFeeLong : group.initialAccFeeShort);\\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\\n        }\\n    }\\n\\n    // Pair acc fees helpers\\n    function getPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta) {\\n        Pair memory pair = pairs[pairIndex];\\n\\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestDai(pairIndex);\\n\\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                pair.accFeeLong,\\n                pair.accFeeShort,\\n                pairOiLong,\\n                pairOiShort,\\n                pair.feePerBlock,\\n                currentBlock,\\n                pair.accLastUpdatedBlock,\\n                pairOis[pairIndex].max,\\n                pair.feeExponent\\n            )\\n        );\\n    }\\n\\n    function getPairPendingAccFee(uint pairIndex, uint currentBlock, bool long) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\\n\\n        Pair storage pair = pairs[pairIndex];\\n\\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\\n\\n        emit PairAccFeesUpdated(pairIndex, currentBlock, pair.accFeeLong, pair.accFeeShort);\\n    }\\n\\n    // Group acc fees helpers\\n    function getGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta) {\\n        Group memory group = groups[groupIndex];\\n\\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                group.accFeeLong,\\n                group.accFeeShort,\\n                (uint(group.oiLong) * 1e18) / P_1,\\n                (uint(group.oiShort) * 1e18) / P_1,\\n                group.feePerBlock,\\n                currentBlock,\\n                group.accLastUpdatedBlock,\\n                uint72(group.maxOi),\\n                groupFeeExponents[groupIndex]\\n            )\\n        );\\n    }\\n\\n    function getGroupPendingAccFee(\\n        uint16 groupIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        Group storage group = groups[groupIndex];\\n\\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\\n\\n        emit GroupAccFeesUpdated(groupIndex, currentBlock, group.accFeeLong, group.accFeeShort);\\n    }\\n\\n    // Interaction with callbacks\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external override onlyCallbacks {\\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        (uint64 pairAccFeeLong, uint64 pairAccFeeShort) = _setPairPendingAccFees(pairIndex, currentBlock);\\n        (uint64 groupAccFeeLong, uint64 groupAccFeeShort) = _setGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        _setGroupOi(groupIndex, long, open, positionSizeDai);\\n\\n        if (open) {\\n            InitialAccFees memory initialFees = InitialAccFees(\\n                long ? pairAccFeeLong : pairAccFeeShort,\\n                long ? groupAccFeeLong : groupAccFeeShort,\\n                ChainUtils.getUint48BlockNumber(currentBlock),\\n                0 // placeholder\\n            );\\n\\n            initialAccFees[trader][pairIndex][index] = initialFees;\\n\\n            emit TradeInitialAccFeesStored(trader, pairIndex, index, initialFees.accPairFee, initialFees.accGroupFee);\\n        }\\n\\n        emit TradeActionHandled(trader, pairIndex, index, open, long, positionSizeDai);\\n    }\\n\\n    // Important trade getters\\n    function getTradeBorrowingFee(BorrowingFeeInput memory input) public view override returns (uint fee) {\\n        InitialAccFees memory initialFees = initialAccFees[input.trader][input.pairIndex][input.index];\\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\\n\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        PairGroup memory firstPairGroup;\\n        if (pairGroups.length > 0) {\\n            firstPairGroup = pairGroups[0];\\n        }\\n\\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\\n        if (pairGroups.length == 0 || firstPairGroup.block > initialFees.block) {\\n            fee = ((\\n                pairGroups.length == 0\\n                    ? getPairPendingAccFee(input.pairIndex, currentBlock, input.long)\\n                    : (input.long ? firstPairGroup.pairAccFeeLong : firstPairGroup.pairAccFeeShort)\\n            ) - initialFees.accPairFee);\\n        }\\n\\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\\n        for (uint i = pairGroups.length; i > 0; ) {\\n            (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) = getPairGroupAccFeesDeltas(\\n                i - 1,\\n                pairGroups,\\n                initialFees,\\n                input.pairIndex,\\n                input.long,\\n                currentBlock\\n            );\\n\\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\\n\\n            // Exit loop at first group before trade was open\\n            if (beforeTradeOpen) break;\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (DAI)\\n    }\\n\\n    function getTradeLiquidationPrice(LiqPriceInput calldata input) external view override returns (uint)  {\\n        return\\n            pairInfos.getTradeLiquidationPricePure(\\n                input.openPrice,\\n                input.long,\\n                input.collateral,\\n                input.leverage,\\n                pairInfos.getTradeRolloverFee(input.trader, input.pairIndex, input.index, input.collateral) +\\n                    getTradeBorrowingFee(\\n                        BorrowingFeeInput(\\n                            input.trader,\\n                            input.pairIndex,\\n                            input.index,\\n                            input.long,\\n                            input.collateral,\\n                            input.leverage\\n                        )\\n                    ),\\n                pairInfos.getTradeFundingFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.long,\\n                    input.collateral,\\n                    input.leverage\\n                )\\n            );\\n    }\\n\\n    // Public getters\\n    function getPairOpenInterestDai(uint pairIndex) public view returns (uint, uint) {\\n        return (storageT.openInterestDai(pairIndex, 0), storageT.openInterestDai(pairIndex, 1));\\n    }\\n\\n    function getPairGroupIndex(uint pairIndex) public view returns (uint16 groupIndex) {\\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\\n        return pairGroups.length == 0 ? 0 : pairGroups[pairGroups.length - 1].groupIndex;\\n    }\\n\\n    // External getters\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    ) external view override returns (bool) {\\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\\n        return (g.maxOi == 0) || ((long ? g.oiLong : g.oiShort) + (positionSizeDai * P_1) / 1e18 <= g.maxOi);\\n    }\\n\\n    function getGroup(uint16 groupIndex) external view returns (Group memory, uint48) {\\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\\n    }\\n\\n    function getPair(uint pairIndex) external view returns (Pair memory, PairOi memory) {\\n        return (pairs[pairIndex], pairOis[pairIndex]);\\n    }\\n\\n    // TODO\\n    // function getAllPairs() external view returns (Pair[] memory, PairOi[] memory) {\\n    //     uint len = storageT.priceAggregator().pairsStorage().pairsCount();\\n    //     Pair[] memory p = new Pair[](len);\\n    //     PairOi[] memory pairOi = new PairOi[](len);\\n\\n    //     for (uint i; i < len; ) {\\n    //         p[i] = pairs[i];\\n    //         pairOi[i] = pairOis[i];\\n    //         unchecked {\\n    //             ++i;\\n    //         }\\n    //     }\\n\\n    //     return (p, pairOi);\\n    // }\\n\\n    function getGroups(uint16[] calldata indices) external view returns (Group[] memory, uint48[] memory) {\\n        Group[] memory g = new Group[](indices.length);\\n        uint48[] memory e = new uint48[](indices.length);\\n        uint len = indices.length;\\n\\n        for (uint i; i < len; ) {\\n            g[i] = groups[indices[i]];\\n            e[i] = groupFeeExponents[indices[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (g, e);\\n    }\\n\\n    function getTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    )\\n        external\\n        view\\n        returns (InitialAccFees memory borrowingFees, GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees)\\n    {\\n        borrowingFees = initialAccFees[trader][pairIndex][index];\\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\\n    }\\n\\n    function getPairMaxOi(uint pairIndex) external view override returns (uint)  {\\n        return pairOis[pairIndex].max;\\n    }\\n}\",\"keccak256\":\"0x10116e0532d917f7fa9a7c3ff0688b00a1ad1ad32c415dc6f3ec5bb4b5660d79\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterfaceV5{\\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\\n}\",\"keccak256\":\"0x1afaa4a2058e59dc5b36792e6429505f5f976edea9b272c7a7499fa7ce2fab6e\",\"license\":\"MIT\"},\"contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x3e9a6abfb58b9350f81d8d00aedd471ada26b6acadee67604c2cd0f033017a37\",\"license\":\"MIT\"},\"contracts/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x0e827ca0f91baa0cfd7432b223a05993628946dbb4cf83b8482be6d4aae953bb\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceDai() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xcbb5e5a89f1dcf814417042d09e52a33b1a6c7a5cf47b7cccf41892a9a160f3b\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5{\\n    function balanceOf(address) external view returns (uint);\\n    function ownerOf(uint) external view returns (address);\\n    function transferFrom(address, address, uint) external;\\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\\n}\",\"keccak256\":\"0xe5b2bff53bc90f2756f874af8adca6188bd3769e79e2a7bd47c79f5d70fca267\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6{\\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\\n    function incrementCurrentOrderId() external returns(uint);\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\\n    function pairFeed(uint) external view returns(Feed memory);\\n    function pairSpreadP(uint) external view returns(uint);\\n    function pairMinLeverage(uint) external view returns(uint);\\n    function pairMaxLeverage(uint) external view returns(uint);\\n    function groupMaxCollateral(uint) external view returns(uint);\\n    function groupCollateral(uint, bool) external view returns(uint);\\n    function guaranteedSlEnabled(uint) external view returns(bool);\\n    function pairOpenFeeP(uint) external view returns(uint);\\n    function pairCloseFeeP(uint) external view returns(uint);\\n    function pairOracleFeeP(uint) external view returns(uint);\\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\\n    function pairReferralFeeP(uint) external view returns(uint);\\n    function pairMinLevPosDai(uint) external view returns(uint);\\n}\\n\",\"keccak256\":\"0x877d59f2a896b6b0dbda7c5b0af6189a0ee7d680471d7329051fb9024d653c38\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.20;\\npragma abicoder v2;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeDai; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceDai; // PRECISION\\n        uint openInterestDai; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (DAI or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function dai() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferDai(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestDai(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceDai() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n\\n    function nodes(uint index) external view returns (address);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\",\"keccak256\":\"0x8a861f3c25b615a0a0383bc02d915a0fa13224113e21f1b0b882c9bc9aedef04\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterfaceV5{\\n    function burn(address, uint256) external;\\n    function mint(address, uint256) external;\\n    function transfer(address, uint256) external returns (bool);\\n    function transferFrom(address, address, uint256) external returns(bool);\\n    function balanceOf(address) external view returns(uint256);\\n    function hasRole(bytes32, address) external view returns (bool);\\n    function approve(address, uint256) external returns (bool);\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0x02fdf7636ff92ec0c8f53dc5f78b9e9dfac96d562cfa3bef3310d40e5bfb6767\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0x81ddc0e4c756be38b5d099fb986c7049bae761d423b75da952bd350e9b9dd35c\",\"license\":\"MIT\"},\"contracts/libraries/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\",\"keccak256\":\"0xc23ea84d72c85d5f560262e25c99080829425c391f27f89f316aef527fcaebe8\",\"license\":\"MIT\"},\"contracts/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0c02ae89ff43376823598c6d69ed1b6745ee4e4f898452f77a9e3c1dbe78de3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60808060405234610016576141a7908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f8df7e0146128715780631346b0ff1461284a57806316fff074146128205780631ab5911a146127f057806322005202146125ad5780632d28a817146125415780633979324d146124a8578063485cc9551461227e5780634c67cfa014612254578063651501b514611c6a578063706faf3a14611a0d5780637b64112b146119c15780637cbd3c98146118005780638ee1caa7146117de5780638f694238146117b457806390895ff11461173c578063930842aa1461152c57806393e0e53314611471578063b0baf5d414610ed5578063b2c9dd8b14610be8578063b91ac78814610b70578063b94ffa1c14610b36578063bb219c7514610ae0578063bcb7887114610a87578063bdf391cc1461085d578063ce67edfb14610360578063d627450514610273578063e3e98a751461023f5763ff933fc41461015b57600080fd5b3461023a57602036600319011261023a5761ffff610177612b3a565b61017f61407e565b50166000526002602052610120604060002060066020526101ad65ffffffffffff6040600020541691612d12565b90610232604051809360e080916001600160701b03808251168552602082015116602085015263ffffffff604082015116604085015267ffffffffffffffff806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015269ffffffffffffffffffff60c08201511660c08501520151910152565b610100820152f35b600080fd5b3461023a57602036600319011261023a576004356000526006602052602065ffffffffffff60406000205416604051908152f35b3461023a57606036600319011261023a57602435801515810361023a576044359061ffff6102a2600435614039565b1660005260026020526102b86040600020612d12565b60c081019069ffffffffffffffffffff9081835116159384156102e3575b6020856040519015158152f35b6001600160701b0392939450600014610355575116925b6402540be4009081810291818304149015171561033f576020936001600160701b03670de0b6b3a7640000610331930491166135a5565b9151161015828080806102d6565b634e487b7160e01b600052601160045260246000fd5b6020015116926102fa565b3461023a5760c036600319011261023a57610379612ba0565b60843515156084350361023a5760a435151560a4350361023a57600460206001600160a01b0360005460101c16604051928380927eb127830000000000000000000000000000000000000000000000000000000082525afa8015610851576001600160a01b0391600091610822575b501633036107de576103fb602435614039565b6104036140e1565b61040f81602435613959565b909261041b8382613b80565b94909161ffff8116600052600260205260406000209060009161ffff82166106cd575b5491604051926001600160701b038092168452818116602085015260701c1660408301526084351515917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233606061ffff60a4351515941692a46084356104f8575b8560405160443581526084351515602082015260a4351515604082015260643560608201527f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f60806001600160a01b03602435941692a3005b7faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e609260a435156106c55750935b60a435156106bd5750915b65ffffffffffff9261054484831115612ddf565b61068d60405161055381612a73565b67ffffffffffffffff809716815286602082019316835285604082019416845269ffffffffffffffffffff606082016000815261064f6001600160a01b038b1698896000526004602052604060002060243560005260205260406000209a6044359b8c600052602052806040600020965116978867ffffffffffffffff198854161787555116976106118987906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b51855475ffffffffffff000000000000000000000000000000001916911660801b75ffffffffffff0000000000000000000000000000000016178455565b51825475ffffffffffffffffffffffffffffffffffffffffffff16911660b01b75ffffffffffffffffffffffffffffffffffffffffffff1916179055565b6040805195865267ffffffffffffffff918216602087015291169084015260243592606090a3818080808061049f565b905091610530565b905093610525565b91506064356402540be400818181020481148215171561033f57670de0b6b3a7640000910204916001600160701b038361070a8280961115612ddf565b169260a43515610761576084351561073e576107298482845416612e43565b166001600160701b031982541617815561043e565b6107568183541685811160001461075b578590612e2a565b610729565b80612e2a565b83608435156107bd5761077991835460701c16612e43565b7fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b83549260701b16911617815561043e565b506107d990825460701c1684811160001461075b578490612e2a565b610779565b606460405162461bcd60e51b815260206004820152600e60248201527f43414c4c4241434b535f4f4e4c590000000000000000000000000000000000006044820152fd5b610844915060203d60201161084a575b61083c8183612b00565b810190612be0565b836103e8565b503d610832565b6040513d6000823e3d90fd5b3461023a57602036600319011261023a57600060c060405161087e81612ac7565b606081528260208201528260408201528260608201528260808201528260a082015201526108aa6140bc565b506004356000526003602052604060002060056020526108ce60406000209161382c565b604051916108db83612a73565b5468ffffffffffffffffff8116835268ffffffffffffffffff8160481c16602084015268ffffffffffffffffff8160901c16604084015260d81c60608301526040519060a0825280519060e060a08401526101808301825180915260206101a0850193019060005b8181106109f8575050506060839460c08363ffffffff602064ffffffffff960151168288015267ffffffffffffffff8060408301511660e0890152848201511661010088015265ffffffffffff8060808301511661012089015260a082015116610140880152015161016086015268ffffffffffffffffff815116602086015268ffffffffffffffffff602082015116604086015268ffffffffffffffffff6040820151168286015201511660808301520390f35b9091936020610120600192875161ffff815116825265ffffffffffff84820151168483015267ffffffffffffffff8060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a08401528060c08301511660c08401528060e08301511660e08401526101008092015116908201520195019101919091610943565b3461023a57604036600319011261023a57610adc610aaf610aa6612b3a565b60243590613a70565b6040805167ffffffffffffffff948516815292841660208401529216918101919091529081906060820190565b0390f35b3461023a57602036600319011261023a57600435600052600560205260806040600020546040519068ffffffffffffffffff8082168352808260481c1660208401528160901c16604083015260d81c6060820152f35b3461023a57602036600319011261023a576004356000526005602052602068ffffffffffffffffff60406000205460901c16604051908152f35b3461023a57602036600319011261023a57600435600052600360205260c06040600020600260018201549101546040519163ffffffff8116835267ffffffffffffffff808260201c1660208501528160601c16604084015265ffffffffffff8160a01c16606084015260d01c608083015260a0820152f35b3461023a57604036600319011261023a5767ffffffffffffffff60043581811161023a57610c1a903690600401612b6f565b60249283359381851161023a573660238601121561023a57846004013591821161023a5760609036818385028801011161023a576001600160a01b03926001958487541660405195869163481c6a7560e01b83528260046020998a935afa801561085157610c9392600091610eb8575b50163314612bff565b610c9e828714612c4a565b60005b868110610caa57005b610cbd610cb8828985612c95565b612d03565b83821015610ea35761ffff8116908115610e7657907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681878785948b8f8f98610e37610e318b9388610e3d9402016064810195610d4565ffffffffffff98878a610d258b612ca5565b16101580610e5c575b610d3790612cb8565b610d3f6140e1565b90613b80565b50508b60005260028152610e09604460406000209a8401938b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffff00000000000000000000000000000000000000000000000000000000610da588612d85565b92549260e01b169116178c55019968ffffffffffffffffff9788610dc88d612d96565b1691019075ffffffffffffffffffffffffffffffffffffffffffff75ffffffffffffffffffffffffffffffffffffffffffff1983549260b01b169116179055565b6006610e1488612ca5565b9152876040600020911665ffffffffffff19825416179055612d85565b95612d96565b92612ca5565b9163ffffffff60405195168552168d840152166040820152a201610ca1565b50610d3760038b610e6c8c612ca5565b1611159050610d2e565b6064886007886040519262461bcd60e51b8452600484015282015266047524f55505f360cc1b6044820152fd5b84634e487b7160e01b60005260326004526000fd5b610ecf9150883d8a1161084a5761083c8183612b00565b8b610c8a565b3461023a5760a036600319011261023a57608036602319011261023a5760046001600160a01b03602081600154166040519384809263481c6a7560e01b82525afa801561085157610f30926000916114525750163314612bff565b60643565ffffffffffff811614158061023a57600165ffffffffffff60643516101580611439575b610f6190612cb8565b6004356000526003602052604060002090610f7d600435614039565b90610f866140e1565b91610f9383600435613959565b505060243561ffff81161415928361023a5761ffff821661ffff60243516036110e3575b50506044359263ffffffff841680940361023a576001019081549061023a578379ffffffffffffffffffffffffffffffffffffffffffff000000007fffffffffffff000000000000000000000000000000000000000000000000000060643560d01b169216171790556084359068ffffffffffffffffff82169182810361023a5760043560005260056020526040600020907fffffffffff000000000000000000ffffffffffffffffffffffffffffffffffff7affffffffffffffffff00000000000000000000000000000000000083549260901b16911617905561023a5760405191825265ffffffffffff606435166020830152604082015261ffff60243516907f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4606060043592a3005b9092506110f08184613b80565b50506110fe81602435613b80565b505061113761112f611111600435613f1f565b919061111d8188612e5e565b6111278388612f73565b6024356130b3565b6024356131c5565b61ffff60243516600052600260205267ffffffffffffffff61115c6040600020612d12565b61ffff851660005260026020526111766040600020612d12565b61118865ffffffffffff851115612ddf565b82608081606085015116930151169083608081606084015116920151169160018901549365ffffffffffff604051976111c089612a56565b61ffff60243516895216602088015260408701526060860152608085015260a0840152818160201c1660c084015260601c1660e0820152600061010082015283549068010000000000000000821015611423576001820180865582101561140d5767ffffffffffffffff6101006113d1938760005260206000209060011b0192600161ffff8251169480549567ffffffffffff0000602085015160101b16908619809816171781556112a58560408501511682906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b6060830151815467ffffffffffffffff60801b191690861660801b67ffffffffffffffff60801b161781556080830151815477ffffffffffffffffffffffffffffffffffffffffffffffff1690861660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff19161781555b01938360a083015116908554161784556113638360c08301511685906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b60e0810151845467ffffffffffffffff60801b191690841660801b67ffffffffffffffff60801b161784550151825477ffffffffffffffffffffffffffffffffffffffffffffffff16911660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916179055565b60009161ffff806024351691166004357f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468600080a48380610fb7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b5060009050600360643565ffffffffffff161115610f58565b61146b915060203d60201161084a5761083c8183612b00565b83610c8a565b3461023a5761012036600319011261023a5760405161148f81612a56565b67ffffffffffffffff600435818116810361023a578252602435908116810361023a5760208201526044356040820152606435606082015260843563ffffffff8116810361023a57608082015260a43560a082015260c43560c082015260e43568ffffffffffffffffff8116810361023a5760e08201526101043565ffffffffffff8116810361023a5781610aaf91610100610adc9401526133d5565b3461023a57608036600319011261023a57611545612b3a565b606036602319011261023a576001600160a01b0390816001541660405192839163481c6a7560e01b835282600460209687935afa8015610851576115939260009161171f5750163314612bff565b61ffff81169182156116f1576064359165ffffffffffff831680931415908161023a576001841015806116e2575b90610d376115ce92612cb8565b505083600052600282526040600020926024359163ffffffff83169283810361023a577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffff0000000000000000000000000000000000000000000000000000000087549260e01b1691161785556044359468ffffffffffffffffff861680960361023a57600101805475ffffffffffffffffffffffffffffffffffffffffffff1660b087901b75ffffffffffffffffffffffffffffffffffffffffffff191617905561023a577ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681938360066060955260406000208365ffffffffffff198254161790556040519384528301526040820152a2005b506000915060038411156115c1565b6064906040519062461bcd60e51b825260048201526007602482015266047524f55505f360cc1b6044820152fd5b6117369150853d871161084a5761083c8183612b00565b85610c8a565b3461023a576001600160a01b0361175236612bb6565b92909116600052600460205260406000209060005260205260406000209060005260205260806040600020546040519067ffffffffffffffff80821683528160401c16602083015265ffffffffffff81841c16604083015260b01c6060820152f35b3461023a57602036600319011261023a5760206117d2600435614039565b61ffff60405191168152f35b3461023a57604036600319011261023a57610adc610aaf602435600435613899565b3461023a5761180e36612bb6565b916118176140bc565b506040519061182582612aab565b6000825260006040602093828582015201526001600160a01b03809116908160005260048352604060002084600052835260406000208560005283526040600020936040519461187486612a73565b549167ffffffffffffffff8084168752858701818560401c168152604088019265ffffffffffff94858760801c16855260646060988993848d019960b01c8a52600154166040519d8e9485937f5ed5804e0000000000000000000000000000000000000000000000000000000085526004850152602484015260448301525afa9889156108515760009961194f575b509269ffffffffffffffffffff928260e09a979560409997948a519b51168b525116868a01525116868801525116908501528151608085015281015160a08401520151151560c0820152f35b969491985094928387813d83116119ba575b61196b8183612b00565b8101031261023a57604080519761198189612aab565b8051895286810151878a0152015192831515840361023a57604088019390935295979395929490939069ffffffffffffffffffff611903565b503d611961565b3461023a57606036600319011261023a5760206119dc612b60565b6119ea602435600435613899565b50909115611a0657505b67ffffffffffffffff60405191168152f35b90506119f4565b3461023a5760e036600319011261023a576001600160a01b038060015416611a33613efa565b9160c4359160a435611a43613f09565b94602435926044359480604051987f58f796bc000000000000000000000000000000000000000000000000000000008a521660048901528460248901528560448901528360648901526020978881608481865afa801561085157600090611c3b575b611af79150611af1611ab5613f09565b611abd613efa565b8560405192611acb84612a8f565b168252898d8301528a6040830152151560608201528760808201528a60a0820152613ca6565b906135a5565b95611b00613f09565b95611b09613efa565b92604051977ff6c50efe00000000000000000000000000000000000000000000000000000000895216600488015260248701526044860152151560648501528260848501528560a4850152868460c481845afa8015610851578794600091611c07575b5060c493949560405197889687957f6bcbe86000000000000000000000000000000000000000000000000000000000875260643560048801521515602487015260448601526064850152608484015260a48301525afa90811561085157600091611bda575b50604051908152f35b90508181813d8311611c00575b611bf18183612b00565b8101031261023a575182611bd1565b503d611be7565b8581959692503d8311611c34575b611c1f8183612b00565b8101031261023a5791518693929060c4611b6c565b503d611c15565b508881813d8311611c63575b611c518183612b00565b8101031261023a57611af79051611aa5565b503d611c47565b3461023a57604036600319011261023a5760043567ffffffffffffffff811161023a57611c9b903690600401612b6f565b67ffffffffffffffff6024351161023a5736602360243501121561023a5767ffffffffffffffff602435600401351161023a5736602480356004013560071b813501011161023a5760046001600160a01b03602081600154166040519384809263481c6a7560e01b82525afa801561085157611d219260009161223b5750163314612bff565b611d32602435600401358214612c4a565b60005b818110611d3e57005b611d49818385612c95565b35906024356004013581101561140d57600165ffffffffffff611d7560648460071b6024350101612ca5565b16101580612211575b611d8790612cb8565b8160005260036020526040600020611d9e83614039565b92611da76140e1565b93611db28583613959565b5050611dc660248560071b81350101612d03565b61ffff808316911603611f4d575b50600193507f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4606061ffff60448660071b602435010187611e1482612d85565b960180547fffffffffffff0000000000000000000000000000000000000000000000000000611e4c60648b60071b6024350101612ca5565b60d01b169079ffffffffffffffffffffffffffffffffffffffffffff0000000063ffffffff809a1691161717905568ffffffffffffffffff60848860071b602435010196611e9988612d96565b8760005260056020526040600020907fffffffffff000000000000000000ffffffffffffffffffffffffffffffffffff7affffffffffffffffff00000000000000000000000000000000000083549260901b16911617905565ffffffffffff611f13611f0d60248c60071b81350101612d03565b94612d85565b98611f30611f2a60648d60071b6024350101612ca5565b91612d96565b926040519a168a521660208901521660408701521693a301611d35565b611f578582613b80565b5050611f7485611f6f60248760071b81350101612d03565b613b80565b5050611fc9611fb2611f8584613f1f565b9190611f918186612e5e565b611f9b8386612f73565b611fad60248960071b81350101612d03565b6130b3565b611fc460248760071b81350101612d03565b6131c5565b61ffff611fde60248660071b81350101612d03565b1660005260029485602052611ff66040600020612d12565b9561ffff831660005260205261200f6040600020612d12565b67ffffffffffffffff61202a60248860071b81350101612d03565b9261203d65ffffffffffff821115612ddf565b60609282848b01511690836080809c015116848c818885015116930151169265ffffffffffff60018c01549561ffff6040519a6120798c612a56565b168a521660208901526040880152858701528a86015260a0850152818160201c1660c0850152821c1660e08301526000610100830152845468010000000000000000811015611423576001810180875581101561140d576101006121cc936001809a61131667ffffffffffffffff80968c600052602060002090851b01926121888261ffff8851169a86549b67ffffffffffff000060208b015160101b16908319809e161717875561215e8260408b01511688906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b880151865467ffffffffffffffff60801b1916911660801b67ffffffffffffffff60801b16178555565b850151835477ffffffffffffffffffffffffffffffffffffffffffffffff16911660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916178255565b61ffff806121e260248760071b81350101612d03565b169116827f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468600080a486611dd4565b50611d87600365ffffffffffff61223160648560071b6024350101612ca5565b1611159050611d7e565b611736915060203d60201161084a5761083c8183612b00565b3461023a57602036600319011261023a576040612272600435613f1f565b82519182526020820152f35b3461023a57604036600319011261023a576001600160a01b0360043581811680820361023a5760243592831680930361023a576000549060ff8260081c16159182809361249b575b8015612484575b1561241a5760ff19811660011760005582612408575b501515806123ff575b156123bb5775ffffffffffffffffffffffffffffffffffffffff00006000549260101b1692837fffffffffffffffffffff0000000000000000000000000000000000000000ffff8416176000557fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015561236857005b7fffffffffffffffffffff000000000000000000000000000000000000000000ff16176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b606460405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f504152414d5300000000000000000000000000000000000000006044820152fd5b508215156122ec565b61ffff191661010117600055846122e3565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156122cd5750600160ff8216146122cd565b50600160ff8216106122c6565b3461023a57602036600319011261023a5761ffff6124c4612b3a565b16600052600260205261010060406000208054906002600182015491015490604051926001600160701b0380821685528160701c16602085015260e01c604084015267ffffffffffffffff80821660608501528160401c16608084015265ffffffffffff8160801c1660a084015260b01c60c083015260e0820152f35b3461023a5760c036600319011261023a5760405161255e81612a8f565b612566612ba0565b815260243560208201526044356040820152606435801515810361023a57816125a59160606020940152608435608082015260a43560a0820152613ca6565b604051908152f35b3461023a5760208060031936011261023a5760043567ffffffffffffffff811161023a576125df903690600401612b6f565b906125e982612b22565b926125f76040519485612b00565b828452601f19918261260885612b22565b0160005b8181106127d257505061261e84612b22565b9361262c6040519586612b00565b80855261263881612b22565b858401940136853760005b8181106127555750505060405193849360408501604086528251809152836060870193019060005b8181106126b6575050508482038584015251808252908201929160005b82811061269757505050500390f35b835165ffffffffffff1685528695509381019392810192600101612688565b91959650919284610100826127456001948a5160e080916001600160701b03808251168552602082015116602085015263ffffffff604082015116604085015267ffffffffffffffff806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015269ffffffffffffffffffff60c08201511660c08501520151910152565b019601910191879695939261266b565b60019061ffff979596978061276e610cb8848789612c95565b16600052600286526127836040600020612d12565b61278d8389613591565b526127988288613591565b506127a7610cb8838688612c95565b166000526006855265ffffffffffff604060002054166127c7828a613591565b520195949395612643565b83906127e09795969761407e565b828288010152019594939561260c565b3461023a57606036600319011261023a57602061280b612b3a565b6119ea612816612b60565b9160243590613a70565b3461023a57600036600319011261023a5760206001600160a01b0360005460101c16604051908152f35b3461023a57600036600319011261023a5760206001600160a01b0360015416604051908152f35b3461023a576101208060031936011261023a576024359067ffffffffffffffff9081831161023a573660238401121561023a578260040135906128b382612b22565b936128c16040519586612b00565b82855260209260248385880192028301019136831161023a57602401905b8282106129925750505050608060431936011261023a576040519261290384612a73565b604435838116810361023a578452606435838116810361023a578285015260843565ffffffffffff8116810361023a57604085015260a43569ffffffffffffffffffff8116810361023a57606085015260e43593841515850361023a5760609461297892610104359260c435916004356135cc565b929193908160405195168552169083015215156040820152f35b838236031261023a57604051906129a882612a56565b823561ffff8116810361023a578252858301359065ffffffffffff8216820361023a5782879283889501526129df60408601612b4b565b604082015260606129f1818701612b4b565b908201526080612a02818701612b4b565b9082015260a0612a13818701612b4b565b9082015260c0612a24818701612b4b565b90820152612a3460e08601612b4b565b60e0820152610100612a47818701612b4b565b908201528152019101906128df565b610120810190811067ffffffffffffffff82111761142357604052565b6080810190811067ffffffffffffffff82111761142357604052565b60c0810190811067ffffffffffffffff82111761142357604052565b6060810190811067ffffffffffffffff82111761142357604052565b60e0810190811067ffffffffffffffff82111761142357604052565b610100810190811067ffffffffffffffff82111761142357604052565b90601f8019910116810190811067ffffffffffffffff82111761142357604052565b67ffffffffffffffff81116114235760051b60200190565b6004359061ffff8216820361023a57565b359067ffffffffffffffff8216820361023a57565b60443590811515820361023a57565b9181601f8401121561023a5782359167ffffffffffffffff831161023a576020808501948460051b01011161023a57565b600435906001600160a01b038216820361023a57565b606090600319011261023a576004356001600160a01b038116810361023a57906024359060443590565b9081602091031261023a57516001600160a01b038116810361023a5790565b15612c0657565b606460405162461bcd60e51b815260206004820152600c60248201527f4d414e414745525f4f4e4c5900000000000000000000000000000000000000006044820152fd5b15612c5157565b606460405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f4c454e47544800000000000000000000000000000000000000006044820152fd5b919081101561140d5760051b0190565b3565ffffffffffff8116810361023a5790565b15612cbf57565b606460405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4558504f4e454e540000000000000000000000000000000000006044820152fd5b3561ffff8116810361023a5790565b90604051612d1f81612ae3565b60e06002829480546001600160701b0380821686528160701c166020860152831c6040850152600181015467ffffffffffffffff80821660608701528160401c16608086015265ffffffffffff8160801c1660a086015260b01c60c08501520154910152565b3563ffffffff8116810361023a5790565b3568ffffffffffffffffff8116810361023a5790565b8181029291811591840414171561033f57565b8115612dc9570490565b634e487b7160e01b600052601260045260246000fd5b15612de657565b606460405162461bcd60e51b815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152fd5b6001600160701b03918216908216039190821161033f57565b9190916001600160701b038080941691160191821161033f57565b61ffff16600091818352600260205260408320839183612ec9575b506060600193927f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233925490604051916001600160701b038092168352818116602084015260701c166040820152a4565b9091506402540be40090818102918183041490151715612f5f57606060019392670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339304906001600160701b0382612f2c8280951115612ddf565b8254911692612f468282168581111561075b578590612e2a565b16906001600160701b0319161781559250929350612e79565b602484634e487b7160e01b81526011600452fd5b61ffff6000911680825260026020526040822092829082612fdd575b5060607f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339184955490604051916001600160701b038092168352818116602084015260701c166040820152a4565b6402540be4008082029250811591830414171561309f576060670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339204936001600160701b03856130398280981115612ddf565b16909586957fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b61308d8454938460701c1686811160001461075b578690612e2a565b60701b16911617815595509150612f8f565b602483634e487b7160e01b81526011600452fd5b61ffff1690816000526002602052604060002060009183613121575b50917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db23360606001949385945490604051916001600160701b038092168352818116602084015260701c166040820152a4565b90916402540be400918281029281840414901517156131b15750917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233606060019493670de0b6b3a7640000869504906001600160701b03826131868280951115612ddf565b169181549061319784828416612e43565b16906001600160701b0319161781559395509350506130cf565b80634e487b7160e01b602492526011600452fd5b91909161ffff60009116808252600260205260408220829482613233575b506060600194957f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233925490604051916001600160701b038092168352818116602084015260701c166040820152a4565b909294506402540be400908181029181830414901517156132f157606060019495670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339304946001600160701b03866132978280991115612ddf565b1691957fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b6132de858554948560701c16612e43565b60701b16911617815592509594506131e3565b602485634e487b7160e01b81526011600452fd5b9190820391821161033f57565b9080156133b25781156133ab5781806001146133a3576002146133925760208110610133831016604e8210600b8410161761338d57600190815b8082116133645750508160001904811161033f570290565b90928060001904811161033f57818416613384575b800292811c9061334c565b80920291613379565b900a90565b905060ff811161033f576001901b90565b505050600190565b5050600090565b5050600190565b91909167ffffffffffffffff8080941691160191821161033f57565b9060a082019182519260c082019384511161354d5760408201805160608401805180831097939190881561353c5750613412925051905190613305565b60e084019168ffffffffffffffffff9384845116151580613526575b6000901561351b5750613459916134489151905190613305565b63ffffffff60808701511690612dac565b926402540be4009182810292818404149015171561033f5761347d92511690612dbf565b6134a161010084019261349b65ffffffffffff938486511690613312565b90612dac565b915116906004821161033f576134c191670de0b6b3a76400000a90612dbf565b67ffffffffffffffff816134d88280941115612ddf565b1680928560001461350957828151165b95156134ff57602001516134fc92166133b9565b91565b6020915001511691565b61351682848351166133b9565b6134e8565b9450505050506134c1565b5065ffffffffffff61010087015116151561342e565b91505061354891613305565b613412565b606460405162461bcd60e51b815260206004820152600b60248201527f424c4f434b5f4f524445520000000000000000000000000000000000000000006044820152fd5b805182101561140d5760209160051b010190565b9190820180921161033f57565b67ffffffffffffffff918216908216039190821161033f57565b929195949390936135dd8486613591565b519365ffffffffffff908160208701511660408a01908382511611978051600019810190811161033f5783036136ce5750505050806136246136339261ffff875116613a70565b5084156136c757505b93613899565b5082156136c057505b925b841561366e575050906134fc9161366567ffffffffffffffff9182602089015116906135b2565b955116906135b2565b67ffffffffffffffff9196506136976134fc9493886000146136b35783604084015116906135b2565b96156136a85760c0015116906135b2565b60e0015116906135b2565b83606084015116906135b2565b905061363c565b905061362d565b916001919396508094500180931161033f5786926136eb91613591565b51938261374e575b505061374257801561372d5767ffffffffffffffff806080840151165b9282156137235760c00151165b9261363e565b60e001511661371d565b67ffffffffffffffff8060a084015116613710565b50600094508493915050565b80919250602085015116915116101538806136f3565b90815461377081612b22565b9260409361378085519182612b00565b828152809460208092019260005281600020906000935b8585106137a657505050505050565b60028460019284516137b781612a56565b865461ffff8116825265ffffffffffff8160101c168483015267ffffffffffffffff908181891c16888401526080918082841c16606085015260c091821c83850152878a0154809382821660a087015282828c1c16848701521c1660e08401521c610100820152815201930194019391613797565b9060405161383981612ac7565b60c06002829461384881613764565b8452600181015463ffffffff8116602086015267ffffffffffffffff808260201c1660408701528160601c16606086015265ffffffffffff8160a01c16608086015260d01c60a08501520154910152565b90613954918060005260036020526138b4604060002061382c565b6138bd82613f1f565b92909367ffffffffffffffff9485604085015116956060850151169463ffffffff6020860151169165ffffffffffff8060808801511695600052600560205260a068ffffffffffffffffff60406000205460901c169701511696604051986139248a612a56565b8952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201526133d5565b909192565b917ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4926139868382613899565b509490859481968460005260036020526001604060002001926bffffffffffffffff0000000084546139c065ffffffffffff861115612ddf565b7fffffffffffff00000000000000000000000000000000000000000000ffffffff73ffffffffffffffff00000000000000000000000079ffffffffffff00000000000000000000000000000000000000008760a01b169560601b169116179160201b161717809255613a6b60405192839267ffffffffffffffff808360601c169260201c1690849160409194936060840195845267ffffffffffffffff809216602085015216910152565b0390a2565b61ffff90929192166000928184526002602052613a8f60408520612d12565b9167ffffffffffffffff928360608201511693608082015116926001600160701b039687835116670de0b6b3a764000098898202918083048b149015171561309f5760208501511689810299818b041490151715613b6c57613954979863ffffffff60408601511692604065ffffffffffff9168ffffffffffffffffff60c08460a08b0151169901511698815260066020522054169660405198613b328a612a56565b895260208901526402540be4008092046040890152046060870152608086015260a085015260c084015260e08301526101008201526133d5565b602482634e487b7160e01b81526011600452fd5b917fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e613bac8385613a70565b509190938294613a6b61ffff82981694856000526002602052613c0460016040600020019182906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b805467ffffffffffffffff191667ffffffffffffffff938416178155613c7465ffffffffffff613c3681871115612ddf565b825475ffffffffffff00000000000000000000000000000000191690861660801b75ffffffffffff0000000000000000000000000000000016178255565b546040805194855267ffffffffffffffff8483168116602087015291811c909316169183019190915281906060820190565b90600080926001600160a01b0381511684526004936020858152604080832091808501928351855281528184208286015185528152818420825190613cea82612a73565b549067ffffffffffffffff9485831682528583861c168483015284820165ffffffffffff94858560801c16825260609460b01c858501528251895260038152613d34878a20613764565b95613d3d6140e1565b978a815191613d4b83612a56565b81835281858401528201528a878201528a60808201528a60a08201528a60c08201528a60e08201528a610100820152928751158015613ed4575b508751159182938315613ec0575b505050613e58575b50508396959651805b613dde575b505050505050505060649293506402540be40091613dd48260a06080613dd995015191015190612dac565b612dac565b040490565b90919293949596986000198201918211613e455790613e2b8392613e13898c898f9c9b9a999851910151151590888b886135cc565b9d91908083168284161115613e3e57505b16906135a5565b99613e395795969580613da4565b613da9565b9050613e24565b60248860118e634e487b7160e01b835252fd5b87929a50600014613e9d5750613e8d8951613e7987868c0151151592613899565b50909115613e9657505b82845116906135b2565b16973880613d9b565b9050613e83565b88840151613e8d91839115613eb65760c0015116613e83565b60e0015116613e83565b819293508501511691511610388080613d93565b909350613ee657818701519238613d85565b5060248960328f634e487b7160e01b835252fd5b608435801515810361023a5790565b6004356001600160a01b038116810361023a5790565b9060006001600160a01b03815460101c16604051917f28daca2100000000000000000000000000000000000000000000000000000000948584528060048501528160248501526020958685604481875afa94851561402e57908792918496613ff6575b50604490604051958693849283526004830152600160248301525afa948515613fe9578195613fb3575b5050509190565b909180939550813d8311613fe2575b613fcc8183612b00565b81010312613fdf57505191388080613fac565b80fd5b503d613fc2565b50604051903d90823e3d90fd5b838193949297503d8311614027575b61400f8183612b00565b810103126140235751938691906044613f82565b8280fd5b503d614005565b6040513d85823e3d90fd5b6000908152600360205261404f60408220613764565b8051908161405c57505090565b600019820192909183116131b1575061ffff9161407891613591565b51511690565b6040519061408b82612ae3565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b604051906140c982612a73565b60006060838281528260208201528260408201520152565b61a4b146148015614165575b6140f5574390565b6040517fa3b1b31d00000000000000000000000000000000000000000000000000000000815260208160048160645afa90811561085157600091614137575090565b906020823d821161415d575b8161415060209383612b00565b81010312613fdf57505190565b3d9150614143565b5062066eed46146140ed56fea264697066735822122046dead4208d42923518f1cadcbb7a62dd9bd20e40e4ccff30dbf96c61c545a6064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630f8df7e0146128715780631346b0ff1461284a57806316fff074146128205780631ab5911a146127f057806322005202146125ad5780632d28a817146125415780633979324d146124a8578063485cc9551461227e5780634c67cfa014612254578063651501b514611c6a578063706faf3a14611a0d5780637b64112b146119c15780637cbd3c98146118005780638ee1caa7146117de5780638f694238146117b457806390895ff11461173c578063930842aa1461152c57806393e0e53314611471578063b0baf5d414610ed5578063b2c9dd8b14610be8578063b91ac78814610b70578063b94ffa1c14610b36578063bb219c7514610ae0578063bcb7887114610a87578063bdf391cc1461085d578063ce67edfb14610360578063d627450514610273578063e3e98a751461023f5763ff933fc41461015b57600080fd5b3461023a57602036600319011261023a5761ffff610177612b3a565b61017f61407e565b50166000526002602052610120604060002060066020526101ad65ffffffffffff6040600020541691612d12565b90610232604051809360e080916001600160701b03808251168552602082015116602085015263ffffffff604082015116604085015267ffffffffffffffff806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015269ffffffffffffffffffff60c08201511660c08501520151910152565b610100820152f35b600080fd5b3461023a57602036600319011261023a576004356000526006602052602065ffffffffffff60406000205416604051908152f35b3461023a57606036600319011261023a57602435801515810361023a576044359061ffff6102a2600435614039565b1660005260026020526102b86040600020612d12565b60c081019069ffffffffffffffffffff9081835116159384156102e3575b6020856040519015158152f35b6001600160701b0392939450600014610355575116925b6402540be4009081810291818304149015171561033f576020936001600160701b03670de0b6b3a7640000610331930491166135a5565b9151161015828080806102d6565b634e487b7160e01b600052601160045260246000fd5b6020015116926102fa565b3461023a5760c036600319011261023a57610379612ba0565b60843515156084350361023a5760a435151560a4350361023a57600460206001600160a01b0360005460101c16604051928380927eb127830000000000000000000000000000000000000000000000000000000082525afa8015610851576001600160a01b0391600091610822575b501633036107de576103fb602435614039565b6104036140e1565b61040f81602435613959565b909261041b8382613b80565b94909161ffff8116600052600260205260406000209060009161ffff82166106cd575b5491604051926001600160701b038092168452818116602085015260701c1660408301526084351515917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233606061ffff60a4351515941692a46084356104f8575b8560405160443581526084351515602082015260a4351515604082015260643560608201527f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f60806001600160a01b03602435941692a3005b7faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e609260a435156106c55750935b60a435156106bd5750915b65ffffffffffff9261054484831115612ddf565b61068d60405161055381612a73565b67ffffffffffffffff809716815286602082019316835285604082019416845269ffffffffffffffffffff606082016000815261064f6001600160a01b038b1698896000526004602052604060002060243560005260205260406000209a6044359b8c600052602052806040600020965116978867ffffffffffffffff198854161787555116976106118987906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b51855475ffffffffffff000000000000000000000000000000001916911660801b75ffffffffffff0000000000000000000000000000000016178455565b51825475ffffffffffffffffffffffffffffffffffffffffffff16911660b01b75ffffffffffffffffffffffffffffffffffffffffffff1916179055565b6040805195865267ffffffffffffffff918216602087015291169084015260243592606090a3818080808061049f565b905091610530565b905093610525565b91506064356402540be400818181020481148215171561033f57670de0b6b3a7640000910204916001600160701b038361070a8280961115612ddf565b169260a43515610761576084351561073e576107298482845416612e43565b166001600160701b031982541617815561043e565b6107568183541685811160001461075b578590612e2a565b610729565b80612e2a565b83608435156107bd5761077991835460701c16612e43565b7fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b83549260701b16911617815561043e565b506107d990825460701c1684811160001461075b578490612e2a565b610779565b606460405162461bcd60e51b815260206004820152600e60248201527f43414c4c4241434b535f4f4e4c590000000000000000000000000000000000006044820152fd5b610844915060203d60201161084a575b61083c8183612b00565b810190612be0565b836103e8565b503d610832565b6040513d6000823e3d90fd5b3461023a57602036600319011261023a57600060c060405161087e81612ac7565b606081528260208201528260408201528260608201528260808201528260a082015201526108aa6140bc565b506004356000526003602052604060002060056020526108ce60406000209161382c565b604051916108db83612a73565b5468ffffffffffffffffff8116835268ffffffffffffffffff8160481c16602084015268ffffffffffffffffff8160901c16604084015260d81c60608301526040519060a0825280519060e060a08401526101808301825180915260206101a0850193019060005b8181106109f8575050506060839460c08363ffffffff602064ffffffffff960151168288015267ffffffffffffffff8060408301511660e0890152848201511661010088015265ffffffffffff8060808301511661012089015260a082015116610140880152015161016086015268ffffffffffffffffff815116602086015268ffffffffffffffffff602082015116604086015268ffffffffffffffffff6040820151168286015201511660808301520390f35b9091936020610120600192875161ffff815116825265ffffffffffff84820151168483015267ffffffffffffffff8060408301511660408401528060608301511660608401528060808301511660808401528060a08301511660a08401528060c08301511660c08401528060e08301511660e08401526101008092015116908201520195019101919091610943565b3461023a57604036600319011261023a57610adc610aaf610aa6612b3a565b60243590613a70565b6040805167ffffffffffffffff948516815292841660208401529216918101919091529081906060820190565b0390f35b3461023a57602036600319011261023a57600435600052600560205260806040600020546040519068ffffffffffffffffff8082168352808260481c1660208401528160901c16604083015260d81c6060820152f35b3461023a57602036600319011261023a576004356000526005602052602068ffffffffffffffffff60406000205460901c16604051908152f35b3461023a57602036600319011261023a57600435600052600360205260c06040600020600260018201549101546040519163ffffffff8116835267ffffffffffffffff808260201c1660208501528160601c16604084015265ffffffffffff8160a01c16606084015260d01c608083015260a0820152f35b3461023a57604036600319011261023a5767ffffffffffffffff60043581811161023a57610c1a903690600401612b6f565b60249283359381851161023a573660238601121561023a57846004013591821161023a5760609036818385028801011161023a576001600160a01b03926001958487541660405195869163481c6a7560e01b83528260046020998a935afa801561085157610c9392600091610eb8575b50163314612bff565b610c9e828714612c4a565b60005b868110610caa57005b610cbd610cb8828985612c95565b612d03565b83821015610ea35761ffff8116908115610e7657907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681878785948b8f8f98610e37610e318b9388610e3d9402016064810195610d4565ffffffffffff98878a610d258b612ca5565b16101580610e5c575b610d3790612cb8565b610d3f6140e1565b90613b80565b50508b60005260028152610e09604460406000209a8401938b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffff00000000000000000000000000000000000000000000000000000000610da588612d85565b92549260e01b169116178c55019968ffffffffffffffffff9788610dc88d612d96565b1691019075ffffffffffffffffffffffffffffffffffffffffffff75ffffffffffffffffffffffffffffffffffffffffffff1983549260b01b169116179055565b6006610e1488612ca5565b9152876040600020911665ffffffffffff19825416179055612d85565b95612d96565b92612ca5565b9163ffffffff60405195168552168d840152166040820152a201610ca1565b50610d3760038b610e6c8c612ca5565b1611159050610d2e565b6064886007886040519262461bcd60e51b8452600484015282015266047524f55505f360cc1b6044820152fd5b84634e487b7160e01b60005260326004526000fd5b610ecf9150883d8a1161084a5761083c8183612b00565b8b610c8a565b3461023a5760a036600319011261023a57608036602319011261023a5760046001600160a01b03602081600154166040519384809263481c6a7560e01b82525afa801561085157610f30926000916114525750163314612bff565b60643565ffffffffffff811614158061023a57600165ffffffffffff60643516101580611439575b610f6190612cb8565b6004356000526003602052604060002090610f7d600435614039565b90610f866140e1565b91610f9383600435613959565b505060243561ffff81161415928361023a5761ffff821661ffff60243516036110e3575b50506044359263ffffffff841680940361023a576001019081549061023a578379ffffffffffffffffffffffffffffffffffffffffffff000000007fffffffffffff000000000000000000000000000000000000000000000000000060643560d01b169216171790556084359068ffffffffffffffffff82169182810361023a5760043560005260056020526040600020907fffffffffff000000000000000000ffffffffffffffffffffffffffffffffffff7affffffffffffffffff00000000000000000000000000000000000083549260901b16911617905561023a5760405191825265ffffffffffff606435166020830152604082015261ffff60243516907f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4606060043592a3005b9092506110f08184613b80565b50506110fe81602435613b80565b505061113761112f611111600435613f1f565b919061111d8188612e5e565b6111278388612f73565b6024356130b3565b6024356131c5565b61ffff60243516600052600260205267ffffffffffffffff61115c6040600020612d12565b61ffff851660005260026020526111766040600020612d12565b61118865ffffffffffff851115612ddf565b82608081606085015116930151169083608081606084015116920151169160018901549365ffffffffffff604051976111c089612a56565b61ffff60243516895216602088015260408701526060860152608085015260a0840152818160201c1660c084015260601c1660e0820152600061010082015283549068010000000000000000821015611423576001820180865582101561140d5767ffffffffffffffff6101006113d1938760005260206000209060011b0192600161ffff8251169480549567ffffffffffff0000602085015160101b16908619809816171781556112a58560408501511682906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b6060830151815467ffffffffffffffff60801b191690861660801b67ffffffffffffffff60801b161781556080830151815477ffffffffffffffffffffffffffffffffffffffffffffffff1690861660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff19161781555b01938360a083015116908554161784556113638360c08301511685906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b60e0810151845467ffffffffffffffff60801b191690841660801b67ffffffffffffffff60801b161784550151825477ffffffffffffffffffffffffffffffffffffffffffffffff16911660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916179055565b60009161ffff806024351691166004357f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468600080a48380610fb7565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b5060009050600360643565ffffffffffff161115610f58565b61146b915060203d60201161084a5761083c8183612b00565b83610c8a565b3461023a5761012036600319011261023a5760405161148f81612a56565b67ffffffffffffffff600435818116810361023a578252602435908116810361023a5760208201526044356040820152606435606082015260843563ffffffff8116810361023a57608082015260a43560a082015260c43560c082015260e43568ffffffffffffffffff8116810361023a5760e08201526101043565ffffffffffff8116810361023a5781610aaf91610100610adc9401526133d5565b3461023a57608036600319011261023a57611545612b3a565b606036602319011261023a576001600160a01b0390816001541660405192839163481c6a7560e01b835282600460209687935afa8015610851576115939260009161171f5750163314612bff565b61ffff81169182156116f1576064359165ffffffffffff831680931415908161023a576001841015806116e2575b90610d376115ce92612cb8565b505083600052600282526040600020926024359163ffffffff83169283810361023a577bffffffffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffff0000000000000000000000000000000000000000000000000000000087549260e01b1691161785556044359468ffffffffffffffffff861680960361023a57600101805475ffffffffffffffffffffffffffffffffffffffffffff1660b087901b75ffffffffffffffffffffffffffffffffffffffffffff191617905561023a577ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681938360066060955260406000208365ffffffffffff198254161790556040519384528301526040820152a2005b506000915060038411156115c1565b6064906040519062461bcd60e51b825260048201526007602482015266047524f55505f360cc1b6044820152fd5b6117369150853d871161084a5761083c8183612b00565b85610c8a565b3461023a576001600160a01b0361175236612bb6565b92909116600052600460205260406000209060005260205260406000209060005260205260806040600020546040519067ffffffffffffffff80821683528160401c16602083015265ffffffffffff81841c16604083015260b01c6060820152f35b3461023a57602036600319011261023a5760206117d2600435614039565b61ffff60405191168152f35b3461023a57604036600319011261023a57610adc610aaf602435600435613899565b3461023a5761180e36612bb6565b916118176140bc565b506040519061182582612aab565b6000825260006040602093828582015201526001600160a01b03809116908160005260048352604060002084600052835260406000208560005283526040600020936040519461187486612a73565b549167ffffffffffffffff8084168752858701818560401c168152604088019265ffffffffffff94858760801c16855260646060988993848d019960b01c8a52600154166040519d8e9485937f5ed5804e0000000000000000000000000000000000000000000000000000000085526004850152602484015260448301525afa9889156108515760009961194f575b509269ffffffffffffffffffff928260e09a979560409997948a519b51168b525116868a01525116868801525116908501528151608085015281015160a08401520151151560c0820152f35b969491985094928387813d83116119ba575b61196b8183612b00565b8101031261023a57604080519761198189612aab565b8051895286810151878a0152015192831515840361023a57604088019390935295979395929490939069ffffffffffffffffffff611903565b503d611961565b3461023a57606036600319011261023a5760206119dc612b60565b6119ea602435600435613899565b50909115611a0657505b67ffffffffffffffff60405191168152f35b90506119f4565b3461023a5760e036600319011261023a576001600160a01b038060015416611a33613efa565b9160c4359160a435611a43613f09565b94602435926044359480604051987f58f796bc000000000000000000000000000000000000000000000000000000008a521660048901528460248901528560448901528360648901526020978881608481865afa801561085157600090611c3b575b611af79150611af1611ab5613f09565b611abd613efa565b8560405192611acb84612a8f565b168252898d8301528a6040830152151560608201528760808201528a60a0820152613ca6565b906135a5565b95611b00613f09565b95611b09613efa565b92604051977ff6c50efe00000000000000000000000000000000000000000000000000000000895216600488015260248701526044860152151560648501528260848501528560a4850152868460c481845afa8015610851578794600091611c07575b5060c493949560405197889687957f6bcbe86000000000000000000000000000000000000000000000000000000000875260643560048801521515602487015260448601526064850152608484015260a48301525afa90811561085157600091611bda575b50604051908152f35b90508181813d8311611c00575b611bf18183612b00565b8101031261023a575182611bd1565b503d611be7565b8581959692503d8311611c34575b611c1f8183612b00565b8101031261023a5791518693929060c4611b6c565b503d611c15565b508881813d8311611c63575b611c518183612b00565b8101031261023a57611af79051611aa5565b503d611c47565b3461023a57604036600319011261023a5760043567ffffffffffffffff811161023a57611c9b903690600401612b6f565b67ffffffffffffffff6024351161023a5736602360243501121561023a5767ffffffffffffffff602435600401351161023a5736602480356004013560071b813501011161023a5760046001600160a01b03602081600154166040519384809263481c6a7560e01b82525afa801561085157611d219260009161223b5750163314612bff565b611d32602435600401358214612c4a565b60005b818110611d3e57005b611d49818385612c95565b35906024356004013581101561140d57600165ffffffffffff611d7560648460071b6024350101612ca5565b16101580612211575b611d8790612cb8565b8160005260036020526040600020611d9e83614039565b92611da76140e1565b93611db28583613959565b5050611dc660248560071b81350101612d03565b61ffff808316911603611f4d575b50600193507f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef4606061ffff60448660071b602435010187611e1482612d85565b960180547fffffffffffff0000000000000000000000000000000000000000000000000000611e4c60648b60071b6024350101612ca5565b60d01b169079ffffffffffffffffffffffffffffffffffffffffffff0000000063ffffffff809a1691161717905568ffffffffffffffffff60848860071b602435010196611e9988612d96565b8760005260056020526040600020907fffffffffff000000000000000000ffffffffffffffffffffffffffffffffffff7affffffffffffffffff00000000000000000000000000000000000083549260901b16911617905565ffffffffffff611f13611f0d60248c60071b81350101612d03565b94612d85565b98611f30611f2a60648d60071b6024350101612ca5565b91612d96565b926040519a168a521660208901521660408701521693a301611d35565b611f578582613b80565b5050611f7485611f6f60248760071b81350101612d03565b613b80565b5050611fc9611fb2611f8584613f1f565b9190611f918186612e5e565b611f9b8386612f73565b611fad60248960071b81350101612d03565b6130b3565b611fc460248760071b81350101612d03565b6131c5565b61ffff611fde60248660071b81350101612d03565b1660005260029485602052611ff66040600020612d12565b9561ffff831660005260205261200f6040600020612d12565b67ffffffffffffffff61202a60248860071b81350101612d03565b9261203d65ffffffffffff821115612ddf565b60609282848b01511690836080809c015116848c818885015116930151169265ffffffffffff60018c01549561ffff6040519a6120798c612a56565b168a521660208901526040880152858701528a86015260a0850152818160201c1660c0850152821c1660e08301526000610100830152845468010000000000000000811015611423576001810180875581101561140d576101006121cc936001809a61131667ffffffffffffffff80968c600052602060002090851b01926121888261ffff8851169a86549b67ffffffffffff000060208b015160101b16908319809e161717875561215e8260408b01511688906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b880151865467ffffffffffffffff60801b1916911660801b67ffffffffffffffff60801b16178555565b850151835477ffffffffffffffffffffffffffffffffffffffffffffffff16911660c01b77ffffffffffffffffffffffffffffffffffffffffffffffff1916178255565b61ffff806121e260248760071b81350101612d03565b169116827f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d468600080a486611dd4565b50611d87600365ffffffffffff61223160648560071b6024350101612ca5565b1611159050611d7e565b611736915060203d60201161084a5761083c8183612b00565b3461023a57602036600319011261023a576040612272600435613f1f565b82519182526020820152f35b3461023a57604036600319011261023a576001600160a01b0360043581811680820361023a5760243592831680930361023a576000549060ff8260081c16159182809361249b575b8015612484575b1561241a5760ff19811660011760005582612408575b501515806123ff575b156123bb5775ffffffffffffffffffffffffffffffffffffffff00006000549260101b1692837fffffffffffffffffffff0000000000000000000000000000000000000000ffff8416176000557fffffffffffffffffffffffff0000000000000000000000000000000000000000600154161760015561236857005b7fffffffffffffffffffff000000000000000000000000000000000000000000ff16176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b606460405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f504152414d5300000000000000000000000000000000000000006044820152fd5b508215156122ec565b61ffff191661010117600055846122e3565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156122cd5750600160ff8216146122cd565b50600160ff8216106122c6565b3461023a57602036600319011261023a5761ffff6124c4612b3a565b16600052600260205261010060406000208054906002600182015491015490604051926001600160701b0380821685528160701c16602085015260e01c604084015267ffffffffffffffff80821660608501528160401c16608084015265ffffffffffff8160801c1660a084015260b01c60c083015260e0820152f35b3461023a5760c036600319011261023a5760405161255e81612a8f565b612566612ba0565b815260243560208201526044356040820152606435801515810361023a57816125a59160606020940152608435608082015260a43560a0820152613ca6565b604051908152f35b3461023a5760208060031936011261023a5760043567ffffffffffffffff811161023a576125df903690600401612b6f565b906125e982612b22565b926125f76040519485612b00565b828452601f19918261260885612b22565b0160005b8181106127d257505061261e84612b22565b9361262c6040519586612b00565b80855261263881612b22565b858401940136853760005b8181106127555750505060405193849360408501604086528251809152836060870193019060005b8181106126b6575050508482038584015251808252908201929160005b82811061269757505050500390f35b835165ffffffffffff1685528695509381019392810192600101612688565b91959650919284610100826127456001948a5160e080916001600160701b03808251168552602082015116602085015263ffffffff604082015116604085015267ffffffffffffffff806060830151166060860152608082015116608085015265ffffffffffff60a08201511660a085015269ffffffffffffffffffff60c08201511660c08501520151910152565b019601910191879695939261266b565b60019061ffff979596978061276e610cb8848789612c95565b16600052600286526127836040600020612d12565b61278d8389613591565b526127988288613591565b506127a7610cb8838688612c95565b166000526006855265ffffffffffff604060002054166127c7828a613591565b520195949395612643565b83906127e09795969761407e565b828288010152019594939561260c565b3461023a57606036600319011261023a57602061280b612b3a565b6119ea612816612b60565b9160243590613a70565b3461023a57600036600319011261023a5760206001600160a01b0360005460101c16604051908152f35b3461023a57600036600319011261023a5760206001600160a01b0360015416604051908152f35b3461023a576101208060031936011261023a576024359067ffffffffffffffff9081831161023a573660238401121561023a578260040135906128b382612b22565b936128c16040519586612b00565b82855260209260248385880192028301019136831161023a57602401905b8282106129925750505050608060431936011261023a576040519261290384612a73565b604435838116810361023a578452606435838116810361023a578285015260843565ffffffffffff8116810361023a57604085015260a43569ffffffffffffffffffff8116810361023a57606085015260e43593841515850361023a5760609461297892610104359260c435916004356135cc565b929193908160405195168552169083015215156040820152f35b838236031261023a57604051906129a882612a56565b823561ffff8116810361023a578252858301359065ffffffffffff8216820361023a5782879283889501526129df60408601612b4b565b604082015260606129f1818701612b4b565b908201526080612a02818701612b4b565b9082015260a0612a13818701612b4b565b9082015260c0612a24818701612b4b565b90820152612a3460e08601612b4b565b60e0820152610100612a47818701612b4b565b908201528152019101906128df565b610120810190811067ffffffffffffffff82111761142357604052565b6080810190811067ffffffffffffffff82111761142357604052565b60c0810190811067ffffffffffffffff82111761142357604052565b6060810190811067ffffffffffffffff82111761142357604052565b60e0810190811067ffffffffffffffff82111761142357604052565b610100810190811067ffffffffffffffff82111761142357604052565b90601f8019910116810190811067ffffffffffffffff82111761142357604052565b67ffffffffffffffff81116114235760051b60200190565b6004359061ffff8216820361023a57565b359067ffffffffffffffff8216820361023a57565b60443590811515820361023a57565b9181601f8401121561023a5782359167ffffffffffffffff831161023a576020808501948460051b01011161023a57565b600435906001600160a01b038216820361023a57565b606090600319011261023a576004356001600160a01b038116810361023a57906024359060443590565b9081602091031261023a57516001600160a01b038116810361023a5790565b15612c0657565b606460405162461bcd60e51b815260206004820152600c60248201527f4d414e414745525f4f4e4c5900000000000000000000000000000000000000006044820152fd5b15612c5157565b606460405162461bcd60e51b815260206004820152600c60248201527f57524f4e475f4c454e47544800000000000000000000000000000000000000006044820152fd5b919081101561140d5760051b0190565b3565ffffffffffff8116810361023a5790565b15612cbf57565b606460405162461bcd60e51b815260206004820152600e60248201527f57524f4e475f4558504f4e454e540000000000000000000000000000000000006044820152fd5b3561ffff8116810361023a5790565b90604051612d1f81612ae3565b60e06002829480546001600160701b0380821686528160701c166020860152831c6040850152600181015467ffffffffffffffff80821660608701528160401c16608086015265ffffffffffff8160801c1660a086015260b01c60c08501520154910152565b3563ffffffff8116810361023a5790565b3568ffffffffffffffffff8116810361023a5790565b8181029291811591840414171561033f57565b8115612dc9570490565b634e487b7160e01b600052601260045260246000fd5b15612de657565b606460405162461bcd60e51b815260206004820152600860248201527f4f564552464c4f570000000000000000000000000000000000000000000000006044820152fd5b6001600160701b03918216908216039190821161033f57565b9190916001600160701b038080941691160191821161033f57565b61ffff16600091818352600260205260408320839183612ec9575b506060600193927f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233925490604051916001600160701b038092168352818116602084015260701c166040820152a4565b9091506402540be40090818102918183041490151715612f5f57606060019392670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339304906001600160701b0382612f2c8280951115612ddf565b8254911692612f468282168581111561075b578590612e2a565b16906001600160701b0319161781559250929350612e79565b602484634e487b7160e01b81526011600452fd5b61ffff6000911680825260026020526040822092829082612fdd575b5060607f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339184955490604051916001600160701b038092168352818116602084015260701c166040820152a4565b6402540be4008082029250811591830414171561309f576060670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339204936001600160701b03856130398280981115612ddf565b16909586957fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b61308d8454938460701c1686811160001461075b578690612e2a565b60701b16911617815595509150612f8f565b602483634e487b7160e01b81526011600452fd5b61ffff1690816000526002602052604060002060009183613121575b50917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db23360606001949385945490604051916001600160701b038092168352818116602084015260701c166040820152a4565b90916402540be400918281029281840414901517156131b15750917f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233606060019493670de0b6b3a7640000869504906001600160701b03826131868280951115612ddf565b169181549061319784828416612e43565b16906001600160701b0319161781559395509350506130cf565b80634e487b7160e01b602492526011600452fd5b91909161ffff60009116808252600260205260408220829482613233575b506060600194957f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db233925490604051916001600160701b038092168352818116602084015260701c166040820152a4565b909294506402540be400908181029181830414901517156132f157606060019495670de0b6b3a76400007f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339304946001600160701b03866132978280991115612ddf565b1691957fffffffff0000000000000000000000000000ffffffffffffffffffffffffffff6dffffffffffffffffffffffffffff60701b6132de858554948560701c16612e43565b60701b16911617815592509594506131e3565b602485634e487b7160e01b81526011600452fd5b9190820391821161033f57565b9080156133b25781156133ab5781806001146133a3576002146133925760208110610133831016604e8210600b8410161761338d57600190815b8082116133645750508160001904811161033f570290565b90928060001904811161033f57818416613384575b800292811c9061334c565b80920291613379565b900a90565b905060ff811161033f576001901b90565b505050600190565b5050600090565b5050600190565b91909167ffffffffffffffff8080941691160191821161033f57565b9060a082019182519260c082019384511161354d5760408201805160608401805180831097939190881561353c5750613412925051905190613305565b60e084019168ffffffffffffffffff9384845116151580613526575b6000901561351b5750613459916134489151905190613305565b63ffffffff60808701511690612dac565b926402540be4009182810292818404149015171561033f5761347d92511690612dbf565b6134a161010084019261349b65ffffffffffff938486511690613312565b90612dac565b915116906004821161033f576134c191670de0b6b3a76400000a90612dbf565b67ffffffffffffffff816134d88280941115612ddf565b1680928560001461350957828151165b95156134ff57602001516134fc92166133b9565b91565b6020915001511691565b61351682848351166133b9565b6134e8565b9450505050506134c1565b5065ffffffffffff61010087015116151561342e565b91505061354891613305565b613412565b606460405162461bcd60e51b815260206004820152600b60248201527f424c4f434b5f4f524445520000000000000000000000000000000000000000006044820152fd5b805182101561140d5760209160051b010190565b9190820180921161033f57565b67ffffffffffffffff918216908216039190821161033f57565b929195949390936135dd8486613591565b519365ffffffffffff908160208701511660408a01908382511611978051600019810190811161033f5783036136ce5750505050806136246136339261ffff875116613a70565b5084156136c757505b93613899565b5082156136c057505b925b841561366e575050906134fc9161366567ffffffffffffffff9182602089015116906135b2565b955116906135b2565b67ffffffffffffffff9196506136976134fc9493886000146136b35783604084015116906135b2565b96156136a85760c0015116906135b2565b60e0015116906135b2565b83606084015116906135b2565b905061363c565b905061362d565b916001919396508094500180931161033f5786926136eb91613591565b51938261374e575b505061374257801561372d5767ffffffffffffffff806080840151165b9282156137235760c00151165b9261363e565b60e001511661371d565b67ffffffffffffffff8060a084015116613710565b50600094508493915050565b80919250602085015116915116101538806136f3565b90815461377081612b22565b9260409361378085519182612b00565b828152809460208092019260005281600020906000935b8585106137a657505050505050565b60028460019284516137b781612a56565b865461ffff8116825265ffffffffffff8160101c168483015267ffffffffffffffff908181891c16888401526080918082841c16606085015260c091821c83850152878a0154809382821660a087015282828c1c16848701521c1660e08401521c610100820152815201930194019391613797565b9060405161383981612ac7565b60c06002829461384881613764565b8452600181015463ffffffff8116602086015267ffffffffffffffff808260201c1660408701528160601c16606086015265ffffffffffff8160a01c16608086015260d01c60a08501520154910152565b90613954918060005260036020526138b4604060002061382c565b6138bd82613f1f565b92909367ffffffffffffffff9485604085015116956060850151169463ffffffff6020860151169165ffffffffffff8060808801511695600052600560205260a068ffffffffffffffffff60406000205460901c169701511696604051986139248a612a56565b8952602089015260408801526060870152608086015260a085015260c084015260e08301526101008201526133d5565b909192565b917ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4926139868382613899565b509490859481968460005260036020526001604060002001926bffffffffffffffff0000000084546139c065ffffffffffff861115612ddf565b7fffffffffffff00000000000000000000000000000000000000000000ffffffff73ffffffffffffffff00000000000000000000000079ffffffffffff00000000000000000000000000000000000000008760a01b169560601b169116179160201b161717809255613a6b60405192839267ffffffffffffffff808360601c169260201c1690849160409194936060840195845267ffffffffffffffff809216602085015216910152565b0390a2565b61ffff90929192166000928184526002602052613a8f60408520612d12565b9167ffffffffffffffff928360608201511693608082015116926001600160701b039687835116670de0b6b3a764000098898202918083048b149015171561309f5760208501511689810299818b041490151715613b6c57613954979863ffffffff60408601511692604065ffffffffffff9168ffffffffffffffffff60c08460a08b0151169901511698815260066020522054169660405198613b328a612a56565b895260208901526402540be4008092046040890152046060870152608086015260a085015260c084015260e08301526101008201526133d5565b602482634e487b7160e01b81526011600452fd5b917fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e613bac8385613a70565b509190938294613a6b61ffff82981694856000526002602052613c0460016040600020019182906fffffffffffffffff0000000000000000196fffffffffffffffff000000000000000083549260401b169116179055565b805467ffffffffffffffff191667ffffffffffffffff938416178155613c7465ffffffffffff613c3681871115612ddf565b825475ffffffffffff00000000000000000000000000000000191690861660801b75ffffffffffff0000000000000000000000000000000016178255565b546040805194855267ffffffffffffffff8483168116602087015291811c909316169183019190915281906060820190565b90600080926001600160a01b0381511684526004936020858152604080832091808501928351855281528184208286015185528152818420825190613cea82612a73565b549067ffffffffffffffff9485831682528583861c168483015284820165ffffffffffff94858560801c16825260609460b01c858501528251895260038152613d34878a20613764565b95613d3d6140e1565b978a815191613d4b83612a56565b81835281858401528201528a878201528a60808201528a60a08201528a60c08201528a60e08201528a610100820152928751158015613ed4575b508751159182938315613ec0575b505050613e58575b50508396959651805b613dde575b505050505050505060649293506402540be40091613dd48260a06080613dd995015191015190612dac565b612dac565b040490565b90919293949596986000198201918211613e455790613e2b8392613e13898c898f9c9b9a999851910151151590888b886135cc565b9d91908083168284161115613e3e57505b16906135a5565b99613e395795969580613da4565b613da9565b9050613e24565b60248860118e634e487b7160e01b835252fd5b87929a50600014613e9d5750613e8d8951613e7987868c0151151592613899565b50909115613e9657505b82845116906135b2565b16973880613d9b565b9050613e83565b88840151613e8d91839115613eb65760c0015116613e83565b60e0015116613e83565b819293508501511691511610388080613d93565b909350613ee657818701519238613d85565b5060248960328f634e487b7160e01b835252fd5b608435801515810361023a5790565b6004356001600160a01b038116810361023a5790565b9060006001600160a01b03815460101c16604051917f28daca2100000000000000000000000000000000000000000000000000000000948584528060048501528160248501526020958685604481875afa94851561402e57908792918496613ff6575b50604490604051958693849283526004830152600160248301525afa948515613fe9578195613fb3575b5050509190565b909180939550813d8311613fe2575b613fcc8183612b00565b81010312613fdf57505191388080613fac565b80fd5b503d613fc2565b50604051903d90823e3d90fd5b838193949297503d8311614027575b61400f8183612b00565b810103126140235751938691906044613f82565b8280fd5b503d614005565b6040513d85823e3d90fd5b6000908152600360205261404f60408220613764565b8051908161405c57505090565b600019820192909183116131b1575061ffff9161407891613591565b51511690565b6040519061408b82612ae3565b8160e06000918281528260208201528260408201528260608201528260808201528260a08201528260c08201520152565b604051906140c982612a73565b60006060838281528260208201528260408201520152565b61a4b146148015614165575b6140f5574390565b6040517fa3b1b31d00000000000000000000000000000000000000000000000000000000815260208160048160645afa90811561085157600091614137575090565b906020823d821161415d575b8161415060209383612b00565b81010312613fdf57505190565b3d9150614143565b5062066eed46146140ed56fea264697066735822122046dead4208d42923518f1cadcbb7a62dd9bd20e40e4ccff30dbf96c61c545a6064736f6c63430008140033",
  "libraries": {},
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22504,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 22507,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9651,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)21703"
      },
      {
        "astId": 9654,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairInfos",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GNSPairInfosInterfaceV6)20389"
      },
      {
        "astId": 9659,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groups",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(Group)20032_storage)"
      },
      {
        "astId": 9664,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pair)20006_storage)"
      },
      {
        "astId": 9673,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "initialAccFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage)))"
      },
      {
        "astId": 9678,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "pairOis",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PairOi)20015_storage)"
      },
      {
        "astId": 9682,
        "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
        "label": "groupFeeExponents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint48)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PairGroup)19989_storage)dyn_storage": {
        "base": "t_struct(PairGroup)19989_storage",
        "encoding": "dynamic_array",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSPairInfosInterfaceV6)20389": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)21703": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage))"
      },
      "t_mapping(t_uint16,t_struct(Group)20032_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct GNSBorrowingFeesInterfaceV6_4.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)20032_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage)"
      },
      "t_mapping(t_uint256,t_struct(InitialAccFees)20041_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(InitialAccFees)20041_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)20006_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)20006_storage"
      },
      "t_mapping(t_uint256,t_struct(PairOi)20015_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GNSBorrowingFeesInterfaceV6_4.PairOi)",
        "numberOfBytes": "32",
        "value": "t_struct(PairOi)20015_storage"
      },
      "t_mapping(t_uint256,t_uint48)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_struct(Group)20032_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Group",
        "members": [
          {
            "astId": 20017,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 20019,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "oiShort",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 20021,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20023,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 20025,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 20027,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 20029,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "maxOi",
            "offset": 22,
            "slot": "1",
            "type": "t_uint80"
          },
          {
            "astId": 20031,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(InitialAccFees)20041_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.InitialAccFees",
        "members": [
          {
            "astId": 20034,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accPairFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20036,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accGroupFee",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 20038,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 16,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 20040,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 22,
            "slot": "0",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pair)20006_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.Pair",
        "members": [
          {
            "astId": 19993,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groups",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PairGroup)19989_storage)dyn_storage"
          },
          {
            "astId": 19995,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feePerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 19997,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeLong",
            "offset": 4,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 19999,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accFeeShort",
            "offset": 12,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 20001,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "accLastUpdatedBlock",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 20003,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "feeExponent",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 20005,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairGroup)19989_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairGroup",
        "members": [
          {
            "astId": 19972,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "groupIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 19974,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "block",
            "offset": 2,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 19976,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeLong",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 19978,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "initialAccFeeShort",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 19980,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeLong",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 19982,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "prevGroupAccFeeShort",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 19984,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeLong",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 19986,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "pairAccFeeShort",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 19988,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PairOi)20015_storage": {
        "encoding": "inplace",
        "label": "struct GNSBorrowingFeesInterfaceV6_4.PairOi",
        "members": [
          {
            "astId": 20008,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 20010,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "short",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 20012,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "max",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 20014,
            "contract": "contracts/contracts/GNSBorrowingFeesV6_4.sol:GNSBorrowingFeesV6_4",
            "label": "_placeholder",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}