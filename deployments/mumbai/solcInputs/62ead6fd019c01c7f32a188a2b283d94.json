{
  "language": "Solidity",
  "sources": {
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n        // Cannot overflow because denominator != 0\n        uint256 twos;\n        assembly {\n            twos := and(add(not(denominator), 1), denominator)\n        }\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n            prod0 := or(prod0, mul(prod1, twos))\n        }\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv;\n\n        assembly {\n            inv := xor(mul(3, denominator), 2)\n        }\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        assembly {\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**8\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**16\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**32\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**64\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**128\n            inv := mul(inv, sub(2, mul(denominator, inv))) // inverse mod 2**256\n        }\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        assembly {\n            result := mul(prod0, inv)\n        }\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            require(absTick <= uint256(uint24(MAX_TICK)), 'T');\n\n            uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {     \n            // second inequality must be < because the price can never reach the price at the max tick\n            require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/Chainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CBORChainlink} from \"./vendor/CBORChainlink.sol\";\nimport {BufferChainlink} from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  ) internal pure returns (Chainlink.Request memory) {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(Request memory self, bytes memory data) internal pure {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(Request memory self, string memory key, string memory value) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(Request memory self, string memory key, bytes memory value) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(Request memory self, string memory key, int256 value) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(Request memory self, string memory key, uint256 value) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(Request memory self, string memory key, string[] memory values) internal pure {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ChainlinkClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./shared/interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/ChainlinkRequestInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport {ENSResolver as ENSResolver_Chainlink} from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\nabstract contract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 internal constant LINK_DIVISIBILITY = 10 ** 18;\n  uint256 private constant AMOUNT_OVERRIDE = 0;\n  address private constant SENDER_OVERRIDE = address(0);\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private s_ens;\n  bytes32 private s_ensNode;\n  LinkTokenInterface private s_link;\n  OperatorInterface private s_oracle;\n  uint256 private s_requestCount = 1;\n  mapping(bytes32 => address) private s_pendingRequests;\n\n  event ChainlinkRequested(bytes32 indexed id);\n  event ChainlinkFulfilled(bytes32 indexed id);\n  event ChainlinkCancelled(bytes32 indexed id);\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddr address to operate the callback on\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddr,\n    bytes4 callbackFunctionSignature\n  ) internal pure returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildOperatorRequest(\n    bytes32 specId,\n    bytes4 callbackFunctionSignature\n  ) internal view returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(specId, address(this), callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      ChainlinkRequestInterface.oracleRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      address(this),\n      req.callbackFunctionId,\n      nonce,\n      ORACLE_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      OperatorInterface.operatorRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackFunctionId,\n      nonce,\n      OPERATOR_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param nonce used to generate the request ID\n   * @param payment The amount of LINK to send for the request\n   * @param encodedRequest data encoded for request type specific format\n   * @return requestId The request ID\n   */\n  function _rawRequest(\n    address oracleAddress,\n    uint256 nonce,\n    uint256 payment,\n    bytes memory encodedRequest\n  ) private returns (bytes32 requestId) {\n    requestId = keccak256(abi.encodePacked(this, nonce));\n    s_pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \"unable to transferAndCall to oracle\");\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  ) internal {\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\n    delete s_pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice the next request count to be used in generating a nonce\n   * @dev starts at 1 in order to ensure consistent gas cost\n   * @return returns the next request count to be used in a nonce\n   */\n  function getNextRequestCount() internal view returns (uint256) {\n    return s_requestCount;\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(address oracleAddress) internal {\n    s_oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(address linkAddress) internal {\n    s_link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() internal {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress() internal view returns (address) {\n    return address(s_link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress() internal view returns (address) {\n    return address(s_oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\n    s_pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\n    s_ens = ENSInterface(ensAddress);\n    s_ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS() internal {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(\n    bytes32 requestId\n  )\n    internal\n    recordChainlinkFulfillment(requestId) // solhint-disable-next-line no-empty-blocks\n  {}\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\n    require(msg.sender == s_pendingRequests[requestId], \"Source must be the oracle of the request\");\n    delete s_pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 requestId) {\n    require(s_pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ENSInterface {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./ChainlinkRequestInterface.sol\";\n\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\n  function operatorRequest(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  ) external returns (bool);\n\n  function ownerTransferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\n\n  function getAuthorizedSenders() external returns (address[] memory);\n\n  function setAuthorizedSenders(address[] calldata senders) external;\n\n  function getForwarder() external returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  ) external returns (bool);\n\n  function isAuthorizedSender(address node) external view returns (bool);\n\n  function withdraw(address recipient, uint256 amount) external;\n\n  function withdrawable() external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface PointerInterface {\n  function getAddress() external view returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary BufferChainlink {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    unchecked {\n      uint256 mask = (256**(32 - len)) - 1;\n      assembly {\n        let srcpart := and(mload(src), not(mask))\n        let destpart := and(mload(dest), mask)\n        mstore(dest, or(destpart, srcpart))\n      }\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    unchecked {\n      uint256 mask = (256**len) - 1;\n      // Right-align data\n      data = data >> (8 * (32 - len));\n      assembly {\n        // Memory address of the buffer data\n        let bufptr := mload(buf)\n        // Address = buffer address + sizeof(buffer length) + off + len\n        let dest := add(add(bufptr, off), len)\n        mstore(dest, or(and(mload(dest), not(mask)), data))\n        // Update buffer length if we extended it\n        if gt(add(off, len), mload(bufptr)) {\n          mstore(bufptr, add(off, len))\n        }\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = (256**len) - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.19;\n\nimport {BufferChainlink} from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if (value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if (value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if (value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n    if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n    }\n  }\n\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, uint(value));\n    } else if(value >= 0) {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\n    }\n  }\n\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n    buf.append(value);\n  }\n\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(value));\n  }\n\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\n  }\n\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n    buf.append(bytes(value));\n  }\n\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSResolver {\n  function addr(bytes32 node) public view virtual returns (address);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}"
    },
    "contracts/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}"
    },
    "contracts/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}"
    },
    "contracts/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./IBeacon.sol\";\nimport \"../access/Ownable.sol\";\nimport \"../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}"
    },
    "contracts/contracts/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}"
    },
    "contracts/contracts/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}"
    },
    "contracts/contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../extensions/IERC20Metadata.sol\";\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/contracts/ERC20Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Capped.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./ERC20.sol\";\n\n/**\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n */\nabstract contract ERC20Capped is ERC20 {\n    uint256 private immutable _cap;\n\n    /**\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint256 cap_) {\n        require(cap_ > 0, \"ERC20Capped: cap is 0\");\n        _cap = cap_;\n    }\n\n    /**\n     * @dev Returns the cap on the token's total supply.\n     */\n    function cap() public view virtual returns (uint256) {\n        return _cap;\n    }\n\n    /**\n     * @dev See {ERC20-_mint}.\n     */\n    function _mint(address account, uint256 amount) internal virtual override {\n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\");\n        super._mint(account, amount);\n    }\n}"
    },
    "contracts/contracts/GFarmTradingStorageV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/TokenInterfaceV5.sol\";\nimport \"../interfaces/AggregatorInterfaceV5.sol\";\nimport \"../interfaces/PoolInterfaceV5.sol\";\nimport \"../interfaces/PausableInterfaceV5.sol\";\nimport \"../interfaces/NftInterfaceV5.sol\";\n\ncontract GFarmTradingStorageV5 {\n\n    // Constants\n    uint public constant PRECISION = 1e10;\n    bytes32 public constant MINTER_ROLE = 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\n    TokenInterfaceV5 public constant dai = TokenInterfaceV5(0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063);\n    TokenInterfaceV5 public constant linkErc677 = TokenInterfaceV5(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\n\n    // Contracts (updatable)\n    AggregatorInterfaceV5 public priceAggregator;\n    PoolInterfaceV5 public pool;\n    PausableInterfaceV5 public trading;\n    PausableInterfaceV5 public callbacks;\n    TokenInterfaceV5 public token = TokenInterfaceV5(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\n    NftInterfaceV5[5] public nfts = [\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\n    ];\n    address public vault;\n    address public tokenDaiRouter;\n\n    // Trading variables\n    uint public maxTradesPerPair = 3;\n    uint public maxTradesPerBlock = 5;\n    uint public maxPendingMarketOrders = 5;\n    uint public maxGainP = 900;                          // %\n    uint public maxSlP = 80;                             // %\n    uint public defaultLeverageUnlocked = 50;            // x\n    uint public nftSuccessTimelock = 50;                 // 50 blocks\n    uint[5] public spreadReductionsP = [15,20,25,30,35]; // %\n\n    // Gov & dev addresses (updatable)\n    address public gov = 0xC66FbE50Dd33c9AAdd65707F7088D597C86fE00F;\n    address public dev = 0xd39A38bD2D2d552f3908ff698a5530aa397fb92d;\n\n    // Gov & dev fees\n    uint public devFeesToken;   // 1e18\n    uint public devFeesDai;     // 1e18\n    uint public govFeesToken;   // 1e18\n    uint public govFeesDai;     // 1e18\n\n    // Stats\n    uint public tokensBurned;   // 1e18\n    uint public tokensMinted;   // 1e18\n    uint public nftRewards;     // 1e18\n\n    // Enums\n    enum LimitOrder { TP, SL, LIQ, OPEN }\n\n    // Structs\n    struct Trader{\n        uint leverageUnlocked;\n        address referral;\n        uint referralRewardsTotal;  // 1e18\n    }\n    struct Trade{\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken;       // 1e18\n        uint positionSizeDai;       // 1e18\n        uint openPrice;             // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp;                    // PRECISION\n        uint sl;                    // PRECISION\n    }\n    struct TradeInfo{\n        uint tokenId;\n        uint tokenPriceDai;         // PRECISION\n        uint openInterestDai;       // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder{\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize;          // 1e18 (DAI or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp;                    // PRECISION (%)\n        uint sl;                    // PRECISION (%)\n        uint minPrice;              // PRECISION\n        uint maxPrice;              // PRECISION\n        uint block;\n        uint tokenId;               // index in supportedTokens\n    }\n    struct PendingMarketOrder{\n        Trade trade;\n        uint block;\n        uint wantedPrice;           // PRECISION\n        uint slippageP;             // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId;               // index in supportedTokens\n    }\n    struct PendingNftOrder{\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    // Supported tokens to open trades with\n    address[] public supportedTokens;\n\n    // User info mapping\n    mapping(address => Trader) public traders;\n\n    // Trades mappings\n    mapping(address => mapping(uint => mapping(uint => Trade))) public openTrades;\n    mapping(address => mapping(uint => mapping(uint => TradeInfo))) public openTradesInfo;\n    mapping(address => mapping(uint => uint)) public openTradesCount;\n\n    // Limit orders mappings\n    mapping(address => mapping(uint => mapping(uint => uint))) public openLimitOrderIds;\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\n    OpenLimitOrder[] public openLimitOrders;\n\n    // Pending orders mappings\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\n    mapping(address => uint[]) public pendingOrderIds;\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\n\n    // List of open trades & limit orders\n    mapping(uint => address[]) public pairTraders;\n    mapping(address => mapping(uint => uint)) public pairTradersId;\n\n    // Current and max open interests for each pair\n    mapping(uint => uint[3]) public openInterestDai; // 1e18 [long,short,max]\n\n    // Restrictions & Timelocks\n    mapping(uint => uint) public tradesPerBlock;\n    mapping(uint => uint) public nftLastSuccess;\n\n    // List of allowed contracts => can update storage + mint/burn tokens\n    mapping(address => bool) public isTradingContract;\n\n    // Events\n    event SupportedTokenAdded(address a);\n    event TradingContractAdded(address a);\n    event TradingContractRemoved(address a);\n    event AddressUpdated(string name, address a);\n    event NftsUpdated(NftInterfaceV5[5] nfts);\n    event NumberUpdated(string name,uint value);\n    event NumberUpdatedPair(string name,uint pairIndex,uint value);\n    event SpreadReductionsUpdated(uint[5]);\n\n    constructor() { }\n\n    // Modifiers\n    modifier onlyGov(){ require(msg.sender == gov); _; }\n    modifier onlyTrading(){ require(isTradingContract[msg.sender] && token.hasRole(MINTER_ROLE, msg.sender)); _; }\n\n    // Manage addresses\n    function setGov(address _gov) external onlyGov{\n        require(_gov != address(0));\n        gov = _gov;\n        emit AddressUpdated(\"gov\", _gov);\n    }\n    function setDev(address _dev) external onlyGov{\n        require(_dev != address(0));\n        dev = _dev;\n        emit AddressUpdated(\"dev\", _dev);\n    }\n    function updateToken(TokenInterfaceV5 _newToken) external onlyGov{\n        require(trading.isPaused() && callbacks.isPaused(), \"NOT_PAUSED\");\n        require(address(_newToken) != address(0));\n        token = _newToken;\n        emit AddressUpdated(\"token\", address(_newToken));\n    }\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov{\n        require(address(_nfts[0]) != address(0));\n        nfts = _nfts;\n        emit NftsUpdated(_nfts);\n    }\n    // Trading + callbacks contracts\n    function addTradingContract(address _trading) external onlyGov{\n        require(token.hasRole(MINTER_ROLE, _trading), \"NOT_MINTER\");\n        require(_trading != address(0));\n        isTradingContract[_trading] = true;\n        emit TradingContractAdded(_trading);\n    }\n    function removeTradingContract(address _trading) external onlyGov{\n        require(_trading != address(0));\n        isTradingContract[_trading] = false;\n        emit TradingContractRemoved(_trading);\n    }\n    function addSupportedToken(address _token) external onlyGov{\n        require(_token != address(0));\n        supportedTokens.push(_token);\n        emit SupportedTokenAdded(_token);\n    }\n    function setPriceAggregator(address _aggregator) external onlyGov{\n        require(_aggregator != address(0));\n        priceAggregator = AggregatorInterfaceV5(_aggregator);\n        emit AddressUpdated(\"priceAggregator\", _aggregator);\n    }\n    function setPool(address _pool) external onlyGov{\n        require(_pool != address(0));\n        pool = PoolInterfaceV5(_pool);\n        emit AddressUpdated(\"pool\", _pool);\n    }\n    function setVault(address _vault) external onlyGov{\n        require(_vault != address(0));\n        vault = _vault;\n        emit AddressUpdated(\"vault\", _vault);\n    }\n    function setTrading(address _trading) external onlyGov{\n        require(_trading != address(0));\n        trading = PausableInterfaceV5(_trading);\n        emit AddressUpdated(\"trading\", _trading);\n    }\n    function setCallbacks(address _callbacks) external onlyGov{\n        require(_callbacks != address(0));\n        callbacks = PausableInterfaceV5(_callbacks);\n        emit AddressUpdated(\"callbacks\", _callbacks);\n    }\n    function setTokenDaiRouter(address _tokenDaiRouter) external onlyGov{\n        require(_tokenDaiRouter != address(0));\n        tokenDaiRouter = _tokenDaiRouter;\n        emit AddressUpdated(\"tokenDaiRouter\", _tokenDaiRouter);\n    }\n\n    // Manage trading variables\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov{\n        require(_maxTradesPerBlock > 0);\n        maxTradesPerBlock = _maxTradesPerBlock;\n        emit NumberUpdated(\"maxTradesPerBlock\", _maxTradesPerBlock);\n    }\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov{\n        require(_maxTradesPerPair > 0);\n        maxTradesPerPair = _maxTradesPerPair;\n        emit NumberUpdated(\"maxTradesPerPair\", _maxTradesPerPair);\n    }\n    function setMaxPendingMarketOrders(uint _maxPendingMarketOrders) external onlyGov{\n        require(_maxPendingMarketOrders > 0);\n        maxPendingMarketOrders = _maxPendingMarketOrders;\n        emit NumberUpdated(\"maxPendingMarketOrders\", _maxPendingMarketOrders);\n    }\n    function setMaxGainP(uint _max) external onlyGov{\n        require(_max >= 300);\n        maxGainP = _max;\n        emit NumberUpdated(\"maxGainP\", _max);\n    }\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov{\n        require(_lev > 0);\n        defaultLeverageUnlocked = _lev;\n        emit NumberUpdated(\"defaultLeverageUnlocked\", _lev);\n    }\n    function setMaxSlP(uint _max) external onlyGov{\n        require(_max >= 50);\n        maxSlP = _max;\n        emit NumberUpdated(\"maxSlP\", _max);\n    }\n    function setNftSuccessTimelock(uint _blocks) external onlyGov{\n        nftSuccessTimelock = _blocks;\n        emit NumberUpdated(\"nftSuccessTimelock\", _blocks);\n    }\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov{\n        require(_r[0] > 0 && _r[1] > _r[0] && _r[2] > _r[1] && _r[3] > _r[2] && _r[4] > _r[3]);\n        spreadReductionsP = _r;\n        emit SpreadReductionsUpdated(_r);\n    }\n    function setMaxOpenInterestDai(uint _pairIndex, uint _newMaxOpenInterest) external onlyGov{\n        // Can set max open interest to 0 to pause trading on this pair only\n        openInterestDai[_pairIndex][2] = _newMaxOpenInterest;\n        emit NumberUpdatedPair(\"maxOpenInterestDai\", _pairIndex, _newMaxOpenInterest);\n    }\n\n    // Manage stored trades\n    function storeTrade(Trade memory _trade, TradeInfo memory _tradeInfo) external onlyTrading{\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\n\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\n        tradesPerBlock[block.number]++;\n\n        if(openTradesCount[_trade.trader][_trade.pairIndex] == 1){\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[_trade.pairIndex].length;\n            pairTraders[_trade.pairIndex].push(_trade.trader); \n        }\n\n        _tradeInfo.beingMarketClosed = false;\n        openTradesInfo[_trade.trader][_trade.pairIndex][_trade.index] = _tradeInfo;\n\n        updateOpenInterestDai(_trade.pairIndex, _tradeInfo.openInterestDai, true, _trade.buy);\n    }\n    function unregisterTrade(address trader, uint pairIndex, uint index) external onlyTrading{\n        Trade storage t = openTrades[trader][pairIndex][index];\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\n        if(t.leverage == 0){ return; }\n\n        updateOpenInterestDai(pairIndex, i.openInterestDai, false, t.buy);\n\n        if(openTradesCount[trader][pairIndex] == 1){\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\n            address[] storage p = pairTraders[pairIndex];\n\n            p[_pairTradersId] = p[p.length-1];\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\n            \n            delete pairTradersId[trader][pairIndex];\n            p.pop();\n        }\n\n        delete openTrades[trader][pairIndex][index];\n        delete openTradesInfo[trader][pairIndex][index];\n\n        openTradesCount[trader][pairIndex]--;\n        tradesPerBlock[block.number]++;\n    }\n\n    // Manage pending market orders\n    function storePendingMarketOrder(PendingMarketOrder memory _order, uint _id, bool _open) external onlyTrading{\n        pendingOrderIds[_order.trade.trader].push(_id);\n\n        reqID_pendingMarketOrder[_id] = _order;\n        reqID_pendingMarketOrder[_id].block = block.number;\n        \n        if(_open){\n            pendingMarketOpenCount[_order.trade.trader][_order.trade.pairIndex]++;\n        }else{\n            pendingMarketCloseCount[_order.trade.trader][_order.trade.pairIndex]++;\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][_order.trade.index].beingMarketClosed = true;\n        }\n    }\n    function unregisterPendingMarketOrder(uint _id, bool _open) external onlyTrading{\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\n\n        for(uint i = 0; i < orderIds.length; i++){\n            if(orderIds[i] == _id){\n                if(_open){ \n                    pendingMarketOpenCount[_order.trade.trader][_order.trade.pairIndex]--;\n                }else{\n                    pendingMarketCloseCount[_order.trade.trader][_order.trade.pairIndex]--;\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][_order.trade.index].beingMarketClosed = false;\n                }\n\n                orderIds[i] = orderIds[orderIds.length-1];\n                orderIds.pop();\n\n                delete reqID_pendingMarketOrder[_id];\n                return;\n            }\n        }\n    }\n\n    // Manage open interest\n    function updateOpenInterestDai(uint _pairIndex, uint _leveragedPosDai, bool _open, bool _long) private{\n        uint index = _long ? 0 : 1;\n        uint[3] storage o = openInterestDai[_pairIndex];\n        o[index] = _open ? o[index] + _leveragedPosDai : o[index] - _leveragedPosDai;\n    }\n\n    // Manage open limit orders\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading{\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\n        o.block = block.number;\n        openLimitOrders.push(o);\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] = openLimitOrders.length-1;\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\n    }\n    function updateOpenLimitOrder(OpenLimitOrder calldata _o) external onlyTrading{\n        if(!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)){ return; }\n        OpenLimitOrder storage o = openLimitOrders[openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]];\n        o.positionSize = _o.positionSize;\n        o.buy = _o.buy;\n        o.leverage = _o.leverage;\n        o.tp = _o.tp;\n        o.sl = _o.sl;\n        o.minPrice = _o.minPrice;\n        o.maxPrice = _o.maxPrice;\n        o.block = block.number;\n    }\n    function unregisterOpenLimitOrder(address _trader, uint _pairIndex, uint _index) external onlyTrading{\n        if(!hasOpenLimitOrder(_trader, _pairIndex, _index)){ return; }\n\n        // Copy last order to deleted order => update id of this limit order\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length-1];\n        openLimitOrderIds[openLimitOrders[id].trader][openLimitOrders[id].pairIndex][openLimitOrders[id].index] = id;\n\n        // Remove\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders.pop();\n\n        openLimitOrdersCount[_trader][_pairIndex]--;\n    }\n\n    // Manage NFT orders\n    function storePendingNftOrder(PendingNftOrder memory _nftOrder, uint _orderId) external onlyTrading{\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\n    }\n    function unregisterPendingNftOrder(uint _order) external onlyTrading{\n        delete reqID_pendingNftOrder[_order];\n    }\n\n    // Manage open trade\n    function updateSl(address _trader, uint _pairIndex, uint _index, uint _newSl) external onlyTrading{\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if(t.leverage == 0){ return; }\n        t.sl = _newSl;\n        i.slLastUpdated = block.number;\n    }\n    function updateTp(address _trader, uint _pairIndex, uint _index, uint _newTp) external onlyTrading{\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if(t.leverage == 0){ return; }\n        t.tp = _newTp;\n        i.tpLastUpdated = block.number;\n    }\n    function updateTrade(Trade memory _t) external onlyTrading{ // useful when partial adding/closing\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\n        if(t.leverage == 0){ return; }\n        t.initialPosToken = _t.initialPosToken;\n        t.positionSizeDai = _t.positionSizeDai;\n        t.openPrice = _t.openPrice;\n        t.leverage = _t.leverage;\n    }\n\n    // Manage referrals\n    function storeReferral(address _trader, address _referral) external onlyTrading{\n        Trader storage trader = traders[_trader];\n        trader.referral = _referral != address(0) && trader.referral == address(0) && _referral != _trader \n                        ? _referral : trader.referral;\n    }\n    function increaseReferralRewards(address _referral, uint _amount) external onlyTrading{ \n        traders[_referral].referralRewardsTotal += _amount; \n    }\n\n    // Manage rewards\n    function distributeLpRewards(uint _amount) external onlyTrading{ pool.increaseAccTokensPerLp(_amount); }\n    function increaseNftRewards(uint _nftId, uint _amount) external onlyTrading{\n        nftLastSuccess[_nftId] = block.number; \n        nftRewards += _amount; \n    }\n\n    // Unlock next leverage\n    function setLeverageUnlocked(address _trader, uint _newLeverage) external onlyTrading{\n        traders[_trader].leverageUnlocked = _newLeverage;\n    }\n\n    // Manage dev & gov fees\n    function handleDevGovFees(uint _pairIndex, uint _leveragedPositionSize, bool _dai, bool _fullFee) external onlyTrading returns(uint fee){\n        fee = _leveragedPositionSize * priceAggregator.openFeeP(_pairIndex) / PRECISION / 100;\n        if(!_fullFee){ fee /= 2; }\n\n        if(_dai){\n            govFeesDai += fee;\n            devFeesDai += fee;\n        }else{\n            govFeesToken += fee;\n            devFeesToken += fee;\n        }\n\n        fee *= 2;\n    }\n    function claimFees() external onlyGov{\n        token.mint(dev, devFeesToken);\n        token.mint(gov, govFeesToken);\n\n        tokensMinted += devFeesToken + govFeesToken;\n\n        dai.transfer(gov, govFeesDai);\n        dai.transfer(dev, devFeesDai);\n\n        devFeesToken = 0;\n        govFeesToken = 0;\n        devFeesDai = 0;\n        govFeesDai = 0;\n    }\n\n    // Manage tokens\n    function handleTokens(address _a, uint _amount, bool _mint) external onlyTrading{ \n        if(_mint){ token.mint(_a, _amount); tokensMinted += _amount; } \n        else { token.burn(_a, _amount); tokensBurned += _amount; } \n    }\n    function transferDai(address _from, address _to, uint _amount) external onlyTrading{ \n        if(_from == address(this)){\n            dai.transfer(_to, _amount); \n        }else{\n            dai.transferFrom(_from, _to, _amount); \n        }\n    }\n    function transferLinkToAggregator(address _from, uint _pairIndex, uint _leveragedPosDai) external onlyTrading{ \n        linkErc677.transferFrom(_from, address(priceAggregator), priceAggregator.linkFee(_pairIndex, _leveragedPosDai)); \n    }\n\n    // View utils functions\n    function firstEmptyTradeIndex(address trader, uint pairIndex) public view returns(uint index){\n        for(uint i = 0; i < maxTradesPerPair; i++){\n            if(openTrades[trader][pairIndex][i].leverage == 0){ index = i; break; }\n        }\n    }\n    function firstEmptyOpenLimitIndex(address trader, uint pairIndex) public view returns(uint index){\n        for(uint i = 0; i < maxTradesPerPair; i++){\n            if(!hasOpenLimitOrder(trader, pairIndex, i)){ index = i; break; }\n        }\n    }\n    function hasOpenLimitOrder(address trader, uint pairIndex, uint index) public view returns(bool){\n        if(openLimitOrders.length == 0){ return false; }\n        OpenLimitOrder storage o = openLimitOrders[openLimitOrderIds[trader][pairIndex][index]];\n        return o.trader == trader && o.pairIndex == pairIndex && o.index == index;\n    }\n\n    // Additional getters\n    function getReferral(address _trader) external view returns(address){ \n        return traders[_trader].referral; \n    }\n    function getLeverageUnlocked(address _trader) external view returns(uint){ \n        return traders[_trader].leverageUnlocked; \n    }\n    function pairTradersArray(uint _pairIndex) external view returns(address[] memory){ \n        return pairTraders[_pairIndex]; \n    }\n    function getPendingOrderIds(address _trader) external view returns(uint[] memory){ \n        return pendingOrderIds[_trader]; \n    }\n    function pendingOrderIdsCount(address _trader) external view returns(uint){ \n        return pendingOrderIds[_trader].length; \n    }\n    function getOpenLimitOrder(\n        address _trader, \n        uint _pairIndex,\n        uint _index\n    ) external view returns(OpenLimitOrder memory){ \n        require(hasOpenLimitOrder(_trader, _pairIndex, _index));\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]]; \n    }\n    function getOpenLimitOrders() external view returns(OpenLimitOrder[] memory){ \n        return openLimitOrders; \n    }\n    function getSupportedTokens() external view returns(address[] memory){ \n        return supportedTokens; \n    }\n    function getSpreadReductionsArray() external view returns(uint[5] memory){\n        return spreadReductionsP;\n    }\n}"
    },
    "contracts/contracts/GNS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// import { ERC20, ERC20Capped } from \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol\";\n// import { AccessControlEnumerable } from \"@openzeppelin/contracts/access/AccessControlEnumerable.sol\";\nimport \"./ERC20Capped.sol\";\nimport  \"./AccessControlEnumerable.sol\";\n\npragma solidity 0.8.20;\n\ncontract GainsNetworkToken is ERC20Capped, AccessControlEnumerable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant BURNER_ROLE = keccak256(\"BURNER_ROLE\");\n\n    bool public initialized = false;\n\n    constructor(address admin) ERC20Capped(100_000_000e18) ERC20(\"Gains Network\", \"GNS\") {\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\n    }\n\n    function setupRoles(\n        address tradingStorage,\n        address nftRewards,\n        address referralRewards,\n        address trading,\n        address callbacks,\n        address vault\n    ) external onlyRole(DEFAULT_ADMIN_ROLE){\n        require(tradingStorage != address(0) && nftRewards != address(0) && referralRewards != address(0)\n            && trading != address(0) && callbacks != address(0) && vault != address(0), \"WRONG_ADDRESSES\");\n        \n        require(initialized == false, \"INITIALIZED\");\n        initialized = true;\n\n        _setupRole(MINTER_ROLE, tradingStorage);\n        _setupRole(BURNER_ROLE, tradingStorage);\n\n        _setupRole(MINTER_ROLE, nftRewards);\n        _setupRole(MINTER_ROLE, referralRewards);\n        _setupRole(MINTER_ROLE, trading);\n        _setupRole(MINTER_ROLE, callbacks);\n        \n        _setupRole(MINTER_ROLE, vault);\n        _setupRole(BURNER_ROLE, vault);\n    }\n\n    // Mint tokens (called by our ecosystem contracts)\n    function mint(address to, uint amount) external onlyRole(MINTER_ROLE) {\n        _mint(to, amount);\n    }\n\n    // Burn tokens (called by our ecosystem contracts)\n    function burn(address from, uint amount) external onlyRole(BURNER_ROLE) {\n        _burn(from, amount);\n    }\n}"
    },
    "contracts/contracts/GNSBorrowingFeesV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../libraries/Initializable.sol\";\n\nimport \"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\nimport \"../interfaces/StorageInterfaceV5.sol\";\nimport \"../interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../libraries/ChainUtils.sol\";\n\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\n    // Constants\n    uint constant P_1 = 1e10;\n    uint constant P_2 = 1e40;\n\n    // Addresses\n    StorageInterfaceV5 public storageT;\n    GNSPairInfosInterfaceV6 public pairInfos;\n\n    // State\n    mapping(uint16 => Group) public groups;\n    mapping(uint => Pair) public pairs;\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees))) public initialAccFees;\n    mapping(uint => PairOi) public pairOis;\n    mapping(uint => uint48) public groupFeeExponents;\n\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external initializer {\n        require(address(_storageT) != address(0) && address(_pairInfos) != address(0), \"WRONG_PARAMS\");\n\n        storageT = _storageT;\n        pairInfos = _pairInfos;\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(msg.sender == pairInfos.manager(), \"MANAGER_ONLY\");\n        _;\n    }\n\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage pair params\n    function setPairParams(uint pairIndex, PairParams calldata value) external onlyManager {\n        _setPairParams(pairIndex, value);\n    }\n\n    function setPairParamsArray(uint[] calldata indices, PairParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setPairParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        Pair storage p = pairs[pairIndex];\n\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        _setPairPendingAccFees(pairIndex, currentBlock);\n\n        if (value.groupIndex != prevGroupIndex) {\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\n\n            (uint oiLong, uint oiShort) = getPairOpenInterestDai(pairIndex);\n\n            // Only remove OI from old group if old group is not 0\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\n\n            // Add OI to new group if it's not group 0 (even if old group is 0)\n            // So when we assign a pair to a group, it takes into account its OI\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\n            _setGroupOi(value.groupIndex, true, true, oiLong);\n            _setGroupOi(value.groupIndex, false, true, oiShort);\n\n            Group memory newGroup = groups[value.groupIndex];\n            Group memory prevGroup = groups[prevGroupIndex];\n\n            p.groups.push(\n                PairGroup(\n                    value.groupIndex,\n                    ChainUtils.getUint48BlockNumber(currentBlock),\n                    newGroup.accFeeLong,\n                    newGroup.accFeeShort,\n                    prevGroup.accFeeLong,\n                    prevGroup.accFeeShort,\n                    p.accFeeLong,\n                    p.accFeeShort,\n                    0 // placeholder\n                )\n            );\n\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\n        }\n\n        p.feePerBlock = value.feePerBlock;\n        p.feeExponent = value.feeExponent;\n        pairOis[pairIndex].max = value.maxOi;\n\n        emit PairParamsUpdated(pairIndex, value.groupIndex, value.feePerBlock, value.feeExponent, value.maxOi);\n    }\n\n    // Manage group params\n    function setGroupParams(uint16 groupIndex, GroupParams calldata value) external onlyManager {\n        _setGroupParams(groupIndex, value);\n    }\n\n    function setGroupParamsArray(uint16[] calldata indices, GroupParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setGroupParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setGroupParams(uint16 groupIndex, GroupParams calldata value) private {\n        require(groupIndex > 0, \"GROUP_0\");\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\n\n        Group storage g = groups[groupIndex];\n        g.feePerBlock = value.feePerBlock;\n        g.maxOi = uint80(value.maxOi);\n        groupFeeExponents[groupIndex] = value.feeExponent;\n\n        emit GroupUpdated(groupIndex, value.feePerBlock, value.maxOi, value.feeExponent);\n    }\n\n    // Group OI setter\n    function _setGroupOi(\n        uint16 groupIndex,\n        bool long,\n        bool increase,\n        uint amount // 1e18\n    ) private {\n        Group storage group = groups[groupIndex];\n        uint112 amountFinal;\n\n        if (groupIndex > 0) {\n            amount = (amount * P_1) / 1e18; // 1e10\n            require(amount <= type(uint112).max, \"OVERFLOW\");\n\n            amountFinal = uint112(amount);\n\n            if (long) {\n                group.oiLong = increase\n                    ? group.oiLong + amountFinal\n                    : group.oiLong - (group.oiLong > amountFinal ? amountFinal : group.oiLong);\n            } else {\n                group.oiShort = increase\n                    ? group.oiShort + amountFinal\n                    : group.oiShort - (group.oiShort > amountFinal ? amountFinal : group.oiShort);\n            }\n        }\n\n        emit GroupOiUpdated(groupIndex, long, increase, amountFinal, group.oiLong, group.oiShort);\n    }\n\n    // Acc fees getters for pairs and groups\n    function getPendingAccFees(\n        PendingAccFeesInput memory input\n    ) public pure returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta) {\n        require(input.currentBlock >= input.accLastUpdatedBlock, \"BLOCK_ORDER\");\n\n        bool moreShorts = input.oiLong < input.oiShort;\n        uint netOi = moreShorts ? input.oiShort - input.oiLong : input.oiLong - input.oiShort;\n\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\n                input.feePerBlock *\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) / (1e18 ** input.feeExponent)\n            : 0; // 1e10 (%)\n\n        require(_delta <= type(uint64).max, \"OVERFLOW\");\n        delta = uint64(_delta);\n\n        newAccFeeLong = moreShorts ? input.accFeeLong : input.accFeeLong + delta;\n        newAccFeeShort = moreShorts ? input.accFeeShort + delta : input.accFeeShort;\n    }\n\n    function getPairGroupAccFeesDeltas(\n        uint i,\n        PairGroup[] memory pairGroups,\n        InitialAccFees memory initialFees,\n        uint pairIndex,\n        bool long,\n        uint currentBlock\n    ) public view returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) {\n        PairGroup memory group = pairGroups[i];\n\n        beforeTradeOpen = group.block < initialFees.block;\n\n        if (i == pairGroups.length - 1) {\n            // Last active group\n            deltaGroup = getGroupPendingAccFee(group.groupIndex, currentBlock, long);\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\n        } else {\n            // Previous groups\n            PairGroup memory nextGroup = pairGroups[i + 1];\n\n            // If it's not the first group to be before the trade was opened then fee is 0\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\n                return (0, 0, beforeTradeOpen);\n            }\n\n            deltaGroup = long ? nextGroup.prevGroupAccFeeLong : nextGroup.prevGroupAccFeeShort;\n            deltaPair = long ? nextGroup.pairAccFeeLong : nextGroup.pairAccFeeShort;\n        }\n\n        if (beforeTradeOpen) {\n            deltaGroup -= initialFees.accGroupFee;\n            deltaPair -= initialFees.accPairFee;\n        } else {\n            deltaGroup -= (long ? group.initialAccFeeLong : group.initialAccFeeShort);\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\n        }\n    }\n\n    // Pair acc fees helpers\n    function getPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta) {\n        Pair memory pair = pairs[pairIndex];\n\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestDai(pairIndex);\n\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                pair.accFeeLong,\n                pair.accFeeShort,\n                pairOiLong,\n                pairOiShort,\n                pair.feePerBlock,\n                currentBlock,\n                pair.accLastUpdatedBlock,\n                pairOis[pairIndex].max,\n                pair.feeExponent\n            )\n        );\n    }\n\n    function getPairPendingAccFee(uint pairIndex, uint currentBlock, bool long) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n\n        Pair storage pair = pairs[pairIndex];\n\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit PairAccFeesUpdated(pairIndex, currentBlock, pair.accFeeLong, pair.accFeeShort);\n    }\n\n    // Group acc fees helpers\n    function getGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta) {\n        Group memory group = groups[groupIndex];\n\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                group.accFeeLong,\n                group.accFeeShort,\n                (uint(group.oiLong) * 1e18) / P_1,\n                (uint(group.oiShort) * 1e18) / P_1,\n                group.feePerBlock,\n                currentBlock,\n                group.accLastUpdatedBlock,\n                uint72(group.maxOi),\n                groupFeeExponents[groupIndex]\n            )\n        );\n    }\n\n    function getGroupPendingAccFee(\n        uint16 groupIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n\n        Group storage group = groups[groupIndex];\n\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit GroupAccFeesUpdated(groupIndex, currentBlock, group.accFeeLong, group.accFeeShort);\n    }\n\n    // Interaction with callbacks\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external override onlyCallbacks {\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        (uint64 pairAccFeeLong, uint64 pairAccFeeShort) = _setPairPendingAccFees(pairIndex, currentBlock);\n        (uint64 groupAccFeeLong, uint64 groupAccFeeShort) = _setGroupPendingAccFees(groupIndex, currentBlock);\n\n        _setGroupOi(groupIndex, long, open, positionSizeDai);\n\n        if (open) {\n            InitialAccFees memory initialFees = InitialAccFees(\n                long ? pairAccFeeLong : pairAccFeeShort,\n                long ? groupAccFeeLong : groupAccFeeShort,\n                ChainUtils.getUint48BlockNumber(currentBlock),\n                0 // placeholder\n            );\n\n            initialAccFees[trader][pairIndex][index] = initialFees;\n\n            emit TradeInitialAccFeesStored(trader, pairIndex, index, initialFees.accPairFee, initialFees.accGroupFee);\n        }\n\n        emit TradeActionHandled(trader, pairIndex, index, open, long, positionSizeDai);\n    }\n\n    // Important trade getters\n    function getTradeBorrowingFee(BorrowingFeeInput memory input) public view override returns (uint fee) {\n        InitialAccFees memory initialFees = initialAccFees[input.trader][input.pairIndex][input.index];\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\n\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        PairGroup memory firstPairGroup;\n        if (pairGroups.length > 0) {\n            firstPairGroup = pairGroups[0];\n        }\n\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\n        if (pairGroups.length == 0 || firstPairGroup.block > initialFees.block) {\n            fee = ((\n                pairGroups.length == 0\n                    ? getPairPendingAccFee(input.pairIndex, currentBlock, input.long)\n                    : (input.long ? firstPairGroup.pairAccFeeLong : firstPairGroup.pairAccFeeShort)\n            ) - initialFees.accPairFee);\n        }\n\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\n        for (uint i = pairGroups.length; i > 0; ) {\n            (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) = getPairGroupAccFeesDeltas(\n                i - 1,\n                pairGroups,\n                initialFees,\n                input.pairIndex,\n                input.long,\n                currentBlock\n            );\n\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\n\n            // Exit loop at first group before trade was open\n            if (beforeTradeOpen) break;\n            unchecked {\n                --i;\n            }\n        }\n\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (DAI)\n    }\n\n    function getTradeLiquidationPrice(LiqPriceInput calldata input) external view override returns (uint)  {\n        return\n            pairInfos.getTradeLiquidationPricePure(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(input.trader, input.pairIndex, input.index, input.collateral) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    // Public getters\n    function getPairOpenInterestDai(uint pairIndex) public view returns (uint, uint) {\n        return (storageT.openInterestDai(pairIndex, 0), storageT.openInterestDai(pairIndex, 1));\n    }\n\n    function getPairGroupIndex(uint pairIndex) public view returns (uint16 groupIndex) {\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\n        return pairGroups.length == 0 ? 0 : pairGroups[pairGroups.length - 1].groupIndex;\n    }\n\n    // External getters\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeDai // 1e18\n    ) external view override returns (bool) {\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\n        return (g.maxOi == 0) || ((long ? g.oiLong : g.oiShort) + (positionSizeDai * P_1) / 1e18 <= g.maxOi);\n    }\n\n    function getGroup(uint16 groupIndex) external view returns (Group memory, uint48) {\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\n    }\n\n    function getPair(uint pairIndex) external view returns (Pair memory, PairOi memory) {\n        return (pairs[pairIndex], pairOis[pairIndex]);\n    }\n\n    // TODO\n    // function getAllPairs() external view returns (Pair[] memory, PairOi[] memory) {\n    //     uint len = storageT.priceAggregator().pairsStorage().pairsCount();\n    //     Pair[] memory p = new Pair[](len);\n    //     PairOi[] memory pairOi = new PairOi[](len);\n\n    //     for (uint i; i < len; ) {\n    //         p[i] = pairs[i];\n    //         pairOi[i] = pairOis[i];\n    //         unchecked {\n    //             ++i;\n    //         }\n    //     }\n\n    //     return (p, pairOi);\n    // }\n\n    function getGroups(uint16[] calldata indices) external view returns (Group[] memory, uint48[] memory) {\n        Group[] memory g = new Group[](indices.length);\n        uint48[] memory e = new uint48[](indices.length);\n        uint len = indices.length;\n\n        for (uint i; i < len; ) {\n            g[i] = groups[indices[i]];\n            e[i] = groupFeeExponents[indices[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (g, e);\n    }\n\n    function getTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index\n    )\n        external\n        view\n        returns (InitialAccFees memory borrowingFees, GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees)\n    {\n        borrowingFees = initialAccFees[trader][pairIndex][index];\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\n    }\n\n    function getPairMaxOi(uint pairIndex) external view override returns (uint)  {\n        return pairOis[pairIndex].max;\n    }\n}"
    },
    "contracts/contracts/GNSOracleRewardsV6_4_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../libraries/Initializable.sol\";\n\nimport \"../libraries/ChainUtils.sol\";\nimport \"../interfaces/StorageInterfaceV5.sol\";\nimport \"../interfaces/IGNSOracle.sol\";\n\ncontract GNSOracleRewardsV6_4_1 is Initializable {\n    // Constants\n    // uint private constant CHAIN_ID_POLY = 137;\n    // uint private constant CHAIN_ID_MUMBAI = 80001;\n    // uint private constant CHAIN_ID_ARBI = 42161;\n\n    // address private constant NFT_REWARDS_OLD_POLY = 0x8103C0665A544201BBF606d90845d1B2D8005F1c;\n    // address private constant NFT_REWARDS_OLD_MUMBAI = 0xf7Ac400b45Bdd2E098FaCA3642bE4d01071BC73B;\n    // address private constant NFT_REWARDS_OLD_ARBI = 0xde5750071CacA8db173FC6543D23d0BCACACFEC3;\n\n    uint private constant MIN_TRIGGER_TIMEOUT = 1;\n\n    // Addresses (constant)\n    StorageInterfaceV5 public storageT;\n    // mapping(uint => address) public nftRewardsOldByChainId;\n\n    // Params (adjustable)\n    uint public triggerTimeout; // blocks\n    address[] public oracles; // oracles rewarded\n\n    // Custom data types\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterfaceV5.LimitOrder order;\n    }\n\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    // State\n    mapping(address => uint) public pendingRewardsGns;\n    mapping(address => mapping(uint => mapping(uint => mapping(StorageInterfaceV5.LimitOrder => uint))))\n        public triggeredLimits;\n    mapping(address => mapping(uint => mapping(uint => OpenLimitOrderType))) public openLimitOrderTypes;\n\n    bool public stateCopied;\n\n    // Events\n    // event OldLimitTypesCopied(address oldContract, uint start, uint end);\n    // event StateCopyDone();\n    event TriggerTimeoutUpdated(uint value);\n    event OraclesUpdated(uint oraclesCount);\n\n    event TriggeredFirst(TriggeredLimitId id);\n    event TriggerUnregistered(TriggeredLimitId id);\n    event TriggerRewarded(TriggeredLimitId id, uint rewardGns, uint rewardGnsPerOracle, uint oraclesCount);\n    event RewardsClaimed(address oracle, uint amountGns);\n    event OpenLimitOrderTypeSet(address trader, uint pairIndex, uint index, OpenLimitOrderType value);\n\n    function initialize(StorageInterfaceV5 _storageT, uint _triggerTimeout, uint _oraclesCount) external initializer {\n        require(\n            address(_storageT) != address(0) && _triggerTimeout >= MIN_TRIGGER_TIMEOUT && _oraclesCount > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        // nftRewardsOldByChainId[CHAIN_ID_POLY] = NFT_REWARDS_OLD_POLY;\n        // nftRewardsOldByChainId[CHAIN_ID_MUMBAI] = NFT_REWARDS_OLD_MUMBAI;\n        // nftRewardsOldByChainId[CHAIN_ID_ARBI] = NFT_REWARDS_OLD_ARBI;\n\n        storageT = _storageT;\n        triggerTimeout = _triggerTimeout;\n\n        _updateOracles(_oraclesCount);\n    }\n    \n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == storageT.trading(), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Copy limit order types from old nft rewards contract\n    // function copyOldLimitTypes(uint _start, uint _end) external onlyGov {\n    //     require(!stateCopied, \"COPY_DONE\");\n    //     require(_start <= _end, \"START_AFTER_END\");\n\n    //     address oldAddress = nftRewardsOldByChainId[block.chainid];\n    //     require(oldAddress != address(0), \"UNKNOWN_CHAIN\");\n\n    //     StorageInterfaceV5.OpenLimitOrder[] memory openLimitOrders = IStateCopyUtils(address(storageT))\n    //         .getOpenLimitOrders();\n\n    //     require(_start < openLimitOrders.length, \"START_TOO_BIG\");\n\n    //     if (_end >= openLimitOrders.length) {\n    //         _end = openLimitOrders.length - 1;\n    //     }\n\n    //     NftRewardsInterfaceV6_3_1 old = NftRewardsInterfaceV6_3_1(oldAddress);\n\n    //     for (uint i = _start; i <= _end; ) {\n    //         StorageInterfaceV5.OpenLimitOrder memory o = openLimitOrders[i];\n\n    //         openLimitOrderTypes[o.trader][o.pairIndex][o.index] = OpenLimitOrderType(\n    //             uint(old.openLimitOrderTypes(o.trader, o.pairIndex, o.index))\n    //         );\n\n    //         unchecked {\n    //             ++i;\n    //         }\n    //     }\n\n    //     emit OldLimitTypesCopied(oldAddress, _start, _end);\n    // }\n\n    // function setStateCopyAsDone() external onlyGov {\n    //     stateCopied = true;\n\n    //     emit StateCopyDone();\n    // }\n\n    // Manage params\n    function updateTriggerTimeout(uint _triggerTimeout) external onlyGov {\n        require(_triggerTimeout >= MIN_TRIGGER_TIMEOUT, \"BELOW_MIN\");\n\n        triggerTimeout = _triggerTimeout;\n\n        emit TriggerTimeoutUpdated(_triggerTimeout);\n    }\n\n    function _updateOracles(uint _oraclesCount) private {\n        require(_oraclesCount > 0, \"VALUE_ZERO\");\n\n        delete oracles;\n\n        for (uint i; i < _oraclesCount; ) {\n            require(address(storageT.priceAggregator()) != address(0), \"AGGREGATOR_MISSING\");\n            \n            oracles.push(storageT.priceAggregator().nodes(i));\n            unchecked {\n                ++i;\n            }\n        }\n\n        emit OraclesUpdated(_oraclesCount);\n    }\n\n    function updateOracles(uint _oraclesCount) external onlyGov {\n        _updateOracles(_oraclesCount);\n    }\n\n    // Triggers\n    function storeTrigger(TriggeredLimitId calldata _id) external onlyTrading {\n        triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order] = ChainUtils.getBlockNumber();\n\n        emit TriggeredFirst(_id);\n    }\n\n    function unregisterTrigger(TriggeredLimitId calldata _id) external onlyCallbacks {\n        delete triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n\n        emit TriggerUnregistered(_id);\n    }\n\n    // Distribute oracle rewards\n    function distributeOracleReward(TriggeredLimitId calldata _id, uint _reward) external onlyCallbacks {\n        require(triggered(_id), \"NOT_TRIGGERED\");\n\n        uint oraclesCount = oracles.length;\n        uint rewardPerOracle = _reward / oraclesCount;\n\n        for (uint i; i < oraclesCount; ) {\n            pendingRewardsGns[oracles[i]] += rewardPerOracle;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        storageT.handleTokens(address(this), _reward, true);\n\n        emit TriggerRewarded(_id, _reward, rewardPerOracle, oraclesCount);\n    }\n\n    // Claim oracle rewards\n    function claimRewards(address _oracle) external {\n        IGNSOracle _o = IGNSOracle(_oracle);\n\n        // msg.sender must either be the oracle owner or an authorized fulfiller\n        require(_o.owner() == msg.sender || _o.getAuthorizationStatus(msg.sender), \"NOT_AUTHORIZED\");\n\n        uint amountGns = pendingRewardsGns[_oracle];\n\n        pendingRewardsGns[_oracle] = 0;\n        storageT.token().transfer(msg.sender, amountGns);\n\n        emit RewardsClaimed(_oracle, amountGns);\n    }\n\n    // Manage open limit order types\n    function setOpenLimitOrderType(\n        address _trader,\n        uint _pairIndex,\n        uint _index,\n        OpenLimitOrderType _type\n    ) external onlyTrading {\n        openLimitOrderTypes[_trader][_pairIndex][_index] = _type;\n\n        emit OpenLimitOrderTypeSet(_trader, _pairIndex, _index, _type);\n    }\n\n    // Getters\n    function triggered(TriggeredLimitId calldata _id) public view returns (bool) {\n        return triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order] > 0;\n    }\n\n    function timedOut(TriggeredLimitId calldata _id) external view returns (bool) {\n        uint triggerBlock = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n\n        return triggerBlock > 0 && ChainUtils.getBlockNumber() - triggerBlock >= triggerTimeout;\n    }\n\n    function getOracles() external view returns (address[] memory) {\n        return oracles;\n    }\n}"
    },
    "contracts/contracts/GNSPairInfosV6_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterfaceV5.sol\";\n\ncontract GNSPairInfosV6_1 {\n    // Addresses\n    StorageInterfaceV5 immutable storageT;\n    address public manager;\n\n    // Constant parameters\n    uint constant PRECISION = 1e10;     // 10 decimals\n    uint constant LIQ_THRESHOLD_P = 90; // -90% (of collateral)\n\n    // Adjustable parameters\n    uint public maxNegativePnlOnOpenP = 40 * PRECISION; // PRECISION (%)\n\n    // Pair parameters\n    struct PairParams{\n        uint onePercentDepthAbove; // DAI\n        uint onePercentDepthBelow; // DAI\n        uint rolloverFeePerBlockP; // PRECISION (%)\n        uint fundingFeePerBlockP;  // PRECISION (%)\n    }\n\n    mapping(uint => PairParams) public pairParams;\n\n    // Pair acc funding fees\n    struct PairFundingFees{\n        int accPerOiLong;  // 1e18 (DAI)\n        int accPerOiShort; // 1e18 (DAI)\n        uint lastUpdateBlock;\n    }\n\n    mapping(uint => PairFundingFees) public pairFundingFees;\n\n    // Pair acc rollover fees\n    struct PairRolloverFees{\n        uint accPerCollateral; // 1e18 (DAI)\n        uint lastUpdateBlock;\n    }\n\n    mapping(uint => PairRolloverFees) public pairRolloverFees;\n\n    // Trade initial acc fees\n    struct TradeInitialAccFees{\n        uint rollover; // 1e18 (DAI)\n        int funding;   // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    mapping(\n        address => mapping(\n            uint => mapping(\n                uint => TradeInitialAccFees\n            )\n        )\n    ) public tradeInitialAccFees;\n\n    // Events\n    event ManagerUpdated(address value);\n    event MaxNegativePnlOnOpenPUpdated(uint value);\n    \n    event PairParamsUpdated(uint pairIndex, PairParams value);\n    event OnePercentDepthUpdated(uint pairIndex, uint valueAbove, uint valueBelow);\n    event RolloverFeePerBlockPUpdated(uint pairIndex, uint value);\n    event FundingFeePerBlockPUpdated(uint pairIndex, uint value);\n\n    event TradeInitialAccFeesStored(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint rollover,\n        int funding\n    );\n\n    event AccFundingFeesStored(uint pairIndex, int valueLong, int valueShort);\n    event AccRolloverFeesStored(uint pairIndex, uint value);\n\n    event FeesCharged(\n        uint pairIndex,\n        bool long,\n        uint collateral,   // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint rolloverFees, // 1e18 (DAI)\n        int fundingFees    // 1e18 (DAI)\n    );\n\n    constructor(StorageInterfaceV5 _storageT){\n        storageT = _storageT;\n    }\n\n    // Modifiers\n    modifier onlyGov(){\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyManager(){\n        require(msg.sender == manager, \"MANAGER_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks(){\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Set manager address\n    function setManager(address _manager) external onlyGov{\n        manager = _manager;\n\n        emit ManagerUpdated(_manager);\n    }\n\n    // Set max negative PnL % on trade opening\n    function setMaxNegativePnlOnOpenP(uint value) external onlyManager{\n        maxNegativePnlOnOpenP = value;\n\n        emit MaxNegativePnlOnOpenPUpdated(value);\n    }\n\n    // Set parameters for pair\n    function setPairParams(uint pairIndex, PairParams memory value) public onlyManager{\n        storeAccRolloverFees(pairIndex);\n        storeAccFundingFees(pairIndex);\n\n        pairParams[pairIndex] = value;\n\n        emit PairParamsUpdated(pairIndex, value);\n    }\n    function setPairParamsArray(\n        uint[] memory indices,\n        PairParams[] memory values\n    ) external onlyManager{\n        require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for(uint i = 0; i < indices.length; i++){\n            setPairParams(indices[i], values[i]);\n        }\n    }\n\n    // Set one percent depth for pair\n    function setOnePercentDepth(\n        uint pairIndex,\n        uint valueAbove,\n        uint valueBelow\n    ) public onlyManager{\n        PairParams storage p = pairParams[pairIndex];\n\n        p.onePercentDepthAbove = valueAbove;\n        p.onePercentDepthBelow = valueBelow;\n        \n        emit OnePercentDepthUpdated(pairIndex, valueAbove, valueBelow);\n    }\n    function setOnePercentDepthArray(\n        uint[] memory indices,\n        uint[] memory valuesAbove,\n        uint[] memory valuesBelow\n    ) external onlyManager{\n        require(indices.length == valuesAbove.length\n            && indices.length == valuesBelow.length, \"WRONG_LENGTH\");\n\n        for(uint i = 0; i < indices.length; i++){\n            setOnePercentDepth(indices[i], valuesAbove[i], valuesBelow[i]);\n        }\n    }\n\n    // Set rollover fee for pair\n    function setRolloverFeePerBlockP(uint pairIndex, uint value) public onlyManager{\n        require(value <= 25000000, \"TOO_HIGH\"); // ≈ 100% per day\n\n        storeAccRolloverFees(pairIndex);\n\n        pairParams[pairIndex].rolloverFeePerBlockP = value;\n        \n        emit RolloverFeePerBlockPUpdated(pairIndex, value);\n    }\n    function setRolloverFeePerBlockPArray(\n        uint[] memory indices,\n        uint[] memory values\n    ) external onlyManager{\n        require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for(uint i = 0; i < indices.length; i++){\n            setRolloverFeePerBlockP(indices[i], values[i]);\n        }\n    }\n\n    // Set funding fee for pair\n    function setFundingFeePerBlockP(uint pairIndex, uint value) public onlyManager{\n        require(value <= 10000000, \"TOO_HIGH\"); // ≈ 40% per day\n\n        storeAccFundingFees(pairIndex);\n\n        pairParams[pairIndex].fundingFeePerBlockP = value;\n        \n        emit FundingFeePerBlockPUpdated(pairIndex, value);\n    }\n    function setFundingFeePerBlockPArray(\n        uint[] memory indices,\n        uint[] memory values\n    ) external onlyManager{\n        require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for(uint i = 0; i < indices.length; i++){\n            setFundingFeePerBlockP(indices[i], values[i]);\n        }\n    }\n\n    // Store trade details when opened (acc fee values)\n    function storeTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long\n    ) external onlyCallbacks{\n        storeAccFundingFees(pairIndex);\n\n        TradeInitialAccFees storage t = tradeInitialAccFees[trader][pairIndex][index];\n\n        t.rollover = getPendingAccRolloverFees(pairIndex);\n\n        t.funding = long ? \n            pairFundingFees[pairIndex].accPerOiLong :\n            pairFundingFees[pairIndex].accPerOiShort;\n\n        t.openedAfterUpdate = true;\n\n        emit TradeInitialAccFeesStored(trader, pairIndex, index, t.rollover, t.funding);\n    }\n\n    // Acc rollover fees (store right before fee % update)\n    function storeAccRolloverFees(uint pairIndex) private{\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\n\n        r.accPerCollateral = getPendingAccRolloverFees(pairIndex);\n        r.lastUpdateBlock = block.number;\n\n        emit AccRolloverFeesStored(pairIndex, r.accPerCollateral);\n    }\n    function getPendingAccRolloverFees(\n        uint pairIndex\n    ) public view returns(uint){ // 1e18 (DAI)\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\n        \n        return r.accPerCollateral +\n            (block.number - r.lastUpdateBlock)\n            * pairParams[pairIndex].rolloverFeePerBlockP\n            * 1e18 / PRECISION / 100;\n    }\n\n    // Acc funding fees (store right before trades opened / closed and fee % update)\n    function storeAccFundingFees(uint pairIndex) private{\n        PairFundingFees storage f = pairFundingFees[pairIndex];\n\n        (f.accPerOiLong, f.accPerOiShort) = getPendingAccFundingFees(pairIndex);\n        f.lastUpdateBlock = block.number;\n\n        emit AccFundingFeesStored(pairIndex, f.accPerOiLong, f.accPerOiShort);\n    }\n    function getPendingAccFundingFees(uint pairIndex) public view returns(\n        int valueLong,\n        int valueShort\n    ){\n        PairFundingFees storage f = pairFundingFees[pairIndex];\n\n        valueLong = f.accPerOiLong;\n        valueShort = f.accPerOiShort;\n\n        int openInterestDaiLong = int(storageT.openInterestDai(pairIndex, 0));\n        int openInterestDaiShort = int(storageT.openInterestDai(pairIndex, 1));\n\n        int fundingFeesPaidByLongs = (openInterestDaiLong - openInterestDaiShort)\n            * int(block.number - f.lastUpdateBlock)\n            * int(pairParams[pairIndex].fundingFeePerBlockP)\n            / int(PRECISION) / 100;\n\n        if(openInterestDaiLong > 0){\n            valueLong += fundingFeesPaidByLongs * 1e18\n                / openInterestDaiLong;\n        }\n\n        if(openInterestDaiShort > 0){\n            valueShort += fundingFeesPaidByLongs * 1e18 * (-1)\n                / openInterestDaiShort;\n        }\n    }\n\n    // Dynamic price impact value on trade opening\n    function getTradePriceImpact(\n        uint openPrice,        // PRECISION\n        uint pairIndex,\n        bool long,\n        uint tradeOpenInterest // 1e18 (DAI)\n    ) external view returns(\n        uint priceImpactP,     // PRECISION (%)\n        uint priceAfterImpact  // PRECISION\n    ){\n        (priceImpactP, priceAfterImpact) = getTradePriceImpactPure(\n            openPrice,\n            long,\n            storageT.openInterestDai(pairIndex, long ? 0 : 1),\n            tradeOpenInterest,\n            long ?\n                pairParams[pairIndex].onePercentDepthAbove :\n                pairParams[pairIndex].onePercentDepthBelow\n        );\n    }\n    function getTradePriceImpactPure(\n        uint openPrice,         // PRECISION\n        bool long,\n        uint startOpenInterest, // 1e18 (DAI)\n        uint tradeOpenInterest, // 1e18 (DAI)\n        uint onePercentDepth\n    ) public pure returns(\n        uint priceImpactP,      // PRECISION (%)\n        uint priceAfterImpact   // PRECISION\n    ){\n        if(onePercentDepth == 0){\n            return (0, openPrice);\n        }\n\n        priceImpactP = (startOpenInterest + tradeOpenInterest / 2)\n            * PRECISION / 1e18 / onePercentDepth;\n        \n        uint priceImpact = priceImpactP * openPrice / PRECISION / 100;\n\n        priceAfterImpact = long ? openPrice + priceImpact : openPrice - priceImpact;\n    }\n\n    // Rollover fee value\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) public view returns(uint){ // 1e18 (DAI)\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\n\n        if(!t.openedAfterUpdate){\n            return 0;\n        }\n\n        return getTradeRolloverFeePure(\n            t.rollover,\n            getPendingAccRolloverFees(pairIndex),\n            collateral\n        );\n    }\n    function getTradeRolloverFeePure(\n        uint accRolloverFeesPerCollateral,\n        uint endAccRolloverFeesPerCollateral,\n        uint collateral // 1e18 (DAI)\n    ) public pure returns(uint){ // 1e18 (DAI)\n        return (endAccRolloverFeesPerCollateral - accRolloverFeesPerCollateral)\n            * collateral / 1e18;\n    }\n\n    // Funding fee value\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) public view returns(\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n    ){\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][index];\n\n        if(!t.openedAfterUpdate){\n            return 0;\n        }\n\n        (int pendingLong, int pendingShort) = getPendingAccFundingFees(pairIndex);\n\n        return getTradeFundingFeePure(\n            t.funding,\n            long ? pendingLong : pendingShort,\n            collateral,\n            leverage\n        );\n    }\n    function getTradeFundingFeePure(\n        int accFundingFeesPerOi,\n        int endAccFundingFeesPerOi,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) public pure returns(\n        int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n    ){\n        return (endAccFundingFeesPerOi - accFundingFeesPerOi)\n            * int(collateral) * int(leverage) / 1e18;\n    }\n\n    // Liquidation price value after rollover and funding fees\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice,  // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns(uint){ // PRECISION\n        return getTradeLiquidationPricePure(\n            openPrice,\n            long,\n            collateral,\n            leverage,\n            getTradeRolloverFee(trader, pairIndex, index, collateral),\n            getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage)\n        );\n    }\n    function getTradeLiquidationPricePure(\n        uint openPrice,   // PRECISION\n        bool long,\n        uint collateral,  // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee    // 1e18 (DAI)\n    ) public pure returns(uint){ // PRECISION\n        int liqPriceDistance = int(openPrice) * (\n                int(collateral * LIQ_THRESHOLD_P / 100)\n                - int(rolloverFee) - fundingFee\n            ) / int(collateral) / int(leverage);\n\n        int liqPrice = long ?\n            int(openPrice) - liqPriceDistance :\n            int(openPrice) + liqPriceDistance;\n\n        return liqPrice > 0 ? uint(liqPrice) : 0;\n    }\n\n    // Dai sent to trader after PnL and fees\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral,   // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee    // 1e18 (DAI)\n    ) external onlyCallbacks returns(uint amount){ // 1e18 (DAI)\n        storeAccFundingFees(pairIndex);\n\n        uint r = getTradeRolloverFee(trader, pairIndex, index, collateral);\n        int f = getTradeFundingFee(trader, pairIndex, index, long, collateral, leverage);\n\n        amount = getTradeValuePure(collateral, percentProfit, r, f, closingFee);\n\n        emit FeesCharged(pairIndex, long, collateral, leverage, percentProfit, r, f);\n    }\n    function getTradeValuePure(\n        uint collateral,   // 1e18 (DAI)\n        int percentProfit, // PRECISION (%)\n        uint rolloverFee,  // 1e18 (DAI)\n        int fundingFee,    // 1e18 (DAI)\n        uint closingFee    // 1e18 (DAI)\n    ) public pure returns(uint){ // 1e18 (DAI)\n        int value = int(collateral)\n            + int(collateral) * percentProfit / int(PRECISION) / 100\n            - int(rolloverFee) - fundingFee;\n\n        if(value <= int(collateral) * int(100 - LIQ_THRESHOLD_P) / 100){\n            return 0;\n        }\n\n        value -= int(closingFee);\n\n        return value > 0 ? uint(value) : 0;\n    }\n\n    // Useful getters\n    function getPairInfos(uint[] memory indices) external view returns(\n        PairParams[] memory,\n        PairRolloverFees[] memory,\n        PairFundingFees[] memory\n    ){\n        PairParams[] memory params = new PairParams[](indices.length);\n        PairRolloverFees[] memory rolloverFees = new PairRolloverFees[](indices.length);\n        PairFundingFees[] memory fundingFees = new PairFundingFees[](indices.length);\n\n        for(uint i = 0; i < indices.length; i++){\n            uint index = indices[i];\n\n            params[i] = pairParams[index];\n            rolloverFees[i] = pairRolloverFees[index];\n            fundingFees[i] = pairFundingFees[index];\n        }\n\n        return (params, rolloverFees, fundingFees);\n    }\n    function getOnePercentDepthAbove(uint pairIndex) external view returns(uint){\n        return pairParams[pairIndex].onePercentDepthAbove;\n    }\n    function getOnePercentDepthBelow(uint pairIndex) external view returns(uint){\n        return pairParams[pairIndex].onePercentDepthBelow;\n    }\n    function getRolloverFeePerBlockP(uint pairIndex) external view returns(uint){\n        return pairParams[pairIndex].rolloverFeePerBlockP;\n    }\n    function getFundingFeePerBlockP(uint pairIndex) external view returns(uint){\n        return pairParams[pairIndex].fundingFeePerBlockP;\n    }\n    function getAccRolloverFees(uint pairIndex) external view returns(uint){\n        return pairRolloverFees[pairIndex].accPerCollateral;\n    }\n    function getAccRolloverFeesUpdateBlock(uint pairIndex) external view returns(uint){\n        return pairRolloverFees[pairIndex].lastUpdateBlock;\n    }\n    function getAccFundingFeesLong(uint pairIndex) external view returns(int){\n        return pairFundingFees[pairIndex].accPerOiLong;\n    }\n    function getAccFundingFeesShort(uint pairIndex) external view returns(int){\n        return pairFundingFees[pairIndex].accPerOiShort;\n    }\n    function getAccFundingFeesUpdateBlock(uint pairIndex) external view returns(uint){\n        return pairFundingFees[pairIndex].lastUpdateBlock;\n    }\n    function getTradeInitialAccRolloverFeesPerCollateral(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns(uint){\n        return tradeInitialAccFees[trader][pairIndex][index].rollover;\n    }\n    function getTradeInitialAccFundingFeesPerOi(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns(int){\n        return tradeInitialAccFees[trader][pairIndex][index].funding;\n    }\n    function getTradeOpenedAfterUpdate(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns(bool){\n        return tradeInitialAccFees[trader][pairIndex][index].openedAfterUpdate;\n    }\n}"
    },
    "contracts/contracts/GNSPairStorageV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterfaceV5.sol\";\n\ncontract GNSPairsStorageV6 {\n    // Params (constant)\n    uint constant MIN_LEVERAGE = 2;\n    uint constant MAX_LEVERAGE = 1000;\n\n    // Custom data types\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\n\n    struct Pair{\n        string from;\n        string to;\n        Feed feed;\n        uint spreadP;               // PRECISION\n        uint groupIndex;\n        uint feeIndex;\n    }\n    struct Group{\n        string name;\n        bytes32 job;\n        uint minLeverage;\n        uint maxLeverage;\n        uint maxCollateralP;        // % (of DAI vault current balance)\n    }\n    struct Fee{\n        string name;\n        uint openFeeP;              // PRECISION (% of leveraged pos)\n        uint closeFeeP;             // PRECISION (% of leveraged pos)\n        uint oracleFeeP;            // PRECISION (% of leveraged pos)\n        uint nftLimitOrderFeeP;     // PRECISION (% of leveraged pos)\n        uint referralFeeP;          // PRECISION (% of leveraged pos)\n        uint minLevPosDai;          // 1e18 (collateral x leverage, useful for min fee)\n    }\n\n    // State\n    uint public currentOrderId;\n    uint public pairsCount;\n    uint public groupsCount;\n    uint public feesCount;\n\n    StorageInterfaceV5 public storageT;\n\n    mapping(uint => Pair) public pairs;\n    mapping(uint => Group) public groups;\n    mapping(uint => Fee) public fees;\n\n    mapping(string => mapping(string => bool)) public isPairListed;\n    mapping(uint => uint[2]) public groupsCollaterals; // (long, short)\n\n    // Events\n    event PairAdded(uint index, string from, string to);\n    event PairUpdated(uint index);\n\n    event GroupAdded(uint index, string name);\n    event GroupUpdated(uint index);\n    \n    event FeeAdded(uint index, string name);\n    event FeeUpdated(uint index);\n\n    constructor(uint _currentOrderId, StorageInterfaceV5 _storageT) {\n        require(_currentOrderId > 0, \"ORDER_ID_0\");\n        currentOrderId = _currentOrderId;\n        storageT = _storageT;\n    }\n\n    // Modifiers\n    modifier onlyGov(){ require(msg.sender == storageT.gov(), \"GOV_ONLY\"); _; }\n    \n    modifier groupListed(uint _groupIndex){\n        require(groups[_groupIndex].minLeverage > 0, \"GROUP_NOT_LISTED\");\n        _;\n    }\n    modifier feeListed(uint _feeIndex){\n        require(fees[_feeIndex].openFeeP > 0, \"FEE_NOT_LISTED\");\n        _;\n    }\n\n    modifier feedOk(Feed calldata _feed){\n        require(_feed.maxDeviationP > 0 && _feed.feed1 != address(0), \"WRONG_FEED\");\n        require(_feed.feedCalculation != FeedCalculation.COMBINE || _feed.feed2 != address(0), \"FEED_2_MISSING\");\n        _;\n    }\n    modifier groupOk(Group calldata _group){\n        require(_group.job != bytes32(0), \"JOB_EMPTY\");\n        require(_group.minLeverage >= MIN_LEVERAGE && _group.maxLeverage <= MAX_LEVERAGE\n            && _group.minLeverage < _group.maxLeverage, \"WRONG_LEVERAGES\");\n        _;\n    }\n    modifier feeOk(Fee calldata _fee){\n        require(_fee.openFeeP > 0 && _fee.closeFeeP > 0 && _fee.oracleFeeP > 0\n            && _fee.nftLimitOrderFeeP > 0 && _fee.referralFeeP > 0 && _fee.minLevPosDai > 0, \"WRONG_FEES\");\n        _;\n    }\n\n    // Manage pairs\n    function addPair(Pair calldata _pair) public onlyGov feedOk(_pair.feed) groupListed(_pair.groupIndex) feeListed(_pair.feeIndex){\n        require(!isPairListed[_pair.from][_pair.to], \"PAIR_ALREADY_LISTED\");\n        \n        pairs[pairsCount] = _pair;\n        isPairListed[_pair.from][_pair.to] = true;\n        \n        emit PairAdded(pairsCount++, _pair.from, _pair.to);\n    }\n    function addPairs(Pair[] calldata _pairs) external{\n        for(uint i = 0; i < _pairs.length; i++){\n            addPair(_pairs[i]);\n        }\n    }\n    function updatePair(uint _pairIndex, Pair calldata _pair) external onlyGov feedOk(_pair.feed) feeListed(_pair.feeIndex){\n        Pair storage p = pairs[_pairIndex];\n        require(isPairListed[p.from][p.to], \"PAIR_NOT_LISTED\");\n\n        p.feed = _pair.feed;\n        p.spreadP = _pair.spreadP;\n        p.feeIndex = _pair.feeIndex;\n        \n        emit PairUpdated(_pairIndex);\n    }\n\n    // Manage groups\n    function addGroup(Group calldata _group) external onlyGov groupOk(_group){\n        groups[groupsCount] = _group;\n        emit GroupAdded(groupsCount++, _group.name);\n    }\n    function updateGroup(uint _id, Group calldata _group) external onlyGov groupListed(_id) groupOk(_group){\n        groups[_id] = _group;\n        emit GroupUpdated(_id);\n    }\n\n    // Manage fees\n    function addFee(Fee calldata _fee) external onlyGov feeOk(_fee){\n        fees[feesCount] = _fee;\n        emit FeeAdded(feesCount++, _fee.name);\n    }\n    function updateFee(uint _id, Fee calldata _fee) external onlyGov feeListed(_id) feeOk(_fee){\n        fees[_id] = _fee;\n        emit FeeUpdated(_id);\n    }\n\n    // Update collateral open exposure for a group (callbacks)\n    function updateGroupCollateral(uint _pairIndex, uint _amount, bool _long, bool _increase) external{\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n\n        uint[2] storage collateralOpen = groupsCollaterals[pairs[_pairIndex].groupIndex];\n        uint index = _long ? 0 : 1;\n\n        if(_increase){\n            collateralOpen[index] += _amount;\n        }else{\n            collateralOpen[index] = collateralOpen[index] > _amount ? collateralOpen[index] - _amount : 0;\n        }\n    }\n\n    // Fetch relevant info for order (aggregator)\n    function pairJob(uint _pairIndex) external returns(string memory, string memory, bytes32, uint){\n        require(msg.sender == address(storageT.priceAggregator()), \"AGGREGATOR_ONLY\");\n        \n        Pair memory p = pairs[_pairIndex];\n        require(isPairListed[p.from][p.to], \"PAIR_NOT_LISTED\");\n        \n        return (p.from, p.to, groups[p.groupIndex].job, currentOrderId++);\n    }\n\n    // Getters (pairs & groups)\n    function pairFeed(uint _pairIndex) external view returns(Feed memory){\n        return pairs[_pairIndex].feed;\n    }\n    function pairSpreadP(uint _pairIndex) external view returns(uint){\n        return pairs[_pairIndex].spreadP;\n    }\n    function pairMinLeverage(uint _pairIndex) external view returns(uint){\n        return groups[pairs[_pairIndex].groupIndex].minLeverage;\n    }\n    function pairMaxLeverage(uint _pairIndex) external view returns(uint){\n        return groups[pairs[_pairIndex].groupIndex].maxLeverage;\n    }\n    function groupMaxCollateral(uint _pairIndex) external view returns(uint){\n        return groups[pairs[_pairIndex].groupIndex].maxCollateralP*storageT.vault().currentBalanceDai()/100;\n    }\n    function groupCollateral(uint _pairIndex, bool _long) external view returns(uint){\n        return groupsCollaterals[pairs[_pairIndex].groupIndex][_long ? 0 : 1];\n    }\n    function guaranteedSlEnabled(uint _pairIndex) external view returns(bool){\n        return pairs[_pairIndex].groupIndex == 0; // crypto only\n    }\n\n    // Getters (fees)\n    function pairOpenFeeP(uint _pairIndex) external view returns(uint){ \n        return fees[pairs[_pairIndex].feeIndex].openFeeP;\n    }\n    function pairCloseFeeP(uint _pairIndex) external view returns(uint){ \n        return fees[pairs[_pairIndex].feeIndex].closeFeeP; \n    }\n    function pairOracleFeeP(uint _pairIndex) external view returns(uint){ \n        return fees[pairs[_pairIndex].feeIndex].oracleFeeP; \n    }\n    function pairNftLimitOrderFeeP(uint _pairIndex) external view returns(uint){ \n        return fees[pairs[_pairIndex].feeIndex].nftLimitOrderFeeP; \n    }\n    function pairReferralFeeP(uint _pairIndex) external view returns(uint){ \n        return fees[pairs[_pairIndex].feeIndex].referralFeeP; \n    }\n    function pairMinLevPosDai(uint _pairIndex) external view returns(uint){\n        return fees[pairs[_pairIndex].feeIndex].minLevPosDai;\n    }\n\n    // Getters (backend)\n    function pairsBackend(uint _index) external view returns(Pair memory, Group memory, Fee memory){\n        Pair memory p = pairs[_index];\n        return (p, groups[p.groupIndex], fees[p.feeIndex]);\n    }\n}"
    },
    "contracts/contracts/GNSPriceAggregatorV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"../v6.3/TWAPPriceGetter.sol\";\n\nimport \"../interfaces/CallbacksInterfaceV6_4.sol\";\nimport \"../interfaces/ChainlinkFeedInterfaceV5.sol\";\nimport \"../interfaces/StorageInterfaceV5.sol\";\n\nimport \"../libraries/PackingUtils.sol\";\n\npragma solidity 0.8.20;\n\ncontract GNSPriceAggregatorV6_4 is ChainlinkClient {\n    using Chainlink for Chainlink.Request;\n    using PackingUtils for uint;\n\n    // Contracts (constant)\n    StorageInterfaceV5 public immutable storageT;\n\n    // Contracts (adjustable)\n    PairsStorageInterfaceV6 public pairsStorage;\n    ChainlinkFeedInterfaceV5 public linkPriceFeed;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_ORACLE_NODES = 20;\n    uint constant MIN_ANSWERS = 3;\n\n    // Params (adjustable)\n    uint public minAnswers;\n\n    // Custom data types\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    struct Order {\n        uint16 pairIndex;\n        uint112 linkFeePerNode;\n        OrderType orderType;\n        bool active;\n        bool isLookback;\n    }\n\n    struct LookbackOrderAnswer {\n        uint64 open;\n        uint64 high;\n        uint64 low;\n        uint64 ts;\n    }\n\n    // State\n    address[] public nodes;\n    bytes32[2] public jobIds;\n\n    mapping(uint => Order) public orders;\n    mapping(bytes32 => uint) public orderIdByRequest;\n    mapping(uint => uint[]) public ordersAnswers;\n    mapping(uint => LookbackOrderAnswer[]) public lookbackOrderAnswers;\n\n    // Events\n    event PairsStorageUpdated(address value);\n    event LinkPriceFeedUpdated(address value);\n    event MinAnswersUpdated(uint value);\n\n    event NodeAdded(uint index, address value);\n    event NodeReplaced(uint index, address oldNode, address newNode);\n    event NodeRemoved(uint index, address oldNode);\n\n    event JobIdUpdated(uint index, bytes32 jobId);\n\n    event PriceRequested(\n        uint indexed orderId,\n        bytes32 indexed job,\n        uint indexed pairIndex,\n        OrderType orderType,\n        uint nodesCount,\n        uint linkFeePerNode,\n        uint fromBlock,\n        bool isLookback\n    );\n\n    event PriceReceived(\n        bytes32 request,\n        uint indexed orderId,\n        address indexed node,\n        uint16 indexed pairIndex,\n        uint price,\n        uint referencePrice,\n        uint112 linkFee,\n        bool isLookback,\n        bool usedInMedian\n    );\n\n    event CallbackExecuted(CallbacksInterfaceV6_4.AggregatorAnswer a, OrderType orderType);\n\n    constructor(\n        address _linkToken,\n        // IUniswapV3Pool _tokenDaiLp,\n        // uint32 _twapInterval,\n        StorageInterfaceV5 _storageT,\n        PairsStorageInterfaceV6 _pairsStorage,\n        ChainlinkFeedInterfaceV5 _linkPriceFeed,\n        uint _minAnswers,\n        address[] memory _nodes,\n        bytes32[2] memory _jobIds\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_pairsStorage) != address(0) &&\n                address(_linkPriceFeed) != address(0) &&\n                _minAnswers >= MIN_ANSWERS &&\n                _minAnswers % 2 == 1 &&\n                _nodes.length > 0 &&\n                _linkToken != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n\n        pairsStorage = _pairsStorage;\n        linkPriceFeed = _linkPriceFeed;\n\n        minAnswers = _minAnswers;\n        nodes = _nodes;\n        jobIds = _jobIds;\n\n        setChainlinkToken(_linkToken);\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == storageT.trading(), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage contracts\n    function updatePairsStorage(PairsStorageInterfaceV6 value) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        pairsStorage = value;\n\n        emit PairsStorageUpdated(address(value));\n    }\n\n    function updateLinkPriceFeed(ChainlinkFeedInterfaceV5 value) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        linkPriceFeed = value;\n\n        emit LinkPriceFeedUpdated(address(value));\n    }\n\n    // // Manage TWAP variables\n    // function updateUniV3Pool(IUniswapV3Pool _uniV3Pool) external onlyGov {\n    //     _updateUniV3Pool(_uniV3Pool);\n    // }\n\n    // function updateTwapInterval(uint32 _twapInterval) external onlyGov {\n    //     _updateTwapInterval(_twapInterval);\n    // }\n\n    // Manage params\n    function updateMinAnswers(uint value) external onlyGov {\n        require(value >= MIN_ANSWERS, \"MIN_ANSWERS\");\n        require(value % 2 == 1, \"EVEN\");\n\n        minAnswers = value;\n\n        emit MinAnswersUpdated(value);\n    }\n\n    // Manage nodes\n    function addNode(address a) external onlyGov {\n        require(a != address(0), \"VALUE_0\");\n        require(nodes.length < MAX_ORACLE_NODES, \"MAX_ORACLE_NODES\");\n\n        for (uint i; i < nodes.length; i++) {\n            require(nodes[i] != a, \"ALREADY_LISTED\");\n        }\n\n        nodes.push(a);\n\n        emit NodeAdded(nodes.length - 1, a);\n    }\n\n    function replaceNode(uint index, address a) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n        require(a != address(0), \"VALUE_0\");\n\n        emit NodeReplaced(index, nodes[index], a);\n\n        nodes[index] = a;\n    }\n\n    function removeNode(uint index) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n\n        emit NodeRemoved(index, nodes[index]);\n\n        nodes[index] = nodes[nodes.length - 1];\n        nodes.pop();\n    }\n\n    function setMarketJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[0] = jobId;\n\n        emit JobIdUpdated(0, jobId);\n    }\n\n    function setLimitJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[1] = jobId;\n\n        emit JobIdUpdated(1, jobId);\n    }\n\n    // On-demand price request to oracles network\n    function getPrice(\n        uint pairIndex,\n        OrderType orderType,\n        uint leveragedPosDai,\n        uint fromBlock\n    ) external onlyTrading returns (uint) {\n        require(pairIndex <= type(uint16).max, \"PAIR_OVERFLOW\");\n\n        bool isLookback = orderType == OrderType.LIMIT_OPEN || orderType == OrderType.LIMIT_CLOSE;\n        bytes32 job = isLookback ? jobIds[1] : jobIds[0];\n\n        Chainlink.Request memory linkRequest = buildChainlinkRequest(job, address(this), this.fulfill.selector);\n\n        uint orderId;\n        {\n            (string memory from, string memory to, , uint _orderId) = pairsStorage.pairJob(pairIndex);\n            orderId = _orderId;\n\n            linkRequest.add(\"from\", from);\n            linkRequest.add(\"to\", to);\n\n            if (isLookback) {\n                linkRequest.addUint(\"fromBlock\", fromBlock);\n            }\n        }\n\n        uint length;\n        uint linkFeePerNode;\n        {\n            address[] memory _nodes = nodes;\n            length = _nodes.length;\n            linkFeePerNode = linkFee(pairIndex, leveragedPosDai) / length;\n\n            require(linkFeePerNode <= type(uint112).max, \"LINK_OVERFLOW\");\n\n            orders[orderId] = Order(uint16(pairIndex), uint112(linkFeePerNode), orderType, true, isLookback);\n            for (uint i; i < length; ) {\n                orderIdByRequest[sendChainlinkRequestTo(_nodes[i], linkRequest, linkFeePerNode)] = orderId;\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        emit PriceRequested(orderId, job, pairIndex, orderType, length, linkFeePerNode, fromBlock, isLookback);\n\n        return orderId;\n    }\n\n    // Fulfill on-demand price requests\n    function fulfill(bytes32 requestId, uint priceData) external recordChainlinkFulfillment(requestId) {\n        uint orderId = orderIdByRequest[requestId];\n        delete orderIdByRequest[requestId];\n\n        Order memory r = orders[orderId];\n        bool usedInMedian = false;\n\n        PairsStorageInterfaceV6.Feed memory f = pairsStorage.pairFeed(r.pairIndex);\n        uint feedPrice = fetchFeedPrice(f);\n\n        if (r.active) {\n            if (r.isLookback) {\n                LookbackOrderAnswer memory newAnswer;\n                (newAnswer.open, newAnswer.high, newAnswer.low, newAnswer.ts) = priceData.unpack256To64();\n\n                require(\n                    (newAnswer.high == 0 && newAnswer.low == 0) ||\n                        (newAnswer.high >= newAnswer.open && newAnswer.low <= newAnswer.open && newAnswer.low > 0),\n                    \"INVALID_CANDLE\"\n                );\n\n                if (\n                    isPriceWithinDeviation(newAnswer.high, feedPrice, f.maxDeviationP) &&\n                    isPriceWithinDeviation(newAnswer.low, feedPrice, f.maxDeviationP)\n                ) {\n                    usedInMedian = true;\n\n                    LookbackOrderAnswer[] storage answers = lookbackOrderAnswers[orderId];\n                    answers.push(newAnswer);\n\n                    if (answers.length == minAnswers) {\n                        CallbacksInterfaceV6_4.AggregatorAnswer memory a;\n                        a.orderId = orderId;\n                        (a.open, a.high, a.low) = medianLookbacks(answers);\n                        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n                        CallbacksInterfaceV6_4 c = CallbacksInterfaceV6_4(storageT.callbacks());\n\n                        if (r.orderType == OrderType.LIMIT_OPEN) {\n                            c.executeNftOpenOrderCallback(a);\n                        } else {\n                            c.executeNftCloseOrderCallback(a);\n                        }\n\n                        emit CallbackExecuted(a, r.orderType);\n\n                        orders[orderId].active = false;\n                        delete lookbackOrderAnswers[orderId];\n                    }\n                }\n            } else {\n                (uint64 price, , , ) = priceData.unpack256To64();\n\n                if (isPriceWithinDeviation(price, feedPrice, f.maxDeviationP)) {\n                    usedInMedian = true;\n\n                    uint[] storage answers = ordersAnswers[orderId];\n                    answers.push(price);\n\n                    if (answers.length == minAnswers) {\n                        CallbacksInterfaceV6_4.AggregatorAnswer memory a;\n\n                        a.orderId = orderId;\n                        a.price = median(answers);\n                        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n                        CallbacksInterfaceV6_4 c = CallbacksInterfaceV6_4(storageT.callbacks());\n\n                        if (r.orderType == OrderType.MARKET_OPEN) {\n                            c.openTradeMarketCallback(a);\n                        } else {\n                            c.closeTradeMarketCallback(a);\n                        }\n\n                        emit CallbackExecuted(a, r.orderType);\n\n                        orders[orderId].active = false;\n                        delete ordersAnswers[orderId];\n                    }\n                }\n            }\n        }\n\n        emit PriceReceived(\n            requestId,\n            orderId,\n            msg.sender,\n            r.pairIndex,\n            priceData,\n            feedPrice,\n            r.linkFeePerNode,\n            r.isLookback,\n            usedInMedian\n        );\n    }\n\n    // Calculate LINK fee for each request\n    function linkFee(uint pairIndex, uint leveragedPosDai) public view returns (uint) {\n        (, int linkPriceUsd, , , ) = linkPriceFeed.latestRoundData();\n\n        return (pairsStorage.pairOracleFeeP(pairIndex) * leveragedPosDai * 1e8) / uint(linkPriceUsd) / PRECISION / 100;\n    }\n\n    // Claim back LINK tokens (if contract will be replaced for example)\n    function claimBackLink() external onlyGov {\n        TokenInterfaceV5 link = storageT.linkErc677();\n\n        link.transfer(storageT.gov(), link.balanceOf(address(this)));\n    }\n\n    // Utils\n    function fetchFeedPrice(PairsStorageInterfaceV6.Feed memory f) private view returns (uint) {\n        if (f.feed1 == address(0)) {\n            return 0;\n        }\n\n        uint feedPrice;\n        (, int feedPrice1, , , ) = ChainlinkFeedInterfaceV5(f.feed1).latestRoundData();\n\n        if (f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.DEFAULT) {\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / 1e8);\n        } else if (f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.INVERT) {\n            feedPrice = uint((int(PRECISION) * 1e8) / feedPrice1);\n        } else {\n            (, int feedPrice2, , , ) = ChainlinkFeedInterfaceV5(f.feed2).latestRoundData();\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / feedPrice2);\n        }\n\n        return feedPrice;\n    }\n\n    function isPriceWithinDeviation(uint price, uint feedPrice, uint maxDeviationP) private pure returns (bool) {\n        return\n            price == 0 ||\n            feedPrice == 0 ||\n            ((price >= feedPrice ? price - feedPrice : feedPrice - price) * PRECISION * 100) / feedPrice <=\n            maxDeviationP;\n    }\n\n    // Median function\n    function swap(uint[] memory array, uint i, uint j) private pure {\n        (array[i], array[j]) = (array[j], array[i]);\n    }\n\n    function sort(uint[] memory array, uint begin, uint end) private pure {\n        if (begin >= end) {\n            return;\n        }\n\n        uint j = begin;\n        uint pivot = array[j];\n\n        for (uint i = begin + 1; i < end; ++i) {\n            if (array[i] < pivot) {\n                swap(array, i, ++j);\n            }\n        }\n\n        swap(array, begin, j);\n        sort(array, begin, j);\n        sort(array, j + 1, end);\n    }\n\n    function median(uint[] memory array) private pure returns (uint) {\n        sort(array, 0, array.length);\n\n        return\n            array.length % 2 == 0\n                ? (array[array.length / 2 - 1] + array[array.length / 2]) / 2\n                : array[array.length / 2];\n    }\n\n    function medianLookbacks(LookbackOrderAnswer[] memory array) private pure returns (uint open, uint high, uint low) {\n        uint length = array.length;\n\n        uint[] memory opens = new uint[](length);\n        uint[] memory highs = new uint[](length);\n        uint[] memory lows = new uint[](length);\n\n        for (uint i; i < length; ) {\n            opens[i] = array[i].open;\n            highs[i] = array[i].high;\n            lows[i] = array[i].low;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        sort(opens, 0, length);\n        sort(highs, 0, length);\n        sort(lows, 0, length);\n\n        bool isLengthEven = length % 2 == 0;\n        uint halfLength = length / 2;\n\n        open = isLengthEven ? (opens[halfLength - 1] + opens[halfLength]) / 2 : opens[halfLength];\n        high = isLengthEven ? (highs[halfLength - 1] + highs[halfLength]) / 2 : highs[halfLength];\n        low = isLengthEven ? (lows[halfLength - 1] + lows[halfLength]) / 2 : lows[halfLength];\n    }\n\n    // Storage v5 compatibility\n    function openFeeP(uint pairIndex) external view returns (uint) {\n        return pairsStorage.pairOpenFeeP(pairIndex);\n    }\n}"
    },
    "contracts/contracts/GNSReferralsV6_2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterfaceV5.sol\";\n\ncontract GNSReferralsV6_2 {\n\n    // CONSTANTS\n    uint constant PRECISION = 1e10;\n    StorageInterfaceV5 public immutable storageT;\n\n    // ADJUSTABLE PARAMETERS\n    uint public allyFeeP;           // % (of referrer fees going to allies, eg. 10)\n    uint public startReferrerFeeP;  // % (of referrer fee when 0 volume referred, eg. 75)\n    uint public openFeeP;           // % (of opening fee used for referral system, eg. 33)\n    uint public targetVolumeDai;    // DAI (to reach maximum referral system fee, eg. 1e8)\n\n    // CUSTOM TYPES\n    struct AllyDetails{\n        address[] referrersReferred;\n        uint volumeReferredDai;    // 1e18\n        uint pendingRewardsToken;  // 1e18\n        uint totalRewardsToken;    // 1e18\n        uint totalRewardsValueDai; // 1e18\n        bool active;\n    }\n\n    struct ReferrerDetails{\n        address ally;\n        address[] tradersReferred;\n        uint volumeReferredDai;    // 1e18\n        uint pendingRewardsToken;  // 1e18\n        uint totalRewardsToken;    // 1e18\n        uint totalRewardsValueDai; // 1e18\n        bool active;\n    }\n\n    // STATE (MAPPINGS)\n    mapping(address => AllyDetails) public allyDetails;\n    mapping(address => ReferrerDetails) public referrerDetails;\n\n    mapping(address => address) public referrerByTrader;\n\n    // EVENTS\n    event UpdatedAllyFeeP(uint value);\n    event UpdatedStartReferrerFeeP(uint value);\n    event UpdatedOpenFeeP(uint value);\n    event UpdatedTargetVolumeDai(uint value);\n\n    event AllyWhitelisted(address indexed ally);\n    event AllyUnwhitelisted(address indexed ally);\n\n    event ReferrerWhitelisted(\n        address indexed referrer,\n        address indexed ally\n    );\n    event ReferrerUnwhitelisted(address indexed referrer);\n    event ReferrerRegistered(\n        address indexed trader,\n        address indexed referrer\n    );\n\n    event AllyRewardDistributed(\n        address indexed ally,\n        address indexed trader,\n        uint volumeDai,\n        uint amountToken,\n        uint amountValueDai\n    );\n    event ReferrerRewardDistributed(\n        address indexed referrer,\n        address indexed trader,\n        uint volumeDai,\n        uint amountToken,\n        uint amountValueDai\n    );\n\n    event AllyRewardsClaimed(\n        address indexed ally,\n        uint amountToken\n    );\n    event ReferrerRewardsClaimed(\n        address indexed referrer,\n        uint amountToken\n    );\n\n    constructor(\n        StorageInterfaceV5 _storageT,\n        uint _allyFeeP,\n        uint _startReferrerFeeP,\n        uint _openFeeP,\n        uint _targetVolumeDai\n    ){\n        require(address(_storageT) != address(0)\n            && _allyFeeP <= 50\n            && _startReferrerFeeP <= 100\n            && _openFeeP <= 50\n            && _targetVolumeDai > 0, \"WRONG_PARAMS\");\n\n        storageT = _storageT;\n\n        allyFeeP = _allyFeeP;\n        startReferrerFeeP = _startReferrerFeeP;\n        openFeeP = _openFeeP;\n        targetVolumeDai = _targetVolumeDai;\n    }\n\n    // MODIFIERS\n    modifier onlyGov(){\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading(){\n        require(msg.sender == storageT.trading(), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks(){\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // MANAGE PARAMETERS\n    function updateAllyFeeP(uint value) external onlyGov{\n        require(value <= 50, \"VALUE_ABOVE_50\");\n\n        allyFeeP = value;\n        \n        emit UpdatedAllyFeeP(value);\n    }\n    function updateStartReferrerFeeP(uint value) external onlyGov{\n        require(value <= 100, \"VALUE_ABOVE_100\");\n\n        startReferrerFeeP = value;\n\n        emit UpdatedStartReferrerFeeP(value);\n    }\n    function updateOpenFeeP(uint value) external onlyGov{\n        require(value <= 50, \"VALUE_ABOVE_50\");\n\n        openFeeP = value;\n\n        emit UpdatedOpenFeeP(value);\n    }\n    function updateTargetVolumeDai(uint value) external onlyGov{\n        require(value > 0, \"VALUE_0\");\n\n        targetVolumeDai = value;\n        \n        emit UpdatedTargetVolumeDai(value);\n    }\n\n    // MANAGE ALLIES\n    function whitelistAlly(address ally) external onlyGov{\n        require(ally != address(0), \"ADDRESS_0\");\n\n        AllyDetails storage a = allyDetails[ally];\n        require(!a.active, \"ALLY_ALREADY_ACTIVE\");\n\n        a.active = true;\n\n        emit AllyWhitelisted(ally);\n    }\n    function unwhitelistAlly(address ally) external onlyGov{\n        AllyDetails storage a = allyDetails[ally];\n        require(a.active, \"ALREADY_UNACTIVE\");\n\n        a.active = false;\n\n        emit AllyUnwhitelisted(ally);\n    }\n\n    // MANAGE REFERRERS\n    function whitelistReferrer(\n        address referrer,\n        address ally\n    ) external onlyGov{\n        \n        require(referrer != address(0), \"ADDRESS_0\");\n\n        ReferrerDetails storage r = referrerDetails[referrer];      \n        require(!r.active, \"REFERRER_ALREADY_ACTIVE\");\n\n        r.active = true;\n        \n        if(ally != address(0)){\n            AllyDetails storage a = allyDetails[ally];\n            require(a.active, \"ALLY_NOT_ACTIVE\");\n\n            r.ally = ally;\n            a.referrersReferred.push(referrer);\n        }\n\n        emit ReferrerWhitelisted(referrer, ally);\n    }\n    function unwhitelistReferrer(address referrer) external onlyGov{\n        ReferrerDetails storage r = referrerDetails[referrer];\n        require(r.active, \"ALREADY_UNACTIVE\");\n\n        r.active = false;\n\n        emit ReferrerUnwhitelisted(referrer);\n    }\n\n    function registerPotentialReferrer(\n        address trader,\n        address referrer\n    ) external onlyTrading{\n\n        ReferrerDetails storage r = referrerDetails[referrer];\n\n        if(referrerByTrader[trader] != address(0)\n        || referrer == address(0)\n        || !r.active){\n            return;\n        }\n\n        referrerByTrader[trader] = referrer;\n        r.tradersReferred.push(trader);\n\n        emit ReferrerRegistered(trader, referrer);\n    }\n\n    // REWARDS DISTRIBUTION\n    function distributePotentialReward(\n        address trader,\n        uint volumeDai,\n        uint pairOpenFeeP,\n        uint tokenPriceDai\n    ) external onlyCallbacks returns(uint){\n\n        address referrer = referrerByTrader[trader];\n        ReferrerDetails storage r = referrerDetails[referrer];\n\n        if(!r.active){\n            return 0;\n        }\n\n        uint referrerRewardValueDai = volumeDai * getReferrerFeeP(\n            pairOpenFeeP,\n            r.volumeReferredDai\n        ) / PRECISION / 100;\n\n        uint referrerRewardToken = referrerRewardValueDai * PRECISION / tokenPriceDai;\n\n        storageT.handleTokens(address(this), referrerRewardToken, true);\n\n        AllyDetails storage a = allyDetails[r.ally];\n        \n        uint allyRewardValueDai;\n        uint allyRewardToken;\n\n        if(a.active){\n            allyRewardValueDai = referrerRewardValueDai * allyFeeP / 100;\n            allyRewardToken = referrerRewardToken * allyFeeP / 100;\n\n            a.volumeReferredDai += volumeDai;\n            a.pendingRewardsToken += allyRewardToken;\n            a.totalRewardsToken += allyRewardToken;\n            a.totalRewardsValueDai += allyRewardValueDai;\n\n            referrerRewardValueDai -= allyRewardValueDai;\n            referrerRewardToken -= allyRewardToken;\n\n            emit AllyRewardDistributed(\n                r.ally,\n                trader,\n                volumeDai,\n                allyRewardToken,\n                allyRewardValueDai\n            );\n        }\n\n        r.volumeReferredDai += volumeDai;\n        r.pendingRewardsToken += referrerRewardToken;\n        r.totalRewardsToken += referrerRewardToken;\n        r.totalRewardsValueDai += referrerRewardValueDai;\n\n        emit ReferrerRewardDistributed(\n            referrer,\n            trader,\n            volumeDai,\n            referrerRewardToken,\n            referrerRewardValueDai\n        );\n\n        return referrerRewardValueDai + allyRewardValueDai;\n    }\n\n    // REWARDS CLAIMING\n    function claimAllyRewards() external{\n        AllyDetails storage a = allyDetails[msg.sender];\n        uint rewardsToken = a.pendingRewardsToken;\n        \n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\n\n        a.pendingRewardsToken = 0;\n        storageT.token().transfer(msg.sender, rewardsToken);\n\n        emit AllyRewardsClaimed(msg.sender, rewardsToken);\n    }\n    function claimReferrerRewards() external{\n        ReferrerDetails storage r = referrerDetails[msg.sender];\n        uint rewardsToken = r.pendingRewardsToken;\n        \n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\n\n        r.pendingRewardsToken = 0;\n        storageT.token().transfer(msg.sender, rewardsToken);\n\n        emit ReferrerRewardsClaimed(msg.sender, rewardsToken);\n    }\n\n    // VIEW FUNCTIONS\n    function getReferrerFeeP(\n        uint pairOpenFeeP,\n        uint volumeReferredDai\n    ) public view returns(uint){\n\n        uint maxReferrerFeeP = pairOpenFeeP * 2 * openFeeP / 100;\n        uint minFeeP = maxReferrerFeeP * startReferrerFeeP / 100;\n\n        uint feeP = minFeeP + (maxReferrerFeeP - minFeeP)\n            * volumeReferredDai / 1e18 / targetVolumeDai;\n\n        return feeP > maxReferrerFeeP ? maxReferrerFeeP : feeP;\n    }\n\n    function getPercentOfOpenFeeP(\n        address trader\n    ) external view returns(uint){\n        return getPercentOfOpenFeeP_calc(referrerDetails[referrerByTrader[trader]].volumeReferredDai);\n    }\n\n    function getPercentOfOpenFeeP_calc(\n        uint volumeReferredDai\n    ) public view returns(uint resultP){\n        resultP = (openFeeP * (\n            startReferrerFeeP * PRECISION +\n            volumeReferredDai * PRECISION * (100 - startReferrerFeeP) / 1e18 / targetVolumeDai)\n        ) / 100;\n\n        resultP = resultP > openFeeP * PRECISION ?\n            openFeeP * PRECISION :\n            resultP;\n    }\n\n    function getTraderReferrer(\n        address trader\n    ) external view returns(address){\n        address referrer = referrerByTrader[trader];\n\n        return referrerDetails[referrer].active ? referrer : address(0);\n    }\n    function getReferrersReferred(\n        address ally\n    ) external view returns (address[] memory){\n        return allyDetails[ally].referrersReferred;\n    }\n    function getTradersReferred(\n        address referred\n    ) external view returns (address[] memory){\n        return referrerDetails[referred].tradersReferred;\n    }\n}"
    },
    "contracts/contracts/GNSTradingV6_4_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterfaceV5.sol\";\nimport \"../interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../interfaces/GNSReferralsInterfaceV6_2.sol\";\nimport \"../interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\nimport \"../interfaces/IGNSOracleRewardsV6_4_1.sol\";\nimport \"../v6.2/Delegatable.sol\";\nimport \"../libraries/ChainUtils.sol\";\nimport \"../libraries/TradeUtils.sol\";\nimport \"../libraries/PackingUtils.sol\";\n\ncontract GNSTradingV6_4_1 is Delegatable {\n    using TradeUtils for address;\n    using PackingUtils for uint256;\n\n    // Contracts (constant)\n    StorageInterfaceV5 public immutable storageT;\n    IGNSOracleRewardsV6_4_1 public immutable oracleRewards;\n    GNSPairInfosInterfaceV6 public immutable pairInfos;\n    GNSReferralsInterfaceV6_2 public immutable referrals;\n    GNSBorrowingFeesInterfaceV6_4 public immutable borrowingFees;\n\n    // Params (constant)\n    uint private constant PRECISION = 1e10;\n    uint private constant MAX_SL_P = 75; // -75% PNL\n\n    // Params (adjustable)\n    uint public maxPosDai; // 1e18 (eg. 75000 * 1e18)\n    uint public marketOrdersTimeout; // block (eg. 30)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n\n    mapping(address => bool) public bypassTriggerLink; // Doesn't have to pay link in executeNftOrder()\n\n    // Events\n    event Done(bool done);\n    event Paused(bool paused);\n\n    event NumberUpdated(string name, uint value);\n    event BypassTriggerLinkUpdated(address user, bool bypass);\n\n    event MarketOrderInitiated(uint indexed orderId, address indexed trader, uint indexed pairIndex, bool open);\n\n    event OpenLimitPlaced(address indexed trader, uint indexed pairIndex, uint index);\n    event OpenLimitUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newPrice,\n        uint newTp,\n        uint newSl,\n        uint maxSlippageP\n    );\n    event OpenLimitCanceled(address indexed trader, uint indexed pairIndex, uint index);\n\n    event TpUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newTp);\n    event SlUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newSl);\n\n    event NftOrderInitiated(uint orderId, address indexed trader, uint indexed pairIndex, bool byPassesLinkCost);\n\n    event ChainlinkCallbackTimeout(uint indexed orderId, StorageInterfaceV5.PendingMarketOrder order);\n    event CouldNotCloseTrade(address indexed trader, uint indexed pairIndex, uint index);\n\n    constructor(\n        StorageInterfaceV5 _storageT,\n        IGNSOracleRewardsV6_4_1 _oracleRewards,\n        GNSPairInfosInterfaceV6 _pairInfos,\n        GNSReferralsInterfaceV6_2 _referrals,\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\n        uint _maxPosDai,\n        uint _marketOrdersTimeout\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_oracleRewards) != address(0) &&\n                address(_pairInfos) != address(0) &&\n                address(_referrals) != address(0) &&\n                address(_borrowingFees) != address(0) &&\n                _maxPosDai > 0 &&\n                _marketOrdersTimeout > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        oracleRewards = _oracleRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        borrowingFees = _borrowingFees;\n\n        maxPosDai = _maxPosDai;\n        marketOrdersTimeout = _marketOrdersTimeout;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier notContract() {\n        require(tx.origin == msg.sender);\n        _;\n    }\n    modifier notDone() {\n        require(!isDone, \"DONE\");\n        _;\n    }\n\n    // Manage params\n    function setMaxPosDai(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        maxPosDai = value;\n        emit NumberUpdated(\"maxPosDai\", value);\n    }\n\n    function setMarketOrdersTimeout(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        marketOrdersTimeout = value;\n        emit NumberUpdated(\"marketOrdersTimeout\", value);\n    }\n\n    function setBypassTriggerLink(address user, bool bypass) external onlyGov {\n        bypassTriggerLink[user] = bypass;\n\n        emit BypassTriggerLinkUpdated(user, bypass);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n        emit Paused(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n        emit Done(isDone);\n    }\n\n    // Open new trade (MARKET/LIMIT)\n    function openTrade(\n        StorageInterfaceV5.Trade memory t,\n        IGNSOracleRewardsV6_4_1.OpenLimitOrderType orderType, // LEGACY => market\n        uint slippageP, // 1e10 (%)\n        address referrer\n    ) external notContract notDone {\n        require(!isPaused, \"PAUSED\");\n        require(t.openPrice * slippageP < type(uint256).max, \"OVERFLOW\");\n        require(t.openPrice > 0, \"PRICE_ZERO\");\n\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        address sender = _msgSender();\n\n        require(\n            storageT.openTradesCount(sender, t.pairIndex) +\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\n                storageT.maxTradesPerPair(),\n            \"MAX_TRADES_PER_PAIR\"\n        );\n\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \"MAX_PENDING_ORDERS\");\n        require(t.positionSizeDai <= maxPosDai, \"ABOVE_MAX_POS\");\n        require(t.positionSizeDai * t.leverage >= pairsStored.pairMinLevPosDai(t.pairIndex), \"BELOW_MIN_POS\");\n\n        require(\n            t.leverage > 0 &&\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\n                t.leverage <= _pairMaxLeverage(pairsStored, t.pairIndex),\n            \"LEVERAGE_INCORRECT\"\n        );\n\n        require(t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice), \"WRONG_TP\");\n        require(t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice), \"WRONG_SL\");\n\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, t.pairIndex, t.buy, t.positionSizeDai * t.leverage);\n        require(priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(), \"PRICE_IMPACT_TOO_HIGH\");\n\n        storageT.transferDai(sender, address(storageT), t.positionSizeDai);\n\n        if (orderType != IGNSOracleRewardsV6_4_1.OpenLimitOrderType.LEGACY) {\n            uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\n\n            storageT.storeOpenLimitOrder(\n                StorageInterfaceV5.OpenLimitOrder(\n                    sender,\n                    t.pairIndex,\n                    index,\n                    t.positionSizeDai,\n                    0,\n                    t.buy,\n                    t.leverage,\n                    t.tp,\n                    t.sl,\n                    t.openPrice,\n                    t.openPrice,\n                    block.number,\n                    0\n                )\n            );\n\n            oracleRewards.setOpenLimitOrderType(sender, t.pairIndex, index, orderType);\n\n            address c = storageT.callbacks();\n            c.setTradeLastUpdated(\n                sender,\n                t.pairIndex,\n                index,\n                TradingCallbacksV6_4.TradeType.LIMIT,\n                ChainUtils.getBlockNumber()\n            );\n            c.setTradeData(sender, t.pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, slippageP);\n\n            emit OpenLimitPlaced(sender, t.pairIndex, index);\n        } else {\n            uint orderId = aggregator.getPrice(\n                t.pairIndex,\n                AggregatorInterfaceV6_4.OrderType.MARKET_OPEN,\n                t.positionSizeDai * t.leverage,\n                ChainUtils.getBlockNumber()\n            );\n\n            storageT.storePendingMarketOrder(\n                StorageInterfaceV5.PendingMarketOrder(\n                    StorageInterfaceV5.Trade(\n                        sender,\n                        t.pairIndex,\n                        0,\n                        0,\n                        t.positionSizeDai,\n                        0,\n                        t.buy,\n                        t.leverage,\n                        t.tp,\n                        t.sl\n                    ),\n                    0,\n                    t.openPrice,\n                    slippageP,\n                    0,\n                    0\n                ),\n                orderId,\n                true\n            );\n\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\n        }\n\n        referrals.registerPotentialReferrer(sender, referrer);\n    }\n\n    // Close trade (MARKET)\n    function closeTradeMarket(uint pairIndex, uint index) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(sender, pairIndex, index);\n\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \"MAX_PENDING_ORDERS\");\n        require(!i.beingMarketClosed, \"ALREADY_BEING_CLOSED\");\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint orderId = storageT.priceAggregator().getPrice(\n            pairIndex,\n            AggregatorInterfaceV6_4.OrderType.MARKET_CLOSE,\n            (t.initialPosToken * i.tokenPriceDai * t.leverage) / PRECISION,\n            ChainUtils.getBlockNumber()\n        );\n\n        storageT.storePendingMarketOrder(\n            StorageInterfaceV5.PendingMarketOrder(\n                StorageInterfaceV5.Trade(sender, pairIndex, index, 0, 0, 0, false, 0, 0, 0),\n                0,\n                0,\n                0,\n                0,\n                0\n            ),\n            orderId,\n            false\n        );\n\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\n    }\n\n    // Manage limit order (OPEN)\n    function updateOpenLimitOrder(\n        uint pairIndex,\n        uint index,\n        uint price, // PRECISION\n        uint tp,\n        uint sl,\n        uint maxSlippageP\n    ) external notContract notDone {\n        require(price > 0, \"PRICE_ZERO\");\n\n        address sender = _msgSender();\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \"NO_LIMIT\");\n\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\n\n        require(tp == 0 || (o.buy ? tp > price : tp < price), \"WRONG_TP\");\n        require(sl == 0 || (o.buy ? sl < price : sl > price), \"WRONG_SL\");\n\n        require(price * maxSlippageP < type(uint256).max, \"OVERFLOW\");\n\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\n\n        o.minPrice = price;\n        o.maxPrice = price;\n        o.tp = tp;\n        o.sl = sl;\n\n        storageT.updateOpenLimitOrder(o);\n\n        address c = storageT.callbacks();\n        c.setTradeLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.LIMIT,\n            ChainUtils.getBlockNumber()\n        );\n        c.setTradeData(sender, pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, maxSlippageP);\n\n        emit OpenLimitUpdated(sender, pairIndex, index, price, tp, sl, maxSlippageP);\n    }\n\n    function cancelOpenLimitOrder(uint pairIndex, uint index) external notContract notDone {\n        address sender = _msgSender();\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \"NO_LIMIT\");\n\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\n\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\n\n        storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\n        storageT.transferDai(address(storageT), sender, o.positionSize);\n\n        emit OpenLimitCanceled(sender, pairIndex, index);\n    }\n\n    // Manage limit order (TP/SL)\n    function updateTp(uint pairIndex, uint index, uint newTp) external notContract notDone {\n        address sender = _msgSender();\n\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.TP);\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        storageT.updateTp(sender, pairIndex, index, newTp);\n        storageT.callbacks().setTpLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit TpUpdated(sender, pairIndex, index, newTp);\n    }\n\n    function updateSl(uint pairIndex, uint index, uint newSl) external notContract notDone {\n        address sender = _msgSender();\n\n        _checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.SL);\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\n\n        require(\n            newSl == 0 || (t.buy ? newSl >= t.openPrice - maxSlDist : newSl <= t.openPrice + maxSlDist),\n            \"SL_TOO_BIG\"\n        );\n\n        storageT.updateSl(sender, pairIndex, index, newSl);\n        storageT.callbacks().setSlLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit SlUpdated(sender, pairIndex, index, newSl);\n    }\n\n    // Execute limit order\n    function executeNftOrder(uint256 packed) external notContract notDone {\n        (uint _orderType, address trader, uint pairIndex, uint index, , ) = packed.unpackExecuteNftOrder();\n\n        StorageInterfaceV5.LimitOrder orderType = StorageInterfaceV5.LimitOrder(_orderType);\n        IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId = _checkNoPendingTrigger(\n            trader,\n            pairIndex,\n            index,\n            orderType\n        );\n\n        StorageInterfaceV5.Trade memory t;\n        bool isOpenLimit = orderType == StorageInterfaceV5.LimitOrder.OPEN;\n\n        if (isOpenLimit) {\n            require(storageT.hasOpenLimitOrder(trader, pairIndex, index), \"NO_LIMIT\");\n        } else {\n            t = storageT.openTrades(trader, pairIndex, index);\n\n            require(t.leverage > 0, \"NO_TRADE\");\n\n            if (orderType == StorageInterfaceV5.LimitOrder.LIQ) {\n                if (t.sl > 0) {\n                    uint liqPrice = borrowingFees.getTradeLiquidationPrice(\n                        GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\n                            t.trader,\n                            t.pairIndex,\n                            t.index,\n                            t.openPrice,\n                            t.buy,\n                            (t.initialPosToken *\n                                storageT.openTradesInfo(t.trader, t.pairIndex, t.index).tokenPriceDai) / PRECISION,\n                            t.leverage\n                        )\n                    );\n\n                    require(t.buy ? liqPrice > t.sl : liqPrice < t.sl, \"HAS_SL\");\n                }\n            } else {\n                require(orderType != StorageInterfaceV5.LimitOrder.SL || t.sl > 0, \"NO_SL\");\n                require(orderType != StorageInterfaceV5.LimitOrder.TP || t.tp > 0, \"NO_TP\");\n            }\n        }\n\n        address sender = _msgSender();\n        bool byPassesLinkCost = bypassTriggerLink[sender];\n\n        uint leveragedPosDai;\n\n        if (isOpenLimit) {\n            StorageInterfaceV5.OpenLimitOrder memory l = storageT.getOpenLimitOrder(trader, pairIndex, index);\n\n            uint _leveragedPosDai = l.positionSize * l.leverage;\n            (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, l.pairIndex, l.buy, _leveragedPosDai);\n\n            require(priceImpactP * l.leverage <= pairInfos.maxNegativePnlOnOpenP(), \"PRICE_IMPACT_TOO_HIGH\");\n\n            if (!byPassesLinkCost) {\n                leveragedPosDai = _leveragedPosDai;\n            }\n        } else if (!byPassesLinkCost) {\n            leveragedPosDai =\n                (t.initialPosToken * storageT.openTradesInfo(trader, pairIndex, index).tokenPriceDai * t.leverage) /\n                PRECISION;\n        }\n\n        if (leveragedPosDai > 0) {\n            storageT.transferLinkToAggregator(sender, pairIndex, leveragedPosDai);\n        }\n\n        uint orderId = _getPriceNftOrder(\n            isOpenLimit,\n            trader,\n            pairIndex,\n            index,\n            isOpenLimit ? TradingCallbacksV6_4.TradeType.LIMIT : TradingCallbacksV6_4.TradeType.MARKET,\n            orderType,\n            leveragedPosDai\n        );\n\n        StorageInterfaceV5.PendingNftOrder memory pendingNftOrder;\n        pendingNftOrder.nftHolder = sender;\n        pendingNftOrder.nftId = 0;\n        pendingNftOrder.trader = trader;\n        pendingNftOrder.pairIndex = pairIndex;\n        pendingNftOrder.index = index;\n        pendingNftOrder.orderType = orderType;\n\n        storageT.storePendingNftOrder(pendingNftOrder, orderId);\n        oracleRewards.storeTrigger(triggeredLimitId);\n\n        emit NftOrderInitiated(orderId, trader, pairIndex, byPassesLinkCost);\n    }\n\n    // Market timeout\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\n        StorageInterfaceV5.Trade memory t = o.trade;\n\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \"WAIT_TIMEOUT\");\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage > 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, true);\n        storageT.transferDai(address(storageT), sender, t.positionSizeDai);\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\n        StorageInterfaceV5.Trade memory t = o.trade;\n\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \"WAIT_TIMEOUT\");\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage == 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, false);\n\n        (bool success, ) = address(this).delegatecall(\n            abi.encodeWithSignature(\"closeTradeMarket(uint256,uint256)\", t.pairIndex, t.index)\n        );\n\n        if (!success) {\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\n        }\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    // Helpers (private)\n    function _checkNoPendingTrigger(\n        address trader,\n        uint pairIndex,\n        uint index,\n        StorageInterfaceV5.LimitOrder orderType\n    ) private view returns (IGNSOracleRewardsV6_4_1.TriggeredLimitId memory triggeredLimitId) {\n        triggeredLimitId = IGNSOracleRewardsV6_4_1.TriggeredLimitId(trader, pairIndex, index, orderType);\n        require(\n            !oracleRewards.triggered(triggeredLimitId) || oracleRewards.timedOut(triggeredLimitId),\n            \"PENDING_TRIGGER\"\n        );\n    }\n\n    function _pairMaxLeverage(PairsStorageInterfaceV6 pairsStored, uint pairIndex) private view returns (uint) {\n        uint max = TradingCallbacksV6_4(storageT.callbacks()).pairMaxLeverage(pairIndex);\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\n    }\n\n    function _getPriceNftOrder(\n        bool isOpenLimit,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType tradeType,\n        StorageInterfaceV5.LimitOrder orderType,\n        uint leveragedPosDai\n    ) private returns (uint orderId) {\n        TradingCallbacksV6_4.LastUpdated memory lastUpdated = TradingCallbacksV6_4(storageT.callbacks())\n            .tradeLastUpdated(trader, pairIndex, index, tradeType);\n\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n\n        orderId = aggregator.getPrice(\n            pairIndex,\n            isOpenLimit ? AggregatorInterfaceV6_4.OrderType.LIMIT_OPEN : AggregatorInterfaceV6_4.OrderType.LIMIT_CLOSE,\n            leveragedPosDai,\n            isOpenLimit ? lastUpdated.limit : orderType == StorageInterfaceV5.LimitOrder.SL\n                ? lastUpdated.sl\n                : orderType == StorageInterfaceV5.LimitOrder.TP\n                ? lastUpdated.tp\n                : lastUpdated.created\n        );\n    }\n}"
    },
    "contracts/contracts/GTokenV6_3_2.sol": {
      "content": "// // SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ncontract GTokenV6_3_2 {\n\n}\n\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n// import \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n// import \"../interfaces/IGToken.sol\";\n// import \"../interfaces/IGnsToken.sol\";\n// import \"../interfaces/INft.sol\";\n// import \"../interfaces/IOpenTradesPnlFeed.sol\";\n\n// import \"../libraries/ChainUtils.sol\";\n\n// pragma solidity 0.8.20;\n\n// contract GTokenV6_3_2 is ERC20Upgradeable, ERC4626Upgradeable, OwnableUpgradeable, IGToken {\n//     using MathUpgradeable for uint;\n\n//     // Contracts & Addresses (constant)\n//     address public gnsToken;\n//     INft public lockedDepositNft;\n\n//     // Contracts & Addresses (adjustable)\n//     address public manager; // 3-day timelock contract\n//     address public admin; // bypasses timelock, access to emergency functions\n\n//     address public pnlHandler;\n//     IOpenTradesPnlFeed public openTradesPnlFeed;\n//     GnsPriceProvider public gnsPriceProvider;\n\n//     struct GnsPriceProvider {\n//         address addr;\n//         bytes signature;\n//     }\n\n//     // Parameters (constant)\n//     uint constant PRECISION = 1e18; // 18 decimals (acc values & price)\n//     uint constant PRECISION_2 = 1e40; // 40 decimals (acc block weighted market cap)\n//     uint constant GNS_PRECISION = 1e10; // 10 decimals (gns/asset oracle)\n//     uint constant MIN_DAILY_ACC_PNL_DELTA = PRECISION / 10; // 0.1 (price delta)\n//     uint constant MAX_SUPPLY_INCREASE_DAILY_P = 50 * PRECISION; // 50% / day (when under collat)\n//     uint constant MAX_LOSSES_BURN_P = 25 * PRECISION; // 25% of all losses\n//     uint constant MAX_GNS_SUPPLY_MINT_DAILY_P = PRECISION / 20; // 0.05% / day (18.25% / yr max)\n//     uint constant MAX_DISCOUNT_P = 10 * PRECISION; // 10%\n//     uint public MIN_LOCK_DURATION; // min locked asset deposit duration\n//     uint constant MAX_LOCK_DURATION = 365 days; // max locked asset deposit duration\n//     uint[] WITHDRAW_EPOCHS_LOCKS; // epochs withdraw locks at over collat thresholds\n\n//     // Parameters (adjustable)\n//     uint public maxAccOpenPnlDelta; // PRECISION (max price delta on new epochs from open pnl)\n//     uint public maxDailyAccPnlDelta; // PRECISION (max daily price delta from closed pnl)\n//     uint[2] public withdrawLockThresholdsP; // PRECISION (% of over collat, used with WITHDRAW_EPOCHS_LOCKS)\n//     uint public maxSupplyIncreaseDailyP; // PRECISION (% per day, when under collat)\n//     uint public lossesBurnP; // PRECISION (% of all losses)\n//     uint public maxGnsSupplyMintDailyP; // PRECISION (% of gns supply)\n//     uint public maxDiscountP; // PRECISION (%, maximum discount for locked deposits)\n//     uint public maxDiscountThresholdP; // PRECISION (maximum collat %, for locked deposits)\n\n//     // Price state\n//     uint public shareToAssetsPrice; // PRECISION\n//     int public accPnlPerTokenUsed; // PRECISION (snapshot of accPnlPerToken)\n//     int public accPnlPerToken; // PRECISION (updated in real-time)\n//     uint public accRewardsPerToken; // PRECISION\n\n//     // Closed Pnl state\n//     int public dailyAccPnlDelta; // PRECISION\n//     uint public lastDailyAccPnlDeltaReset; // timestamp\n\n//     // Epochs state (withdrawals)\n//     uint public currentEpoch; // global id\n//     uint public currentEpochStart; // timestamp\n//     uint public currentEpochPositiveOpenPnl; // 1e18\n\n//     // Deposit / Withdraw state\n//     uint public currentMaxSupply; // 1e18\n//     uint public lastMaxSupplyUpdate; // timestamp\n//     mapping(address => mapping(uint => uint)) public withdrawRequests; // owner => unlock epoch => shares\n\n//     // Locked deposits state\n//     uint public lockedDepositsCount; // global id\n//     mapping(uint => LockedDeposit) public lockedDeposits;\n\n//     // Deplete / Refill state\n//     uint public assetsToDeplete; // 1e18\n//     uint public dailyMintedGns; // 1e18\n//     uint public lastDailyMintedGnsReset; // timestamp\n\n//     // Statistics (not used for contract logic)\n//     uint public totalDeposited; // 1e18 (assets)\n//     int public totalClosedPnl; // 1e18 (assets)\n//     uint public totalRewards; // 1e18 (assets)\n//     int public totalLiability; // 1e18 (assets)\n//     uint public totalLockedDiscounts; // 1e18 (assets)\n//     uint public totalDiscounts; // 1e18 (assets)\n//     uint public totalDepleted; // 1e18 (assets)\n//     uint public totalDepletedGns; // 1e18 (gns)\n//     uint public totalRefilled; // 1e18 (assets)\n//     uint public totalRefilledGns; // 1e18 (gns)\n\n//     // Useful acc values\n//     uint public accBlockWeightedMarketCap; // 1e40, acc sum of (blocks elapsed / market cap)\n//     uint public accBlockWeightedMarketCapLastStored; // block\n\n//     // Events\n//     event AddressParamUpdated(string name, address newValue);\n//     event GnsPriceProviderUpdated(GnsPriceProvider newValue);\n//     event NumberParamUpdated(string name, uint newValue);\n//     event WithdrawLockThresholdsPUpdated(uint[2] newValue);\n\n//     event CurrentMaxSupplyUpdated(uint newValue);\n//     event DailyAccPnlDeltaReset();\n//     event ShareToAssetsPriceUpdated(uint newValue);\n//     event OpenTradesPnlFeedCallFailed();\n\n//     event WithdrawRequested(\n//         address indexed sender,\n//         address indexed owner,\n//         uint shares,\n//         uint currEpoch,\n//         uint indexed unlockEpoch\n//     );\n//     event WithdrawCanceled(\n//         address indexed sender,\n//         address indexed owner,\n//         uint shares,\n//         uint currEpoch,\n//         uint indexed unlockEpoch\n//     );\n\n//     event DepositLocked(address indexed sender, address indexed owner, uint depositId, LockedDeposit d);\n//     event DepositUnlocked(\n//         address indexed sender,\n//         address indexed receiver,\n//         address indexed owner,\n//         uint depositId,\n//         LockedDeposit d\n//     );\n\n//     event RewardDistributed(address indexed sender, uint assets);\n\n//     event AssetsSent(address indexed sender, address indexed receiver, uint assets);\n//     event AssetsReceived(address indexed sender, address indexed user, uint assets, uint assetsLessDeplete);\n\n//     event Depleted(address indexed sender, uint assets, uint amountGns);\n//     event Refilled(address indexed sender, uint assets, uint amountGns);\n\n//     event AccPnlPerTokenUsedUpdated(\n//         address indexed sender,\n//         uint indexed newEpoch,\n//         uint prevPositiveOpenPnl,\n//         uint newPositiveOpenPnl,\n//         uint newEpochPositiveOpenPnl,\n//         int newAccPnlPerTokenUsed\n//     );\n\n//     event AccBlockWeightedMarketCapStored(uint newAccValue);\n\n//     // Prevent stack too deep error\n//     struct ContractAddresses {\n//         address asset;\n//         address owner; // 2-week timelock contract\n//         address manager; // 3-day timelock contract\n//         address admin; // bypasses timelock, access to emergency functions\n//         address gnsToken;\n//         address lockedDepositNft;\n//         address pnlHandler;\n//         address openTradesPnlFeed;\n//         GnsPriceProvider gnsPriceProvider;\n//     }\n\n//     // Initializer function called when this contract is deployed\n//     function initialize(\n//         string memory _name,\n//         string memory _symbol,\n//         ContractAddresses memory _contractAddresses,\n//         uint _MIN_LOCK_DURATION,\n//         uint _maxAccOpenPnlDelta,\n//         uint _maxDailyAccPnlDelta,\n//         uint[2] memory _withdrawLockThresholdsP,\n//         uint _maxSupplyIncreaseDailyP,\n//         uint _lossesBurnP,\n//         uint _maxGnsSupplyMintDailyP,\n//         uint _maxDiscountP,\n//         uint _maxDiscountThresholdP\n//     ) external initializer {\n//         require(\n//             _contractAddresses.asset != address(0) &&\n//                 _contractAddresses.owner != address(0) &&\n//                 _contractAddresses.manager != address(0) &&\n//                 _contractAddresses.admin != address(0) &&\n//                 _contractAddresses.owner != _contractAddresses.manager &&\n//                 _contractAddresses.manager != _contractAddresses.admin &&\n//                 _contractAddresses.gnsToken != address(0) &&\n//                 _contractAddresses.lockedDepositNft != address(0) &&\n//                 _contractAddresses.pnlHandler != address(0) &&\n//                 _contractAddresses.openTradesPnlFeed != address(0) &&\n//                 _contractAddresses.gnsPriceProvider.addr != address(0) &&\n//                 _contractAddresses.gnsPriceProvider.signature.length > 0 &&\n//                 _maxDailyAccPnlDelta >= MIN_DAILY_ACC_PNL_DELTA &&\n//                 _withdrawLockThresholdsP[1] > _withdrawLockThresholdsP[0] &&\n//                 _maxSupplyIncreaseDailyP <= MAX_SUPPLY_INCREASE_DAILY_P &&\n//                 _lossesBurnP <= MAX_LOSSES_BURN_P &&\n//                 _maxGnsSupplyMintDailyP <= MAX_GNS_SUPPLY_MINT_DAILY_P &&\n//                 _maxDiscountP <= MAX_DISCOUNT_P &&\n//                 _maxDiscountThresholdP >= 100 * PRECISION,\n//             \"WRONG_PARAMS\"\n//         );\n\n//         // TODO\n//         // __ERC20_init(_name, _symbol);\n//         // __ERC4626_init(IERC20MetadataUpgradeable(_contractAddresses.asset));\n//         _transferOwnership(_contractAddresses.owner);\n\n//         gnsToken = _contractAddresses.gnsToken;\n//         lockedDepositNft = INft(_contractAddresses.lockedDepositNft);\n//         manager = _contractAddresses.manager;\n//         admin = _contractAddresses.admin;\n//         pnlHandler = _contractAddresses.pnlHandler;\n//         openTradesPnlFeed = IOpenTradesPnlFeed(_contractAddresses.openTradesPnlFeed);\n//         gnsPriceProvider = _contractAddresses.gnsPriceProvider;\n\n//         MIN_LOCK_DURATION = _MIN_LOCK_DURATION;\n\n//         maxAccOpenPnlDelta = _maxAccOpenPnlDelta;\n//         maxDailyAccPnlDelta = _maxDailyAccPnlDelta;\n//         withdrawLockThresholdsP = _withdrawLockThresholdsP;\n//         maxSupplyIncreaseDailyP = _maxSupplyIncreaseDailyP;\n//         lossesBurnP = _lossesBurnP;\n//         maxGnsSupplyMintDailyP = _maxGnsSupplyMintDailyP;\n//         maxDiscountP = _maxDiscountP;\n//         maxDiscountThresholdP = _maxDiscountThresholdP;\n\n//         shareToAssetsPrice = PRECISION;\n//         currentEpoch = 1;\n//         currentEpochStart = block.timestamp;\n//         WITHDRAW_EPOCHS_LOCKS = [3, 2, 1];\n//     }\n\n//     function initializeV2() external reinitializer(2) {\n//         storeAccBlockWeightedMarketCap();\n//         totalDeposited += totalRewards; // include all already distributed rewards in totalDeposited\n//     }\n\n//     // Modifiers\n//     modifier onlyManager() {\n//         require(_msgSender() == manager, \"ONLY_MANAGER\");\n//         _;\n//     }\n\n//     modifier checks(uint assetsOrShares) {\n//         require(shareToAssetsPrice > 0, \"PRICE_0\");\n//         require(assetsOrShares > 0, \"VALUE_0\");\n//         _;\n//     }\n\n//     modifier validDiscount(uint lockDuration) {\n//         require(maxDiscountP > 0, \"NO_ACTIVE_DISCOUNT\");\n//         require(lockDuration >= MIN_LOCK_DURATION, \"BELOW_MIN_LOCK_DURATION\");\n//         require(lockDuration <= MAX_LOCK_DURATION, \"ABOVE_MAX_LOCK_DURATION\");\n//         _;\n//     }\n\n//     // Manage addresses\n//     function transferOwnership(address newOwner) public override onlyOwner {\n//         require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n//         require(newOwner != manager && newOwner != admin, \"WRONG_VALUE\");\n//         _transferOwnership(newOwner);\n//     }\n\n//     function updateManager(address newValue) external onlyOwner {\n//         require(newValue != address(0), \"ADDRESS_0\");\n//         require(newValue != owner() && newValue != admin, \"WRONG_VALUE\");\n//         manager = newValue;\n//         emit AddressParamUpdated(\"manager\", newValue);\n//     }\n\n//     function updateAdmin(address newValue) external onlyManager {\n//         require(newValue != address(0), \"ADDRESS_0\");\n//         require(newValue != owner() && newValue != manager, \"WRONG_VALUE\");\n//         admin = newValue;\n//         emit AddressParamUpdated(\"admin\", newValue);\n//     }\n\n//     function updatePnlHandler(address newValue) external onlyOwner {\n//         require(newValue != address(0), \"ADDRESS_0\");\n//         pnlHandler = newValue;\n//         emit AddressParamUpdated(\"pnlHandler\", newValue);\n//     }\n\n//     function updateGnsPriceProvider(GnsPriceProvider memory newValue) external onlyManager {\n//         require(newValue.addr != address(0), \"ADDRESS_0\");\n//         require(newValue.signature.length > 0, \"BYTES_0\");\n//         gnsPriceProvider = newValue;\n//         emit GnsPriceProviderUpdated(newValue);\n//     }\n\n//     function updateOpenTradesPnlFeed(address newValue) external onlyOwner {\n//         require(newValue != address(0), \"ADDRESS_0\");\n//         openTradesPnlFeed = IOpenTradesPnlFeed(newValue);\n//         emit AddressParamUpdated(\"openTradesPnlFeed\", newValue);\n//     }\n\n//     // Manage parameters\n//     function updateMaxAccOpenPnlDelta(uint newValue) external onlyOwner {\n//         maxAccOpenPnlDelta = newValue;\n//         emit NumberParamUpdated(\"maxAccOpenPnlDelta\", newValue);\n//     }\n\n//     function updateMaxDailyAccPnlDelta(uint newValue) external onlyManager {\n//         require(newValue >= MIN_DAILY_ACC_PNL_DELTA, \"BELOW_MIN\");\n//         maxDailyAccPnlDelta = newValue;\n//         emit NumberParamUpdated(\"maxDailyAccPnlDelta\", newValue);\n//     }\n\n//     function updateWithdrawLockThresholdsP(uint[2] memory newValue) external onlyOwner {\n//         require(newValue[1] > newValue[0], \"WRONG_VALUES\");\n//         withdrawLockThresholdsP = newValue;\n//         emit WithdrawLockThresholdsPUpdated(newValue);\n//     }\n\n//     function updateMaxSupplyIncreaseDailyP(uint newValue) external onlyManager {\n//         require(newValue <= MAX_SUPPLY_INCREASE_DAILY_P, \"ABOVE_MAX\");\n//         maxSupplyIncreaseDailyP = newValue;\n//         emit NumberParamUpdated(\"maxSupplyIncreaseDailyP\", newValue);\n//     }\n\n//     function updateLossesBurnP(uint newValue) external onlyManager {\n//         require(newValue <= MAX_LOSSES_BURN_P, \"ABOVE_MAX\");\n//         lossesBurnP = newValue;\n//         emit NumberParamUpdated(\"lossesBurnP\", newValue);\n//     }\n\n//     function updateMaxGnsSupplyMintDailyP(uint newValue) external onlyManager {\n//         require(newValue <= MAX_GNS_SUPPLY_MINT_DAILY_P, \"ABOVE_MAX\");\n//         maxGnsSupplyMintDailyP = newValue;\n//         emit NumberParamUpdated(\"maxGnsSupplyMintDailyP\", newValue);\n//     }\n\n//     function updateMaxDiscountP(uint newValue) external onlyManager {\n//         require(newValue <= MAX_DISCOUNT_P, \"ABOVE_MAX_DISCOUNT\");\n//         maxDiscountP = newValue;\n//         emit NumberParamUpdated(\"maxDiscountP\", newValue);\n//     }\n\n//     function updateMaxDiscountThresholdP(uint newValue) external onlyManager {\n//         require(newValue >= 100 * PRECISION, \"BELOW_MIN\");\n//         maxDiscountThresholdP = newValue;\n//         emit NumberParamUpdated(\"maxDiscountThresholdP\", newValue);\n//     }\n\n//     // View helper functions\n//     function maxAccPnlPerToken() public view returns (uint) {\n//         // PRECISION\n//         return PRECISION + accRewardsPerToken;\n//     }\n\n//     function collateralizationP() public view returns (uint) {\n//         // PRECISION (%)\n//         uint _maxAccPnlPerToken = maxAccPnlPerToken();\n//         return\n//             ((\n//                 accPnlPerTokenUsed > 0\n//                     ? (_maxAccPnlPerToken - uint(accPnlPerTokenUsed))\n//                     : (_maxAccPnlPerToken + uint(accPnlPerTokenUsed * (-1)))\n//             ) *\n//                 100 *\n//                 PRECISION) / _maxAccPnlPerToken;\n//     }\n\n//     // TODO\n//     // function gnsTokenToAssetsPrice() public view returns (uint price) {\n//     //     // GNS_PRECISION\n//     //     (bool success, bytes memory result) = gnsPriceProvider.addr.staticcall(gnsPriceProvider.signature);\n\n//     //     require(success == true, \"GNS_PRICE_CALL_FAILED\");\n//     //     (price) = abi.decode(result, (uint));\n\n//     //     require(price > 0, \"GNS_TOKEN_PRICE_0\");\n//     // }\n\n//     function withdrawEpochsTimelock() public view returns (uint) {\n//         uint collatP = collateralizationP();\n//         uint overCollatP = (collatP - MathUpgradeable.min(collatP, 100 * PRECISION));\n\n//         return\n//             overCollatP > withdrawLockThresholdsP[1]\n//                 ? WITHDRAW_EPOCHS_LOCKS[2]\n//                 : (overCollatP > withdrawLockThresholdsP[0] ? WITHDRAW_EPOCHS_LOCKS[1] : WITHDRAW_EPOCHS_LOCKS[0]);\n//     }\n\n//     function lockDiscountP(uint collatP, uint lockDuration) public view returns (uint) {\n//         return\n//             ((\n//                 collatP <= 100 * PRECISION\n//                     ? maxDiscountP\n//                     : (\n//                         collatP <= maxDiscountThresholdP\n//                             ? (maxDiscountP * (maxDiscountThresholdP - collatP)) /\n//                                 (maxDiscountThresholdP - 100 * PRECISION)\n//                             : 0\n//                     )\n//             ) * lockDuration) / MAX_LOCK_DURATION;\n//     }\n\n//     function totalSharesBeingWithdrawn(address owner) public view returns (uint shares) {\n//         for (uint i = currentEpoch; i <= currentEpoch + WITHDRAW_EPOCHS_LOCKS[0]; i++) {\n//             shares += withdrawRequests[owner][i];\n//         }\n//     }\n\n//     function getPendingAccBlockWeightedMarketCap(uint currentBlock) public view returns (uint) {\n//         return\n//             accBlockWeightedMarketCap +\n//             ((currentBlock - accBlockWeightedMarketCapLastStored) * PRECISION_2) /\n//             MathUpgradeable.max(marketCap(), 1);\n//     }\n\n//     // Public helper functions\n//     function tryUpdateCurrentMaxSupply() public {\n//         if (block.timestamp - lastMaxSupplyUpdate >= 24 hours) {\n//             currentMaxSupply = (totalSupply() * (PRECISION * 100 + maxSupplyIncreaseDailyP)) / (PRECISION * 100);\n//             lastMaxSupplyUpdate = block.timestamp;\n\n//             emit CurrentMaxSupplyUpdated(currentMaxSupply);\n//         }\n//     }\n\n//     function tryResetDailyAccPnlDelta() public {\n//         if (block.timestamp - lastDailyAccPnlDeltaReset >= 24 hours) {\n//             dailyAccPnlDelta = 0;\n//             lastDailyAccPnlDeltaReset = block.timestamp;\n\n//             emit DailyAccPnlDeltaReset();\n//         }\n//     }\n\n//     function tryNewOpenPnlRequestOrEpoch() public {\n//         // Fault tolerance so that activity can continue anyway\n//         (bool success, ) = address(openTradesPnlFeed).call(abi.encodeWithSignature(\"newOpenPnlRequestOrEpoch()\"));\n//         if (!success) {\n//             emit OpenTradesPnlFeedCallFailed();\n//         }\n//     }\n\n//     function storeAccBlockWeightedMarketCap() public {\n//         uint currentBlock = ChainUtils.getBlockNumber();\n//         accBlockWeightedMarketCap = getPendingAccBlockWeightedMarketCap(currentBlock);\n//         accBlockWeightedMarketCapLastStored = currentBlock;\n\n//         emit AccBlockWeightedMarketCapStored(accBlockWeightedMarketCap);\n//     }\n\n//     // Private helper functions\n//     function updateShareToAssetsPrice() private {\n//         storeAccBlockWeightedMarketCap();\n\n//         shareToAssetsPrice = maxAccPnlPerToken() - (accPnlPerTokenUsed > 0 ? uint(accPnlPerTokenUsed) : uint(0)); // PRECISION\n//         emit ShareToAssetsPriceUpdated(shareToAssetsPrice);\n//     }\n\n//     function _assetIERC20() private view returns (IERC20Upgradeable) {\n//         return IERC20Upgradeable(asset());\n//     }\n\n//     // Override ERC-20 functions (prevent sending to address that is withdrawing)\n//     function transfer(address to, uint amount) public override(IERC20, ERC20Upgradeable) returns (bool) {\n//         address sender = _msgSender();\n//         require(totalSharesBeingWithdrawn(sender) <= balanceOf(sender) - amount, \"PENDING_WITHDRAWAL\");\n//         _transfer(sender, to, amount);\n//         return true;\n//     }\n\n//     function transferFrom(\n//         address from,\n//         address to,\n//         uint amount\n//     ) public override(IERC20, ERC20Upgradeable) returns (bool) {\n//         require(totalSharesBeingWithdrawn(from) <= balanceOf(from) - amount, \"PENDING_WITHDRAWAL\");\n//         _spendAllowance(from, _msgSender(), amount);\n//         _transfer(from, to, amount);\n//         return true;\n//     }\n\n//     // Override ERC-4626 view functions\n//     function decimals() public view override(ERC20Upgradeable, ERC4626Upgradeable) returns (uint8) {\n//         return ERC4626Upgradeable.decimals();\n//     }\n\n//     // TODO\n//     function _convertToShares(\n//         uint assets,\n//         MathUpgradeable.Rounding rounding\n//     ) internal view \n//     // override\n//      returns (uint shares) {\n//         return assets.mulDiv(PRECISION, shareToAssetsPrice, rounding);\n//     }\n\n//     // TODO\n//     function _convertToAssets(\n//         uint shares,\n//         MathUpgradeable.Rounding rounding\n//     ) internal view \n//     // override \n//     returns (uint assets) {\n//         // Prevent overflow when called from maxDeposit with maxMint = uint.max\n//         if (shares == type(uint).max && shareToAssetsPrice >= PRECISION) {\n//             return shares;\n//         }\n//         return shares.mulDiv(shareToAssetsPrice, PRECISION, rounding);\n//     }\n\n//     function maxMint(address) public view override returns (uint) {\n//         return\n//             accPnlPerTokenUsed > 0\n//                 ? currentMaxSupply - MathUpgradeable.min(currentMaxSupply, totalSupply())\n//                 : type(uint).max;\n//     }\n\n//     function maxDeposit(address owner) public view override returns (uint) {\n//         return _convertToAssets(maxMint(owner), MathUpgradeable.Rounding.Down);\n//     }\n\n//     function maxRedeem(address owner) public view override returns (uint) {\n//         return\n//             openTradesPnlFeed.nextEpochValuesRequestCount() == 0\n//                 ? MathUpgradeable.min(withdrawRequests[owner][currentEpoch], totalSupply() - 1)\n//                 : 0;\n//     }\n\n//     function maxWithdraw(address owner) public view override returns (uint) {\n//         return _convertToAssets(maxRedeem(owner), MathUpgradeable.Rounding.Down);\n//     }\n\n//     // Override ERC-4626 interactions (call scaleVariables on every deposit / withdrawal)\n//     function deposit(uint assets, address receiver) public override checks(assets) returns (uint) {\n//         require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n//         uint shares = previewDeposit(assets);\n//         scaleVariables(shares, assets, true);\n\n//         _deposit(_msgSender(), receiver, assets, shares);\n//         return shares;\n//     }\n\n//     function mint(uint shares, address receiver) public override checks(shares) returns (uint) {\n//         require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n//         uint assets = previewMint(shares);\n//         scaleVariables(shares, assets, true);\n\n//         _deposit(_msgSender(), receiver, assets, shares);\n//         return assets;\n//     }\n\n//     function withdraw(uint assets, address receiver, address owner) public override checks(assets) returns (uint) {\n//         require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n//         uint shares = previewWithdraw(assets);\n//         withdrawRequests[owner][currentEpoch] -= shares;\n\n//         scaleVariables(shares, assets, false);\n\n//         _withdraw(_msgSender(), receiver, owner, assets, shares);\n//         return shares;\n//     }\n\n//     function redeem(uint shares, address receiver, address owner) public override checks(shares) returns (uint) {\n//         require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n//         withdrawRequests[owner][currentEpoch] -= shares;\n\n//         uint assets = previewRedeem(shares);\n//         scaleVariables(shares, assets, false);\n\n//         _withdraw(_msgSender(), receiver, owner, assets, shares);\n//         return assets;\n//     }\n\n//     function scaleVariables(uint shares, uint assets, bool isDeposit) private {\n//         uint supply = totalSupply();\n\n//         if (accPnlPerToken < 0) {\n//             accPnlPerToken = (accPnlPerToken * int(supply)) / (isDeposit ? int(supply + shares) : int(supply - shares));\n//         } else if (accPnlPerToken > 0) {\n//             totalLiability += ((int(shares) * totalLiability) / int(supply)) * (isDeposit ? int(1) : int(-1));\n//         }\n\n//         totalDeposited = isDeposit ? totalDeposited + assets : totalDeposited - assets;\n\n//         storeAccBlockWeightedMarketCap();\n//     }\n\n//     // Withdraw requests (need to be done before calling 'withdraw' / 'redeem')\n//     function makeWithdrawRequest(uint shares, address owner) external {\n//         require(openTradesPnlFeed.nextEpochValuesRequestCount() == 0, \"END_OF_EPOCH\");\n\n//         address sender = _msgSender();\n//         uint allowance = allowance(owner, sender);\n//         require(sender == owner || (allowance > 0 && allowance >= shares), \"NOT_ALLOWED\");\n\n//         require(totalSharesBeingWithdrawn(owner) + shares <= balanceOf(owner), \"MORE_THAN_BALANCE\");\n\n//         uint unlockEpoch = currentEpoch + withdrawEpochsTimelock();\n//         withdrawRequests[owner][unlockEpoch] += shares;\n\n//         emit WithdrawRequested(sender, owner, shares, currentEpoch, unlockEpoch);\n//     }\n\n//     function cancelWithdrawRequest(uint shares, address owner, uint unlockEpoch) external {\n//         require(shares <= withdrawRequests[owner][unlockEpoch], \"MORE_THAN_WITHDRAW_AMOUNT\");\n\n//         address sender = _msgSender();\n//         uint allowance = allowance(owner, sender);\n//         require(sender == owner || (allowance > 0 && allowance >= shares), \"NOT_ALLOWED\");\n\n//         withdrawRequests[owner][unlockEpoch] -= shares;\n\n//         emit WithdrawCanceled(sender, owner, shares, currentEpoch, unlockEpoch);\n//     }\n\n//     // Locked and discounted deposits\n//     function depositWithDiscountAndLock(\n//         uint assets,\n//         uint lockDuration,\n//         address receiver\n//     ) external checks(assets) validDiscount(lockDuration) returns (uint) {\n//         uint simulatedAssets = (assets * (PRECISION * 100 + lockDiscountP(collateralizationP(), lockDuration))) /\n//             (PRECISION * 100);\n\n//         require(simulatedAssets <= maxDeposit(receiver), \"DEPOSIT_MORE_THAN_MAX\");\n\n//         return\n//             _executeDiscountAndLock(simulatedAssets, assets, previewDeposit(simulatedAssets), lockDuration, receiver);\n//     }\n\n//     function mintWithDiscountAndLock(\n//         uint shares,\n//         uint lockDuration,\n//         address receiver\n//     ) external checks(shares) validDiscount(lockDuration) returns (uint) {\n//         require(shares <= maxMint(receiver), \"MINT_MORE_THAN_MAX\");\n//         uint assets = previewMint(shares);\n\n//         return\n//             _executeDiscountAndLock(\n//                 assets,\n//                 (assets * (PRECISION * 100)) / (PRECISION * 100 + lockDiscountP(collateralizationP(), lockDuration)),\n//                 shares,\n//                 lockDuration,\n//                 receiver\n//             );\n//     }\n\n//     function _executeDiscountAndLock(\n//         uint assets,\n//         uint assetsDeposited,\n//         uint shares,\n//         uint lockDuration,\n//         address receiver\n//     ) private returns (uint) {\n//         require(assets > assetsDeposited, \"NO_DISCOUNT\");\n\n//         uint depositId = ++lockedDepositsCount;\n//         uint assetsDiscount = assets - assetsDeposited;\n\n//         LockedDeposit storage d = lockedDeposits[depositId];\n//         d.owner = receiver;\n//         d.shares = shares;\n//         d.assetsDeposited = assetsDeposited;\n//         d.assetsDiscount = assetsDiscount;\n//         d.atTimestamp = block.timestamp;\n//         d.lockDuration = lockDuration;\n\n//         scaleVariables(shares, assetsDeposited, true);\n//         address sender = _msgSender();\n//         _deposit(sender, address(this), assetsDeposited, shares);\n\n//         totalDiscounts += assetsDiscount;\n//         totalLockedDiscounts += assetsDiscount;\n\n//         lockedDepositNft.mint(receiver, depositId);\n\n//         emit DepositLocked(sender, d.owner, depositId, d);\n//         return depositId;\n//     }\n\n//     function unlockDeposit(uint depositId, address receiver) external {\n//         LockedDeposit storage d = lockedDeposits[depositId];\n\n//         address sender = _msgSender();\n//         address owner = lockedDepositNft.ownerOf(depositId);\n\n//         require(\n//             owner == sender ||\n//                 lockedDepositNft.getApproved(depositId) == sender ||\n//                 lockedDepositNft.isApprovedForAll(owner, sender),\n//             \"NOT_ALLOWED\"\n//         );\n//         require(block.timestamp >= d.atTimestamp + d.lockDuration, \"NOT_UNLOCKED\");\n\n//         int accPnlDelta = int(d.assetsDiscount.mulDiv(PRECISION, totalSupply(), MathUpgradeable.Rounding.Up));\n\n//         accPnlPerToken += accPnlDelta;\n//         require(accPnlPerToken <= int(maxAccPnlPerToken()), \"NOT_ENOUGH_ASSETS\");\n\n//         lockedDepositNft.burn(depositId);\n\n//         accPnlPerTokenUsed += accPnlDelta;\n//         updateShareToAssetsPrice();\n\n//         totalLiability += int(d.assetsDiscount);\n//         totalLockedDiscounts -= d.assetsDiscount;\n\n//         _transfer(address(this), receiver, d.shares);\n\n//         emit DepositUnlocked(sender, receiver, owner, depositId, d);\n//     }\n\n//     // Distributes a reward evenly to all stakers of the vault\n//     function distributeReward(uint assets) external {\n//         address sender = _msgSender();\n//         SafeERC20Upgradeable.safeTransferFrom(_assetIERC20(), sender, address(this), assets);\n\n//         accRewardsPerToken += (assets * PRECISION) / totalSupply();\n//         updateShareToAssetsPrice();\n\n//         totalRewards += assets;\n//         totalDeposited += assets;\n\n//         emit RewardDistributed(sender, assets);\n//     }\n\n//     // PnL interactions (happens often, so also used to trigger other actions)\n//     function sendAssets(uint assets, address receiver) external {\n//         address sender = _msgSender();\n//         require(sender == pnlHandler, \"ONLY_TRADING_PNL_HANDLER\");\n\n//         int accPnlDelta = int(assets.mulDiv(PRECISION, totalSupply(), MathUpgradeable.Rounding.Up));\n\n//         accPnlPerToken += accPnlDelta;\n//         require(accPnlPerToken <= int(maxAccPnlPerToken()), \"NOT_ENOUGH_ASSETS\");\n\n//         tryResetDailyAccPnlDelta();\n//         dailyAccPnlDelta += accPnlDelta;\n//         require(dailyAccPnlDelta <= int(maxDailyAccPnlDelta), \"MAX_DAILY_PNL\");\n\n//         totalLiability += int(assets);\n//         totalClosedPnl += int(assets);\n\n//         tryNewOpenPnlRequestOrEpoch();\n//         tryUpdateCurrentMaxSupply();\n\n//         SafeERC20Upgradeable.safeTransfer(_assetIERC20(), receiver, assets);\n\n//         emit AssetsSent(sender, receiver, assets);\n//     }\n\n//     function receiveAssets(uint assets, address user) external {\n//         address sender = _msgSender();\n//         SafeERC20Upgradeable.safeTransferFrom(_assetIERC20(), sender, address(this), assets);\n\n//         uint assetsLessDeplete = assets;\n\n//         if (accPnlPerTokenUsed < 0 && accPnlPerToken < 0) {\n//             uint depleteAmount = (assets * lossesBurnP) / PRECISION / 100;\n//             assetsToDeplete += depleteAmount;\n//             assetsLessDeplete -= depleteAmount;\n//         }\n\n//         int accPnlDelta = int((assetsLessDeplete * PRECISION) / totalSupply());\n//         accPnlPerToken -= accPnlDelta;\n\n//         tryResetDailyAccPnlDelta();\n//         dailyAccPnlDelta -= accPnlDelta;\n\n//         totalLiability -= int(assetsLessDeplete);\n//         totalClosedPnl -= int(assetsLessDeplete);\n\n//         tryNewOpenPnlRequestOrEpoch();\n//         tryUpdateCurrentMaxSupply();\n\n//         emit AssetsReceived(sender, user, assets, assetsLessDeplete);\n//     }\n\n//     // TODO\n//     // GNS mint / burn mechanism\n//     // function deplete(uint assets) external {\n//     //     require(assets <= assetsToDeplete, \"AMOUNT_TOO_BIG\");\n//     //     assetsToDeplete -= assets;\n\n//     //     uint amountGns = assets.mulDiv(GNS_PRECISION, gnsTokenToAssetsPrice(), MathUpgradeable.Rounding.Up);\n\n//     //     address sender = _msgSender();\n//     //     IGnsToken(gnsToken).burn(sender, amountGns);\n\n//     //     totalDepleted += assets;\n//     //     totalDepletedGns += amountGns;\n\n//     //     SafeERC20Upgradeable.safeTransfer(_assetIERC20(), sender, assets);\n\n//     //     emit Depleted(sender, assets, amountGns);\n//     // }\n\n//     function refill(uint assets) external {\n//         require(accPnlPerTokenUsed > 0, \"NOT_UNDER_COLLATERALIZED\");\n\n//         uint supply = totalSupply();\n//         require(assets <= (uint(accPnlPerTokenUsed) * supply) / PRECISION, \"AMOUNT_TOO_BIG\");\n\n//         if (block.timestamp - lastDailyMintedGnsReset >= 24 hours) {\n//             dailyMintedGns = 0;\n//             lastDailyMintedGnsReset = block.timestamp;\n//         }\n\n//         // uint amountGns = (assets * GNS_PRECISION) / gnsTokenToAssetsPrice();\n//         // dailyMintedGns += amountGns;\n\n//         require(\n//             dailyMintedGns <= (maxGnsSupplyMintDailyP * IERC20Upgradeable(gnsToken).totalSupply()) / PRECISION / 100,\n//             \"ABOVE_INFLATION_LIMIT\"\n//         );\n\n//         address sender = _msgSender();\n//         SafeERC20Upgradeable.safeTransferFrom(_assetIERC20(), sender, address(this), assets);\n\n//         int accPnlDelta = int((assets * PRECISION) / supply);\n//         accPnlPerToken -= accPnlDelta;\n//         accPnlPerTokenUsed -= accPnlDelta;\n//         updateShareToAssetsPrice();\n\n//         totalRefilled += assets;\n\n//         // TODO\n//         // totalRefilledGns += amountGns;\n\n//         // IGnsToken(gnsToken).mint(sender, amountGns);\n\n//         // emit Refilled(sender, assets, amountGns);\n//     }\n\n//     // Updates shareToAssetsPrice based on the new PnL and starts a new epoch\n//     function updateAccPnlPerTokenUsed(\n//         uint prevPositiveOpenPnl, // 1e18\n//         uint newPositiveOpenPnl // 1e18\n//     ) external returns (uint) {\n//         address sender = _msgSender();\n//         require(sender == address(openTradesPnlFeed), \"ONLY_PNL_FEED\");\n\n//         int delta = int(newPositiveOpenPnl) - int(prevPositiveOpenPnl); // 1e18\n//         uint supply = totalSupply();\n\n//         int maxDelta = int(\n//             MathUpgradeable.min(\n//                 (uint(int(maxAccPnlPerToken()) - accPnlPerToken) * supply) / PRECISION,\n//                 (maxAccOpenPnlDelta * supply) / PRECISION\n//             )\n//         ); // 1e18\n\n//         delta = delta > maxDelta ? maxDelta : delta;\n\n//         accPnlPerToken += (delta * int(PRECISION)) / int(supply);\n//         totalLiability += delta;\n\n//         accPnlPerTokenUsed = accPnlPerToken;\n//         updateShareToAssetsPrice();\n\n//         currentEpoch++;\n//         currentEpochStart = block.timestamp;\n//         currentEpochPositiveOpenPnl = uint(int(prevPositiveOpenPnl) + delta);\n\n//         tryUpdateCurrentMaxSupply();\n\n//         emit AccPnlPerTokenUsedUpdated(\n//             sender,\n//             currentEpoch,\n//             prevPositiveOpenPnl,\n//             newPositiveOpenPnl,\n//             currentEpochPositiveOpenPnl,\n//             accPnlPerTokenUsed\n//         );\n\n//         return currentEpochPositiveOpenPnl;\n//     }\n\n//     // Getters\n//     function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory) {\n//         return lockedDeposits[depositId];\n//     }\n\n//     function tvl() public view returns (uint) {\n//         return (maxAccPnlPerToken() * totalSupply()) / PRECISION; // 1e18\n//     }\n\n//     function availableAssets() public view returns (uint) {\n//         return (uint(int(maxAccPnlPerToken()) - accPnlPerTokenUsed) * totalSupply()) / PRECISION; // 1e18\n//     }\n\n//     // To be compatible with old pairs storage contract v6 (to be used only with gDAI vault)\n//     function currentBalanceDai() external view returns (uint) {\n//         return availableAssets(); // 1e18\n//     }\n\n//     function marketCap() public view returns (uint) {\n//         return (totalSupply() * shareToAssetsPrice) / PRECISION; // 1e18\n//     }\n// }"
    },
    "contracts/contracts/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../access/Ownable.sol\";\nimport \"../interfaces/ITransparentUpgradeableProxy.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}"
    },
    "contracts/contracts/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}"
    },
    "contracts/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}"
    },
    "contracts/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../utils/Address.sol\";\nimport \"../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\n                    \"upgradeTo(address)\",\n                    oldImplementation\n                )\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _setImplementation(newImplementation);\n            emit Upgraded(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(\n            Address.isContract(newBeacon),\n            \"ERC1967: new beacon is not a contract\"\n        );\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n}"
    },
    "contracts/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/import.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// Kept for backwards compatibility with older versions of Hardhat and Truffle plugins.\ncontract AdminUpgradeabilityProxy is TransparentUpgradeableProxy {\n    constructor(address logic, address admin, bytes memory data) payable TransparentUpgradeableProxy(logic, admin, data) {}\n}"
    },
    "contracts/interfaces/AggregatorInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface AggregatorInterfaceV5{\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE }\n    function getPrice(uint,OrderType,uint) external returns(uint);\n    function tokenPriceDai() external view returns(uint);\n    function pairMinOpenLimitSlippageP(uint) external view returns(uint);\n    function closeFeeP(uint) external view returns(uint);\n    function linkFee(uint,uint) external view returns(uint);\n    function openFeeP(uint) external view returns(uint);\n    function pairMinLeverage(uint) external view returns(uint);\n    function pairMaxLeverage(uint) external view returns(uint);\n    function pairsCount() external view returns(uint);\n    function tokenDaiReservesLp() external view returns(uint, uint);\n    function referralP(uint) external view returns(uint);\n    function nftLimitOrderFeeP(uint) external view returns(uint);\n}"
    },
    "contracts/interfaces/CallbacksInterfaceV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\npragma abicoder v2;\n\ninterface CallbacksInterfaceV6_4 {\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    function openTradeMarketCallback(AggregatorAnswer memory) external;\n\n    function closeTradeMarketCallback(AggregatorAnswer memory) external;\n\n    function executeNftOpenOrderCallback(AggregatorAnswer memory) external;\n\n    function executeNftCloseOrderCallback(AggregatorAnswer memory) external;\n}"
    },
    "contracts/interfaces/ChainlinkFeedInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ChainlinkFeedInterfaceV5{\n    function latestRoundData() external view returns (uint80,int,uint,uint,uint80);\n}"
    },
    "contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}"
    },
    "contracts/interfaces/GNSBorrowingFeesInterfaceV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface GNSBorrowingFeesInterfaceV6_4 {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n}"
    },
    "contracts/interfaces/GNSPairInfosInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface GNSPairInfosInterfaceV6 {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n}"
    },
    "contracts/interfaces/GNSReferralsInterfaceV6_2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface GNSReferralsInterfaceV6_2 {\n    function registerPotentialReferrer(address trader, address referral) external;\n\n    function distributePotentialReward(\n        address trader,\n        uint volumeDai,\n        uint pairOpenFeeP,\n        uint tokenPriceDai\n    ) external returns (uint);\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\n\n    function getTraderReferrer(address trader) external view returns (address referrer);\n}"
    },
    "contracts/interfaces/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}"
    },
    "contracts/interfaces/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.9._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}"
    },
    "contracts/interfaces/IGNSOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IGNSOracle {\n    function getAuthorizationStatus(address) external view returns (bool);\n    function owner() external view returns (address);\n}"
    },
    "contracts/interfaces/IGNSOracleRewardsV6_4_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {StorageInterfaceV5} from \"./StorageInterfaceV5.sol\";\n\ninterface IGNSOracleRewardsV6_4_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterfaceV5.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeTrigger(TriggeredLimitId calldata) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeOracleReward(TriggeredLimitId calldata, uint) external;\n\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n}"
    },
    "contracts/interfaces/IGnsToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IGnsToken {\n    function burn(address to, uint amount) external;\n\n    function mint(address from, uint amount) external;\n}"
    },
    "contracts/interfaces/IGToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\npragma abicoder v2;\n\ninterface IGToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceDai() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\n}"
    },
    "contracts/interfaces/INft.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\npragma solidity 0.8.20;\n\ninterface INft is IERC721 {\n    function mint(address to, uint tokenId) external;\n\n    function burn(uint tokenId) external;\n}"
    },
    "contracts/interfaces/IOpenTradesPnlFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IOpenTradesPnlFeed {\n    function nextEpochValuesRequestCount() external view returns (uint);\n\n    function newOpenPnlRequestOrEpoch() external;\n}"
    },
    "contracts/interfaces/ITransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"./IERC1967.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}"
    },
    "contracts/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface NftInterfaceV5{\n    function balanceOf(address) external view returns (uint);\n    function ownerOf(uint) external view returns (address);\n    function transferFrom(address, address, uint) external;\n    function tokenOfOwnerByIndex(address, uint) external view returns(uint);\n}"
    },
    "contracts/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PairsStorageInterfaceV6{\n    enum FeedCalculation { DEFAULT, INVERT, COMBINE }    // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed{ address feed1; address feed2; FeedCalculation feedCalculation; uint maxDeviationP; } // PRECISION (%)\n    function incrementCurrentOrderId() external returns(uint);\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n    function pairJob(uint) external returns(string memory, string memory, bytes32, uint);\n    function pairFeed(uint) external view returns(Feed memory);\n    function pairSpreadP(uint) external view returns(uint);\n    function pairMinLeverage(uint) external view returns(uint);\n    function pairMaxLeverage(uint) external view returns(uint);\n    function groupMaxCollateral(uint) external view returns(uint);\n    function groupCollateral(uint, bool) external view returns(uint);\n    function guaranteedSlEnabled(uint) external view returns(bool);\n    function pairOpenFeeP(uint) external view returns(uint);\n    function pairCloseFeeP(uint) external view returns(uint);\n    function pairOracleFeeP(uint) external view returns(uint);\n    function pairNftLimitOrderFeeP(uint) external view returns(uint);\n    function pairReferralFeeP(uint) external view returns(uint);\n    function pairMinLevPosDai(uint) external view returns(uint);\n}\n"
    },
    "contracts/interfaces/PausableInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PausableInterfaceV5{\n    function isPaused() external view returns (bool);\n}"
    },
    "contracts/interfaces/PoolInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PoolInterfaceV5{\n    function increaseAccTokensPerLp(uint) external;\n}"
    },
    "contracts/interfaces/StorageInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"./TokenInterfaceV5.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IGToken.sol\";\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterfaceV5.sol\";\n\npragma solidity 0.8.20;\npragma abicoder v2;\n\ninterface PoolInterfaceV5 {\n    function increaseAccTokensPerLp(uint) external;\n}\n\ninterface PausableInterfaceV5 {\n    function isPaused() external view returns (bool);\n}\n\ninterface StorageInterfaceV5 {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeDai; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceDai; // PRECISION\n        uint openInterestDai; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (DAI or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function dai() external view returns (TokenInterfaceV5);\n\n    function token() external view returns (TokenInterfaceV5);\n\n    function linkErc677() external view returns (TokenInterfaceV5);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\n\n    function vault() external view returns (IGToken);\n\n    function trading() external view returns (address);\n\n    function callbacks() external view returns (address);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferDai(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\n\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\n\n    function openTrades(address, uint, uint) external view returns (Trade memory);\n\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestDai(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    function fakeBlockNumber() external view returns (uint); // Testing\n}\n\ninterface IStateCopyUtils {\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\n\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\n}\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterfaceV5.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\n\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n\ninterface AggregatorInterfaceV6_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceDai() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\n\n    function nodes(uint index) external view returns (address);\n}\n\ninterface TradingCallbacksV6_4 {\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\n\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\n\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\n\n    function canExecuteTimeout() external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n}"
    },
    "contracts/interfaces/TokenInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface TokenInterfaceV5{\n    function burn(address, uint256) external;\n    function mint(address, uint256) external;\n    function transfer(address, uint256) external returns (bool);\n    function transferFrom(address, address, uint256) external returns(bool);\n    function balanceOf(address) external view returns(uint256);\n    function hasRole(bytes32, address) external view returns (bool);\n    function approve(address, uint256) external returns (bool);\n    function allowance(address, address) external view returns (uint256);\n}"
    },
    "contracts/interfaces/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/TransparentUpgradeableProxy.sol)\npragma solidity ^0.8.20;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\nimport \"./ITransparentUpgradeableProxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}"
    },
    "contracts/interfaces/UniswapRouterInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface UniswapRouterInterfaceV5{\n\tfunction swapExactTokensForTokens(\n\t\tuint amountIn,\n\t\tuint amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint amountOut,\n\t\tuint amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint deadline\n\t) external returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/VaultInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface VaultInterfaceV5{\n\tfunction sendDaiToTrader(address, uint) external;\n\tfunction receiveDaiFromTrader(address, uint, uint) external;\n\tfunction currentBalanceDai() external view returns(uint);\n\tfunction distributeRewardDai(uint) external;\n}"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\nimport \"../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}"
    },
    "contracts/libraries/PackingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n\nlibrary PackingUtils {\n    function pack(uint256[] memory values, uint256[] memory bitLengths) external pure returns (uint256 packed) {\n        require(values.length == bitLengths.length, \"Mismatch in the lengths of values and bitLengths arrays\");\n\n        uint256 currentShift;\n\n        for (uint256 i; i < values.length; i++) {\n            require(currentShift + bitLengths[i] <= 256, \"Packed value exceeds 256 bits\");\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            require(values[i] <= maxValue, \"Value too large for specified bit length\");\n\n            uint256 maskedValue = values[i] & maxValue;\n            packed |= maskedValue << currentShift;\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack(uint256 packed, uint256[] memory bitLengths) external pure returns (uint256[] memory values) {\n        values = new uint256[](bitLengths.length);\n\n        uint256 currentShift;\n        for (uint256 i; i < bitLengths.length; i++) {\n            require(currentShift + bitLengths[i] <= 256, \"Unpacked value exceeds 256 bits\");\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            uint256 mask = maxValue << currentShift;\n            values[i] = (packed & mask) >> currentShift;\n\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack256To64(uint256 packed) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\n        a = uint64(packed);\n        b = uint64(packed >> 64);\n        c = uint64(packed >> 128);\n        d = uint64(packed >> 192);\n    }\n\n    // Function-specific unpacking utils\n    function unpackExecuteNftOrder(\n        uint256 packed\n    ) external pure returns (uint256 a, address b, uint256 c, uint256 d, uint256 e, uint256 f) {\n        a = packed & 0xFF; // 8 bits\n        b = address(uint160(packed >> 8)); // 160 bits\n        c = (packed >> 168) & 0xFFFF; // 16 bits\n        d = (packed >> 184) & 0xFFFF; // 16 bits\n        e = (packed >> 200) & 0xFFFF; // 16 bits\n        f = (packed >> 216) & 0xFFFF; // 16 bits\n    }\n}"
    },
    "contracts/libraries/TradeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterfaceV5.sol\";\n\nlibrary TradeUtils {\n    function _getTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type\n    )\n        internal\n        view\n        returns (\n            TradingCallbacksV6_4,\n            TradingCallbacksV6_4.LastUpdated memory,\n            TradingCallbacksV6_4.SimplifiedTradeId memory\n        )\n    {\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\n\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\n    }\n\n    function setTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        uint32 b = uint32(blockNumber);\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        callbacks.setTradeLastUpdated(\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\n        );\n    }\n\n    function setSlLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksV6_4 callbacks,\n            TradingCallbacksV6_4.LastUpdated memory l,\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.sl = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function setTpLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksV6_4 callbacks,\n            TradingCallbacksV6_4.LastUpdated memory l,\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.tp = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function setTradeData(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint maxSlippageP\n    ) external {\n        require(maxSlippageP <= type(uint40).max, \"OVERFLOW\");\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        callbacks.setTradeData(\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\n        );\n    }\n}"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 { revert(0, returndatasize()) }\n            default { return(0, returndatasize()) }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive () external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {\n    }\n}"
    },
    "contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}"
    },
    "contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}"
    },
    "contracts/utils/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}"
    },
    "contracts/utils/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}"
    },
    "contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}"
    },
    "contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}"
    },
    "contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}"
    },
    "contracts/v6.2/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nabstract contract Delegatable {\n    mapping(address => address) public delegations;\n    address private senderOverride;\n\n    function setDelegate(address delegate) external {\n        require(tx.origin == msg.sender, \"NO_CONTRACT\");\n\n        delegations[msg.sender] = delegate;\n    }\n\n    function removeDelegate() external {\n        delegations[msg.sender] = address(0);\n    }\n\n    function delegatedAction(address trader, bytes calldata call_data) external returns (bytes memory) {\n        require(delegations[trader] == msg.sender, \"DELEGATE_NOT_APPROVED\");\n\n        senderOverride = trader;\n        (bool success, bytes memory result) = address(this).delegatecall(call_data);\n        if (!success) {\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\n            if (result.length < 68) revert();\n            assembly {\n                result := add(result, 0x04)\n            }\n            revert(abi.decode(result, (string)));\n        }\n\n        senderOverride = address(0);\n\n        return result;\n    }\n\n    function _msgSender() public view returns (address) {\n        if (senderOverride == address(0)) {\n            return msg.sender;\n        } else {\n            return senderOverride;\n        }\n    }\n}"
    },
    "contracts/v6.3/TWAPPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@134dd3v/uniswap-v3-core-0.8-support/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/TickMath.sol\";\nimport \"@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/FixedPoint96.sol\";\nimport \"@134dd3v/uniswap-v3-core-0.8-support/contracts/libraries/FullMath.sol\";\n\npragma solidity 0.8.20;\n\nabstract contract TWAPPriceGetter {\n    // Constants\n    uint32 constant MIN_TWAP_PERIOD = 1 hours / 2;\n    uint32 constant MAX_TWAP_PERIOD = 4 hours;\n\n    uint immutable precision;\n    address public immutable token;\n\n    // Adjustable parameters\n    IUniswapV3Pool public uniV3Pool;\n    uint32 public twapInterval;\n\n    // State\n    bool public isGnsToken0InLp;\n\n    // Events\n    event UniV3PoolUpdated(IUniswapV3Pool newValue);\n    event TwapIntervalUpdated(uint32 newValue);\n\n    constructor(IUniswapV3Pool _uniV3Pool, address _token, uint32 _twapInterval, uint _precision) {\n        require(\n            address(_uniV3Pool) != address(0) &&\n                _twapInterval >= MIN_TWAP_PERIOD &&\n                _twapInterval <= MAX_TWAP_PERIOD &&\n                _precision > 0,\n            \"WRONG_TWAP_CONSTRUCTOR\"\n        );\n\n        uniV3Pool = _uniV3Pool;\n        token = _token;\n        twapInterval = _twapInterval;\n        precision = _precision;\n\n        isGnsToken0InLp = uniV3Pool.token0() == _token;\n    }\n\n    // Manage variables\n    function _updateUniV3Pool(IUniswapV3Pool _uniV3Pool) internal {\n        require(address(_uniV3Pool) != address(0), \"WRONG_VALUE\");\n        uniV3Pool = _uniV3Pool;\n        isGnsToken0InLp = uniV3Pool.token0() == token;\n        emit UniV3PoolUpdated(_uniV3Pool);\n    }\n\n    function _updateTwapInterval(uint32 _twapInterval) internal {\n        require(_twapInterval >= MIN_TWAP_PERIOD && _twapInterval <= MAX_TWAP_PERIOD, \"WRONG_VALUE\");\n        twapInterval = _twapInterval;\n        emit TwapIntervalUpdated(_twapInterval);\n    }\n\n    // Returns price with \"precision\" decimals\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/OracleLibrary.sol\n    function tokenPriceDai() public view returns (uint price) {\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = twapInterval;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) = uniV3Pool.observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        int56 twapIntervalInt = int56(int32(twapInterval));\n\n        int24 arithmeticMeanTick = int24(tickCumulativesDelta / twapIntervalInt);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % twapIntervalInt != 0)) arithmeticMeanTick--;\n\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(arithmeticMeanTick);\n        price = (FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96) * precision) / 2 ** 96;\n\n        if (!isGnsToken0InLp) {\n            price = precision ** 2 / price;\n        }\n    }\n}"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000,
      "details": {
        "constantOptimizer": true
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}